{"file_contents":{"DEPLOYMENT_FILES_SUMMARY.md":{"content":"# üì¶ Deployment Files Summary\n## Complete Package for Local Development + Hosting\n\nI've created a comprehensive package for running your IT Helpdesk Portal locally and deploying to various hosting platforms with Supabase as the database.\n\n## üìÅ Files Created for You\n\n### üîß Configuration Files\n- **`package-local.json`** ‚Üí Rename to `package.json` (optimized for local dev)\n- **`vite.config.local.ts`** ‚Üí Rename to `vite.config.ts` (local build config)\n- **`.env.example`** ‚Üí Copy to `.env` (environment template)\n\n### üåê Netlify Deployment\n- **`netlify.toml`** ‚Üí Netlify configuration\n- **`netlify/functions/server.js`** ‚Üí Serverless function for API\n\n### ‚ö° Vercel Deployment  \n- **`vercel.json`** ‚Üí Vercel configuration\n- **`api/server.js`** ‚Üí Vercel API handler\n\n### üìö Documentation\n- **`LOCAL_DEVELOPMENT_GUIDE.md`** ‚Üí Complete setup guide\n- **`QUICK_SETUP_CHECKLIST.md`** ‚Üí Fast setup checklist\n- **`supabase-sql-queries.sql`** ‚Üí Database schema + sample data\n\n## üöÄ Quick Start Summary\n\n### 1. Setup Supabase (5 min)\n- Create project at supabase.com\n- Run SQL queries from `supabase-sql-queries.sql`\n- Get connection string\n\n### 2. Local Development (2 min)\n```bash\nnpm install\ncp .env.example .env  # Add your Supabase URL\nnpm run dev           # Runs on localhost:5000\n```\n\n### 3. Deploy to Netlify (3 min)\n```bash\nnpm install -g netlify-cli\nnetlify login\nnpm run build\nnetlify deploy --prod\n```\n\n### 4. Deploy to Vercel (3 min)\n```bash\nnpm install -g vercel\nvercel login  \nvercel --prod\n```\n\n## üéØ Key Features\n\n### ‚úÖ What You Get\n- **Full local development environment**\n- **Production-ready build configuration**\n- **Multiple hosting platform support**\n- **Supabase database integration**\n- **Complete sample data**\n- **Security configurations**\n- **Performance optimizations**\n\n### üîê Demo Credentials\n- Admin: `admin` / `admin123`\n- Agent: `agent` / `agent123`  \n- User: `user` / `user123`\n\n## üìã Files You Need to Copy\n\n### From Your Current Replit Project:\n```\nclient/src/           (entire folder)\nserver/               (entire folder)\nshared/               (entire folder)\npackage-lock.json\ntsconfig.json\ntailwind.config.ts\npostcss.config.js\ndrizzle.config.ts\ntheme.json\n.gitignore\n```\n\n### Use New Files I Created:\n```\npackage-local.json    ‚Üí package.json\nvite.config.local.ts  ‚Üí vite.config.ts\n.env.example          ‚Üí .env (with your Supabase URL)\nnetlify.toml\nvercel.json\nnetlify/functions/server.js\napi/server.js\n```\n\n## üéâ Result\n\nAfter setup, you'll have:\n- **Local development server** at `localhost:5000`\n- **Production deployment** on your chosen platform\n- **Supabase database** with all your data\n- **Complete IT Helpdesk Portal** ready for users\n\nThe entire setup takes about 10-15 minutes and gives you a fully functional production application!","size_bytes":2827},"IT_Helpdesk_Portal_User_Journey_Documentation.md":{"content":"# IT Helpdesk Portal - User Journey Documentation\n\n## Table of Contents\n1. [Executive Summary](#executive-summary)\n2. [Getting Started](#getting-started)\n3. [User Interface Overview](#user-interface-overview)\n4. [Step-by-Step User Journey](#step-by-step-user-journey)\n5. [Feature Deep Dive](#feature-deep-dive)\n6. [Advanced Features](#advanced-features)\n7. [Support and Resources](#support-and-resources)\n8. [Appendix](#appendix)\n\n---\n\n## 1. Executive Summary\n\n### Application Purpose\nThe IT Helpdesk Portal is a comprehensive technical support management system designed to streamline IT support workflows and enhance user experience. It provides a centralized platform for ticket management, knowledge sharing, and automated assistance.\n\n### Key Benefits\n- **Streamlined Support Process**: Centralized ticket creation, tracking, and resolution\n- **Self-Service Capabilities**: Comprehensive knowledge base and FAQ system\n- **AI-Powered Assistance**: Integrated chatbot for instant support\n- **Role-Based Access**: Multi-tier user management (Admin, Agent, User)\n- **Real-Time Analytics**: Dashboard insights and performance metrics\n- **Mobile-Responsive Design**: Accessible across all devices\n\n### Target Audience\n- **End Users**: Employees seeking IT support and solutions\n- **IT Support Agents**: Technical staff managing and resolving tickets\n- **IT Administrators**: System managers overseeing support operations\n- **Management**: Stakeholders monitoring support performance\n\n### Quick Summary of Main Features\n- Multi-role authentication system\n- Ticket creation and management\n- Knowledge base with searchable FAQs\n- AI-powered chatbot assistance\n- Real-time dashboard and analytics\n- Category-based issue organization\n- Comment and collaboration system\n\n---\n\n## 2. Getting Started\n\n### System Requirements\n- **Browser Compatibility**: Modern web browsers (Chrome 90+, Firefox 88+, Safari 14+, Edge 90+)\n- **Internet Connection**: Stable broadband connection recommended\n- **Device Requirements**: Desktop, tablet, or mobile device with screen resolution 320px+ width\n- **JavaScript**: Must be enabled in browser settings\n\n### Access Instructions\n1. **URL Access**: Navigate to your organization's helpdesk portal URL\n2. **Login Required**: All users must authenticate to access the system\n3. **Demo Credentials** (for testing):\n   - **Admin**: username: `admin`, password: `admin123`\n   - **Agent**: username: `agent`, password: `agent123`\n   - **User**: username: `user`, password: `user123`\n\n### Initial Setup Steps\n1. **First-Time Login**: Use provided credentials or contact your IT administrator\n2. **Profile Setup**: Complete your profile information (name, email, department)\n3. **Password Change**: Change default password on first login (recommended)\n4. **Notification Preferences**: Configure email and system notifications\n5. **Dashboard Familiarization**: Review available features based on your role\n\n### Account Creation Process\n*Note: Account creation is typically managed by administrators. Contact your IT department for new account requests.*\n\n**For Administrators Creating New Accounts:**\n1. Navigate to Users section in admin panel\n2. Click \"Add New User\"\n3. Complete required fields (username, password, name, email, role)\n4. Assign appropriate role (Admin, Agent, or User)\n5. Send credentials to new user securely\n\n---\n\n## 3. User Interface Overview\n\n### Main Navigation Elements\n- **Sidebar Navigation**: Primary navigation menu with role-based visibility\n- **Top Header**: User profile, notifications, and logout options\n- **Breadcrumb Navigation**: Current page location indicator\n- **Search Bar**: Global search functionality (when available)\n\n### Dashboard/Homepage Walkthrough\n**Dashboard Components:**\n- **Quick Stats Cards**: Open tickets, in-progress items, resolved tickets\n- **Recent Activity**: Latest ticket updates and system notifications\n- **Performance Metrics**: Response times and SLA compliance rates\n- **Quick Actions**: Shortcuts to frequently used features\n\n[Screenshot: Dashboard showing main statistics cards, recent activity feed, and quick action buttons]\n\n### Key UI Components and Their Functions\n- **Ticket Cards**: Visual representation of support requests with status indicators\n- **Status Badges**: Color-coded indicators (Open, In Progress, Resolved, Closed)\n- **Priority Labels**: High, Medium, Low priority visual markers\n- **Action Buttons**: Context-specific actions (Edit, Comment, Assign, Close)\n- **Filter Controls**: Sort and filter options for lists and tables\n- **Modal Windows**: Pop-up forms for creating and editing content\n\n### Mobile Responsiveness Notes\n- **Responsive Design**: Adapts to screen sizes from 320px to 1920px+\n- **Touch-Friendly**: Buttons and interactive elements optimized for touch\n- **Collapsible Sidebar**: Mobile menu that expands/collapses as needed\n- **Swipe Gestures**: Supported for navigation on mobile devices\n- **Optimized Forms**: Mobile-friendly form layouts and input methods\n\n---\n\n## 4. Step-by-Step User Journey\n\n### Journey 1: Creating a Support Ticket\n**Objective**: Submit a new IT support request\n**Entry Point**: Dashboard or \"Create Ticket\" button\n**Estimated Time**: 3-5 minutes\n\n**Step-by-Step Process:**\n1. **Access Creation Form**\n   - Click \"Create Ticket\" button from dashboard or sidebar\n   - System redirects to ticket creation form\n\n2. **Complete Required Information**\n   - Enter descriptive ticket title\n   - Select appropriate category (Network Issues, Software Problems, etc.)\n   - Choose subcategory if applicable\n   - Set priority level (Low, Medium, High)\n\n3. **Provide Detailed Description**\n   - Describe the issue comprehensively\n   - Include steps to reproduce (if applicable)\n   - Mention any error messages received\n\n4. **Submit Ticket**\n   - Review information for accuracy\n   - Click \"Submit Ticket\" button\n   - System generates unique ticket ID\n\n**Expected Outcomes:**\n- Ticket created successfully with unique ID\n- Confirmation message displayed\n- Email notification sent (if configured)\n- Ticket appears in \"My Tickets\" section\n\n**Troubleshooting:**\n- **Form Validation Errors**: Ensure all required fields are completed\n- **Category Issues**: Contact admin if appropriate category is missing\n- **Submission Failures**: Check internet connection and retry\n\n[Screenshot: Ticket creation form with all required fields highlighted]\n\n### Journey 2: Tracking Ticket Progress\n**Objective**: Monitor status and updates of submitted tickets\n**Entry Point**: \"My Tickets\" section\n**Estimated Time**: 1-2 minutes\n\n**Step-by-Step Process:**\n1. **Navigate to Tickets**\n   - Click \"My Tickets\" in sidebar navigation\n   - View list of all submitted tickets\n\n2. **Review Ticket Status**\n   - Check status badges (Open, In Progress, Resolved, Closed)\n   - Note last update timestamps\n   - Review priority levels\n\n3. **View Ticket Details**\n   - Click on specific ticket to view full details\n   - Read agent responses and comments\n   - Check resolution progress\n\n4. **Add Comments (if needed)**\n   - Click \"Add Comment\" button\n   - Provide additional information\n   - Submit comment\n\n**Expected Outcomes:**\n- Clear visibility of ticket status\n- Access to complete ticket history\n- Ability to communicate with support agents\n- Real-time updates on progress\n\n[Screenshot: Ticket list view showing various statuses and last updated times]\n\n### Journey 3: Using the Knowledge Base\n**Objective**: Find solutions to common issues independently\n**Entry Point**: Knowledge Base section\n**Estimated Time**: 2-10 minutes\n\n**Step-by-Step Process:**\n1. **Access Knowledge Base**\n   - Click \"Knowledge Base\" in sidebar\n   - Browse available FAQ categories\n\n2. **Search for Solutions**\n   - Use search bar to find specific topics\n   - Browse by category for related issues\n   - Review FAQ titles and descriptions\n\n3. **Read Solution Details**\n   - Click on relevant FAQ item\n   - Follow step-by-step instructions\n   - Note any prerequisites or requirements\n\n4. **Apply Solution**\n   - Implement suggested fixes\n   - Test to verify resolution\n   - Mark as helpful (if option available)\n\n**Expected Outcomes:**\n- Quick access to common solutions\n- Reduced need for ticket creation\n- Improved self-service capabilities\n- Better understanding of system processes\n\n[Screenshot: Knowledge base interface showing search functionality and categorized FAQ items]\n\n### Journey 4: Using the AI Chatbot\n**Objective**: Get instant assistance and guidance\n**Entry Point**: Chat icon or dedicated chat section\n**Estimated Time**: 1-5 minutes\n\n**Step-by-Step Process:**\n1. **Open Chat Interface**\n   - Click chat icon (usually bottom-right corner)\n   - Chat window opens with welcome message\n\n2. **Describe Your Issue**\n   - Type your question or problem description\n   - Be specific about symptoms or error messages\n   - Send message\n\n3. **Review Bot Response**\n   - Read suggested solutions\n   - Follow provided links or instructions\n   - Ask follow-up questions if needed\n\n4. **Escalate if Necessary**\n   - If bot cannot resolve issue, request human agent\n   - Bot will guide you to ticket creation process\n   - Previous chat context can be included\n\n**Expected Outcomes:**\n- Immediate response to common questions\n- Guided troubleshooting steps\n- Seamless escalation to human support\n- 24/7 availability for basic assistance\n\n[Screenshot: Chat interface showing conversation flow and response options]\n\n---\n\n## 5. Feature Deep Dive\n\n### Dashboard and Analytics\n**Purpose and Benefits:**\n- Provides real-time overview of support activity\n- Enables performance monitoring and trend analysis\n- Offers quick access to frequently used features\n\n**How to Access:**\n- Available immediately upon login\n- Click \"Dashboard\" in sidebar to return anytime\n- Role-based widgets display relevant information\n\n**Detailed Usage Instructions:**\n1. **Statistics Overview**: Review key metrics in top cards\n2. **Recent Activity**: Monitor latest ticket updates\n3. **Performance Metrics**: Track response times and resolution rates\n4. **Quick Actions**: Use shortcuts for common tasks\n\n**Best Practices:**\n- Check dashboard regularly for updates\n- Use performance metrics to identify trends\n- Leverage quick actions for efficiency\n\n**Limitations:**\n- Data updates may have 5-10 minute delay\n- Historical data limited to last 12 months\n- Some metrics require admin permissions\n\n### Ticket Management System\n**Purpose and Benefits:**\n- Centralized tracking of all support requests\n- Structured workflow for issue resolution\n- Complete audit trail of support activities\n\n**How to Access:**\n- \"My Tickets\" for personal tickets\n- \"All Tickets\" for broader view (role-dependent)\n- Individual ticket details via click-through\n\n**Detailed Usage Instructions:**\n1. **Creating Tickets**: Use structured form with categories\n2. **Updating Status**: Agents can modify ticket status\n3. **Adding Comments**: Communicate throughout resolution process\n4. **Assigning Tickets**: Route to appropriate support staff\n\n**Best Practices:**\n- Provide detailed descriptions in initial ticket\n- Respond promptly to agent questions\n- Update ticket when trying suggested solutions\n\n**Limitations:**\n- Tickets cannot be deleted, only closed\n- Priority changes may require agent approval\n- Some fields locked after submission\n\n### Knowledge Base System\n**Purpose and Benefits:**\n- Self-service resource for common issues\n- Reduces ticket volume through proactive solutions\n- Searchable repository of organizational knowledge\n\n**How to Access:**\n- \"Knowledge Base\" in main navigation\n- Search functionality across all articles\n- Category-based browsing\n\n**Detailed Usage Instructions:**\n1. **Browsing Categories**: Navigate through organized topics\n2. **Search Functionality**: Use keywords to find specific solutions\n3. **Reading Articles**: Follow step-by-step instructions\n4. **Feedback**: Rate articles for usefulness\n\n**Best Practices:**\n- Search before creating tickets\n- Follow instructions completely before requesting help\n- Provide feedback on article quality\n\n**Limitations:**\n- Articles may not cover all scenarios\n- Some solutions require admin privileges\n- Content updates depend on admin maintenance\n\n### AI-Powered Chatbot\n**Purpose and Benefits:**\n- Instant response to common questions\n- 24/7 availability for basic support\n- Intelligent routing to appropriate resources\n\n**How to Access:**\n- Chat icon in interface\n- Dedicated chat section (if available)\n- Contextual help prompts\n\n**Detailed Usage Instructions:**\n1. **Starting Conversation**: Click chat icon and type message\n2. **Following Suggestions**: Implement bot-provided solutions\n3. **Escalation**: Request human agent when needed\n4. **Context Sharing**: Chat history can inform ticket creation\n\n**Best Practices:**\n- Be specific in your questions\n- Follow suggested troubleshooting steps\n- Provide feedback on bot responses\n\n**Limitations:**\n- Cannot handle complex technical issues\n- May require escalation for account-specific problems\n- Learning improves with usage over time\n\n---\n\n## 6. Advanced Features\n\n### User Management (Admin Feature)\n**Purpose**: Manage system users and permissions\n**Access**: Admin role required, \"Users\" section\n**Capabilities**:\n- Create new user accounts\n- Modify user roles and permissions\n- Deactivate or reactivate accounts\n- View user activity logs\n\n### Category Management (Admin Feature)\n**Purpose**: Organize and maintain issue categories\n**Access**: Admin role required, \"Categories\" section\n**Capabilities**:\n- Create new categories and subcategories\n- Modify existing category structures\n- Manage category descriptions and workflows\n- Set category-specific routing rules\n\n### Reporting and Analytics (Admin/Agent Feature)\n**Purpose**: Generate detailed performance reports\n**Access**: Role-based access to reporting tools\n**Capabilities**:\n- Custom date range reporting\n- Export data to CSV/PDF formats\n- Performance trend analysis\n- SLA compliance monitoring\n\n### System Configuration (Admin Feature)\n**Purpose**: Customize system behavior and appearance\n**Access**: Admin role required, system settings\n**Capabilities**:\n- Modify system notifications\n- Configure email settings\n- Customize branding elements\n- Set workflow rules and automations\n\n---\n\n## 7. Support and Resources\n\n### Frequently Asked Questions\n\n**Q: How do I reset my password?**\nA: Contact your system administrator for password reset requests. Self-service password reset is not currently available.\n\n**Q: Why can't I see certain menu options?**\nA: Menu visibility depends on your user role. Contact your administrator if you need access to additional features.\n\n**Q: How long does it take to get a response to my ticket?**\nA: Response times vary by priority level:\n- High Priority: 2-4 hours\n- Medium Priority: 8-24 hours\n- Low Priority: 1-3 business days\n\n**Q: Can I attach files to my tickets?**\nA: File attachment capability depends on system configuration. Check with your administrator for current policies.\n\n**Q: How do I escalate an urgent issue?**\nA: Create a ticket with \"High\" priority or contact your support team directly using provided emergency contact information.\n\n### Contact Information\n- **System Administrator**: [Contact details to be provided by organization]\n- **Technical Support**: [Contact details to be provided by organization]\n- **Emergency Support**: [Contact details to be provided by organization]\n\n### Known Issues and Workarounds\n- **Browser Compatibility**: If experiencing issues, try clearing browser cache or using an incognito/private window\n- **Session Timeout**: Sessions expire after 30 minutes of inactivity. Save work frequently\n- **Mobile Performance**: Some features may be limited on mobile devices. Use desktop for full functionality\n\n### Future Updates Roadmap\n- Enhanced mobile application\n- Advanced reporting features\n- Integration with additional IT tools\n- Improved AI chatbot capabilities\n- Single sign-on (SSO) integration\n\n---\n\n## 8. Appendix\n\n### Keyboard Shortcuts\n- **Ctrl + /**: Open search\n- **Ctrl + N**: Create new ticket (when available)\n- **Esc**: Close modal windows\n- **Tab**: Navigate between form fields\n- **Enter**: Submit forms (when cursor in text field)\n\n### Technical Specifications\n- **Database**: PostgreSQL with persistent storage\n- **Frontend**: React.js with TypeScript\n- **Backend**: Node.js with Express\n- **Authentication**: Session-based with role management\n- **Responsive Design**: Mobile-first approach\n- **Browser Support**: Modern browsers with ES6+ support\n\n### Glossary of Terms\n- **SLA**: Service Level Agreement - commitments for response and resolution times\n- **Ticket**: A support request submitted through the system\n- **Agent**: IT support staff member who resolves tickets\n- **FAQ**: Frequently Asked Questions - knowledge base articles\n- **Dashboard**: Main overview screen showing key metrics\n- **Priority**: Urgency level assigned to tickets (Low, Medium, High)\n- **Status**: Current state of a ticket (Open, In Progress, Resolved, Closed)\n- **Category**: Classification system for organizing types of issues\n\n### Version History\n- **Version 1.0**: Initial release with core functionality\n- **Version 1.1**: Added role-based access improvements\n- **Version 1.2**: Enhanced mobile responsiveness\n- **Version 1.3**: Integrated AI chatbot capabilities\n- **Current Version**: All features accessible to all authenticated users\n\n---\n\n## Success Metrics and Completion Indicators\n\n### Ticket Creation Success\n- ‚úÖ Ticket submitted with unique ID generated\n- ‚úÖ Confirmation message displayed\n- ‚úÖ Email notification sent (if configured)\n- ‚úÖ Ticket appears in personal ticket list\n\n### Knowledge Base Usage Success\n- ‚úÖ Relevant articles found through search\n- ‚úÖ Solution steps followed completely\n- ‚úÖ Issue resolved without creating ticket\n- ‚úÖ Article marked as helpful\n\n### Overall System Success\n- ‚úÖ User can navigate all available features\n- ‚úÖ Appropriate content displays based on user role\n- ‚úÖ System responds within acceptable timeframes\n- ‚úÖ Data persists across sessions\n\n---\n\n*This documentation is designed to be easily converted to PDF format for distribution to clients and stakeholders. For additional assistance or clarification on any section, please contact your system administrator.*\n\n**Document Version**: 1.0  \n**Last Updated**: January 15, 2025  \n**Next Review Date**: April 15, 2025","size_bytes":18369},"LOCAL_DEVELOPMENT_GUIDE.md":{"content":"# üöÄ Local Development & Deployment Guide\n## IT Helpdesk Portal - Complete Setup for Local Development + Hosting\n\nThis guide covers local development setup and deployment to Netlify, Vercel, or other hosting platforms using Supabase as the database.\n\n## üìã Prerequisites\n\n### Required Software\n- **Node.js** (v18 or higher) - [Download](https://nodejs.org/)\n- **Git** - [Download](https://git-scm.com/)\n- **Code Editor** (VS Code recommended) - [Download](https://code.visualstudio.com/)\n\n### Accounts Needed\n- **Supabase Account** (free) - [Sign up](https://supabase.com/)\n- **Netlify Account** (free) - [Sign up](https://netlify.com/) OR\n- **Vercel Account** (free) - [Sign up](https://vercel.com/)\n\n## üìÅ Download Project Files\n\n### Step 1: Create Project Directory\n```bash\nmkdir it-helpdesk-portal\ncd it-helpdesk-portal\n```\n\n### Step 2: Copy All Files\nYou'll need to copy these files from your Replit project to your local directory:\n\n**Essential Files to Copy:**\n```\nclient/src/          (entire folder)\nserver/              (entire folder)  \nshared/              (entire folder)\npackage.json\npackage-lock.json\ntsconfig.json\nvite.config.ts\ntailwind.config.ts\npostcss.config.js\ndrizzle.config.ts\ntheme.json\n.gitignore\n```\n\n**Migration Files:**\n```\nsupabase-sql-queries.sql\nsupabase-migration-guide.md\nSUPABASE_MIGRATION_CHECKLIST.md\n```\n\n## ‚ö° Local Development Setup\n\n### Step 1: Install Dependencies\n```bash\nnpm install\n```\n\n### Step 2: Create Environment File\n```bash\n# Create .env file\ntouch .env\n```\n\nAdd to `.env`:\n```bash\n# Database\nDATABASE_URL=your_supabase_url_here\nPGHOST=your_supabase_host\nPGPORT=5432\nPGUSER=postgres\nPGPASSWORD=your_supabase_password\nPGDATABASE=postgres\n\n# Session Management\nSESSION_SECRET=generate_a_random_secret_key_here\n\n# Development\nNODE_ENV=development\nPORT=5000\n```\n\n### Step 3: Setup Supabase Database\n\n#### Create Supabase Project\n1. Go to [Supabase Dashboard](https://supabase.com/dashboard)\n2. Click \"New Project\"\n3. Name: \"IT Helpdesk Portal\"\n4. Set strong database password\n5. Choose region closest to you\n6. Wait 2-3 minutes for creation\n\n#### Get Connection Details\n1. In Supabase dashboard, click \"Settings\" ‚Üí \"Database\"\n2. Copy connection details:\n   - Host: `db.xxx.supabase.co`\n   - Port: `5432`\n   - Database: `postgres`\n   - Username: `postgres`\n   - Password: your password\n\n#### Create Database Schema\n1. In Supabase, go to \"SQL Editor\"\n2. Copy the entire contents of `supabase-sql-queries.sql`\n3. Run the query to create all tables and sample data\n\n### Step 4: Update Environment Variables\nUpdate your `.env` file with actual Supabase details:\n```bash\nDATABASE_URL=postgresql://postgres.xxxx:your_password@aws-0-region.pooler.supabase.com:6543/postgres\nSESSION_SECRET=your_32_character_random_string_here\nNODE_ENV=development\nPORT=5000\n```\n\n### Step 5: Start Development Server\n```bash\nnpm run dev\n```\n\nVisit: `http://localhost:5000`\n\n**Demo Credentials:**\n- Admin: `admin` / `admin123`\n- Agent: `agent` / `agent123`\n- User: `user` / `user123`\n\n## üåê Deployment Options\n\n## Option A: Netlify Deployment\n\n### 1. Prepare for Netlify\nCreate `netlify.toml` in project root:\n```toml\n[build]\n  command = \"npm run build\"\n  publish = \"dist\"\n\n[build.environment]\n  NODE_VERSION = \"18\"\n\n[[redirects]]\n  from = \"/api/*\"\n  to = \"/.netlify/functions/api/:splat\"\n  status = 200\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[functions]\n  directory = \"netlify/functions\"\n```\n\n### 2. Create Netlify Functions\n```bash\nmkdir -p netlify/functions\n```\n\nCreate `netlify/functions/api.js`:\n```javascript\nconst express = require('express');\nconst serverless = require('serverless-http');\nconst { registerRoutes } = require('../../server/routes');\nconst { setupAuth } = require('../../server/auth');\n\nconst app = express();\n\n// Setup middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Setup authentication\nsetupAuth(app);\n\n// Register routes\nregisterRoutes(app);\n\n// Export for Netlify\nmodule.exports.handler = serverless(app);\n```\n\n### 3. Deploy to Netlify\n\n**Option 3A: Netlify CLI**\n```bash\n# Install Netlify CLI\nnpm install -g netlify-cli\n\n# Login to Netlify\nnetlify login\n\n# Build and deploy\nnpm run build\nnetlify deploy --prod\n```\n\n**Option 3B: Git Integration**\n1. Push code to GitHub/GitLab\n2. Connect repository in Netlify dashboard\n3. Set build command: `npm run build`\n4. Set publish directory: `dist`\n5. Add environment variables in Netlify settings\n\n### 4. Configure Environment in Netlify\nIn Netlify dashboard ‚Üí Site settings ‚Üí Environment variables:\n```\nDATABASE_URL=your_supabase_connection_string\nSESSION_SECRET=your_random_secret\nNODE_ENV=production\n```\n\n## Option B: Vercel Deployment\n\n### 1. Install Vercel CLI\n```bash\nnpm install -g vercel\n```\n\n### 2. Create Vercel Configuration\nCreate `vercel.json`:\n```json\n{\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"server/index.ts\",\n      \"use\": \"@vercel/node\"\n    },\n    {\n      \"src\": \"client/**/*\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"dist\"\n      }\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/api/(.*)\",\n      \"dest\": \"/server/index.ts\"\n    },\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/client/$1\"\n    }\n  ],\n  \"env\": {\n    \"NODE_ENV\": \"production\"\n  }\n}\n```\n\n### 3. Deploy to Vercel\n```bash\n# Login to Vercel\nvercel login\n\n# Deploy\nvercel --prod\n```\n\n### 4. Configure Environment in Vercel\n```bash\n# Add environment variables\nvercel env add DATABASE_URL\nvercel env add SESSION_SECRET\nvercel env add NODE_ENV\n```\n\n## Option C: Railway Deployment\n\n### 1. Install Railway CLI\n```bash\nnpm install -g @railway/cli\n```\n\n### 2. Create Railway Project\n```bash\nrailway login\nrailway init\nrailway add --database postgresql\n```\n\n### 3. Configure for Railway\nCreate `railway.toml`:\n```toml\n[build]\n  builder = \"nixpacks\"\n\n[deploy]\n  startCommand = \"npm start\"\n\n[variables]\n  NODE_ENV = \"production\"\n  PORT = \"3000\"\n```\n\n### 4. Deploy to Railway\n```bash\nrailway up\n```\n\n## üì¶ Build Configuration\n\n### Update package.json Scripts\n```json\n{\n  \"scripts\": {\n    \"dev\": \"concurrently \\\"npm run dev:server\\\" \\\"npm run dev:client\\\"\",\n    \"dev:server\": \"tsx watch server/index.ts\",\n    \"dev:client\": \"vite\",\n    \"build\": \"npm run build:client && npm run build:server\",\n    \"build:client\": \"vite build\",\n    \"build:server\": \"tsx build server/index.ts\",\n    \"start\": \"node dist/server/index.js\",\n    \"preview\": \"vite preview\",\n    \"db:push\": \"drizzle-kit push\",\n    \"db:studio\": \"drizzle-kit studio\"\n  }\n}\n```\n\n### Add Build Dependencies\n```bash\nnpm install --save-dev concurrently tsx @types/node\n```\n\n## üîß Production Optimizations\n\n### 1. Environment-Specific Configs\nUpdate `vite.config.ts`:\n```typescript\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './client/src'),\n      '@shared': path.resolve(__dirname, './shared'),\n    },\n  },\n  build: {\n    outDir: 'dist',\n    sourcemap: false,\n    minify: 'terser',\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          router: ['wouter'],\n          ui: ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu']\n        }\n      }\n    }\n  },\n  server: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5000',\n        changeOrigin: true\n      }\n    }\n  }\n})\n```\n\n### 2. Production Server Config\nUpdate `server/index.ts` for production:\n```typescript\nimport express from 'express';\nimport path from 'path';\nimport { registerRoutes } from './routes';\nimport { setupAuth } from './auth';\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Setup authentication\nsetupAuth(app);\n\n// API routes\nregisterRoutes(app);\n\n// Serve static files in production\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(path.join(__dirname, '../dist')));\n  \n  app.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname, '../dist/index.html'));\n  });\n}\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n## üîí Security for Production\n\n### 1. Environment Variables\nNever commit these to version control:\n```bash\n# Add to .gitignore\n.env\n.env.local\n.env.production\n```\n\n### 2. Secure Session Secret\nGenerate strong session secret:\n```bash\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n```\n\n### 3. CORS Configuration\nUpdate server for production CORS:\n```typescript\nimport cors from 'cors';\n\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? ['https://your-domain.netlify.app'] \n    : ['http://localhost:3000'],\n  credentials: true\n}));\n```\n\n## üß™ Testing Before Deployment\n\n### 1. Local Production Build\n```bash\n# Build for production\nnpm run build\n\n# Test production build locally\nnpm run preview\n```\n\n### 2. Environment Testing\n```bash\n# Test with production environment\nNODE_ENV=production npm start\n```\n\n### 3. Database Connection Test\n```bash\n# Test Supabase connection\nnode -e \"\nconst { Pool } = require('@neondatabase/serverless');\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\npool.query('SELECT COUNT(*) FROM users').then(res => \n  console.log('Users count:', res.rows[0].count)\n);\n\"\n```\n\n## üìä Monitoring & Analytics\n\n### 1. Add Error Tracking (Optional)\n```bash\nnpm install @sentry/react @sentry/node\n```\n\n### 2. Performance Monitoring\n- Use Vercel Analytics\n- Netlify Analytics\n- Google Analytics\n\n## üêõ Troubleshooting\n\n### Common Issues\n\n**Build Fails**\n```bash\n# Clear cache and rebuild\nrm -rf node_modules dist\nnpm install\nnpm run build\n```\n\n**Database Connection Error**\n- Check Supabase project is active\n- Verify connection string format\n- Test from Supabase SQL editor\n\n**Assets Not Loading**\n- Check build output in `dist` folder\n- Verify static file serving in production\n- Check console for 404 errors\n\n### Deployment-Specific Issues\n\n**Netlify Functions Timeout**\n- Increase function timeout in `netlify.toml`\n- Optimize database queries\n- Add connection pooling\n\n**Vercel Build Error**\n- Check Node.js version compatibility\n- Verify build command in `vercel.json`\n- Check function size limits\n\n## ‚úÖ Deployment Checklist\n\n### Before Deployment\n- [ ] All environment variables configured\n- [ ] Database schema deployed to Supabase\n- [ ] Sample data inserted\n- [ ] Local build successful\n- [ ] All tests passing\n- [ ] Security configurations set\n\n### After Deployment\n- [ ] Application loads without errors\n- [ ] Authentication works\n- [ ] Database operations function\n- [ ] All routes accessible\n- [ ] Demo accounts work\n- [ ] Mobile responsive design\n- [ ] Performance acceptable\n\n## üéâ Success!\n\nYour IT Helpdesk Portal is now:\n- Running locally for development\n- Deployed to your chosen platform\n- Connected to Supabase database\n- Ready for production use\n\n**Live Demo Credentials:**\n- Admin: `admin` / `admin123`\n- Agent: `agent` / `agent123`\n- User: `user` / `user123`\n\nYou can now develop locally and deploy updates automatically through your hosting platform's Git integration.","size_bytes":11224},"LOCAL_SETUP_GUIDE.md":{"content":"# üöÄ Local Development Setup Guide\n## IT Helpdesk Portal - Complete Local Installation\n\nThis guide will help you set up and run the IT Helpdesk Portal on your local machine.\n\n## üìã Prerequisites\n\n### Required Software\n- **Node.js** (v18 or higher) - [Download](https://nodejs.org/)\n- **npm** (comes with Node.js) or **yarn**\n- **Git** - [Download](https://git-scm.com/)\n- **Code Editor** (VS Code recommended) - [Download](https://code.visualstudio.com/)\n\n### Database Options\nChoose one of the following:\n\n**Option A: Supabase (Recommended)**\n- Free PostgreSQL database in the cloud\n- No local setup required\n- Better for production-like environment\n\n**Option B: Local PostgreSQL**\n- **PostgreSQL** (v14 or higher) - [Download](https://postgresql.org/download/)\n- More complex setup but full local control\n\n## üóÇÔ∏è Project Structure\n```\nit-helpdesk-portal/\n‚îú‚îÄ‚îÄ client/                 # React frontend\n‚îú‚îÄ‚îÄ server/                 # Express backend\n‚îú‚îÄ‚îÄ shared/                 # Shared types and schemas\n‚îú‚îÄ‚îÄ package.json           # Dependencies and scripts\n‚îú‚îÄ‚îÄ .env                   # Environment variables\n‚îú‚îÄ‚îÄ .env.example           # Environment template\n‚îî‚îÄ‚îÄ README.md              # Project documentation\n```\n\n## ‚ö° Quick Start (Supabase)\n\n### 1. Clone/Download Project\n```bash\n# If you have git access to this project\ngit clone <your-repo-url> it-helpdesk-portal\ncd it-helpdesk-portal\n\n# OR create new directory and copy all files manually\nmkdir it-helpdesk-portal\ncd it-helpdesk-portal\n# Copy all project files here\n```\n\n### 2. Install Dependencies\n```bash\nnpm install\n```\n\n### 3. Setup Supabase Database\n1. Go to [Supabase Dashboard](https://supabase.com/dashboard)\n2. Create new project: \"IT Helpdesk Portal\"\n3. Set strong database password\n4. Wait for project creation (2-3 minutes)\n5. Get connection string:\n   - Click \"Connect\" ‚Üí \"Connection string\" ‚Üí \"Transaction pooler\"\n   - Copy the URI and replace `[YOUR-PASSWORD]` with your password\n\n### 4. Configure Environment\n```bash\n# Copy environment template\ncp .env.example .env\n\n# Edit .env file with your database URL\nnano .env\n# OR\ncode .env\n```\n\nAdd to `.env`:\n```\nDATABASE_URL=your_supabase_connection_string_here\nSESSION_SECRET=your_random_session_secret_here\nNODE_ENV=development\nPORT=5000\n```\n\n### 5. Setup Database Schema\n```bash\n# Run database migration\nnpm run db:push\n```\n\n### 6. Insert Sample Data\n- Open Supabase SQL Editor\n- Copy contents from `supabase-sql-queries.sql`\n- Run the INSERT statements (skip CREATE TABLE sections)\n\n### 7. Start Development Server\n```bash\nnpm run dev\n```\n\nYour app will be available at: `http://localhost:5000`\n\n## üêò Local PostgreSQL Setup\n\n### 1. Install PostgreSQL\n- **Windows**: Download installer from postgresql.org\n- **macOS**: `brew install postgresql` (with Homebrew)\n- **Ubuntu**: `sudo apt install postgresql postgresql-contrib`\n\n### 2. Create Database\n```bash\n# Start PostgreSQL service\nsudo service postgresql start  # Linux\nbrew services start postgresql  # macOS\n\n# Create database\ncreatedb it_helpdesk_portal\n\n# Create user (optional)\ncreateuser --interactive helpdesk_user\n```\n\n### 3. Configure Environment\n```bash\ncp .env.example .env\n```\n\nAdd to `.env`:\n```\nDATABASE_URL=postgresql://username:password@localhost:5432/it_helpdesk_portal\nSESSION_SECRET=your_random_session_secret_here\nNODE_ENV=development\nPORT=5000\n```\n\n### 4. Run Database Setup\n```bash\n# Push schema to database\nnpm run db:push\n\n# Run sample data script\npsql -d it_helpdesk_portal -f supabase-sql-queries.sql\n```\n\n## üì¶ Dependencies\n\n### Backend Dependencies\n```json\n{\n  \"@neondatabase/serverless\": \"^0.9.0\",\n  \"express\": \"^4.18.2\",\n  \"express-session\": \"^1.17.3\",\n  \"passport\": \"^0.7.0\",\n  \"passport-local\": \"^1.0.0\",\n  \"drizzle-orm\": \"^0.29.0\",\n  \"drizzle-kit\": \"^0.20.0\",\n  \"zod\": \"^3.22.0\",\n  \"connect-pg-simple\": \"^9.0.1\"\n}\n```\n\n### Frontend Dependencies\n```json\n{\n  \"react\": \"^18.2.0\",\n  \"react-dom\": \"^18.2.0\",\n  \"wouter\": \"^3.0.0\",\n  \"@tanstack/react-query\": \"^5.0.0\",\n  \"react-hook-form\": \"^7.47.0\",\n  \"@hookform/resolvers\": \"^3.3.0\",\n  \"tailwindcss\": \"^3.3.0\",\n  \"lucide-react\": \"^0.290.0\"\n}\n```\n\n## üîß Available Scripts\n\n```bash\n# Development\nnpm run dev              # Start development server (frontend + backend)\nnpm run dev:client       # Start only frontend\nnpm run dev:server       # Start only backend\n\n# Database\nnpm run db:push          # Push schema changes to database\nnpm run db:studio        # Open Drizzle Studio (database GUI)\n\n# Build\nnpm run build            # Build for production\nnpm run start            # Start production server\n\n# Utilities\nnpm run lint             # Run ESLint\nnpm run type-check       # Run TypeScript checking\n```\n\n## üåê Environment Variables\n\n### Required Variables\n```bash\n# Database\nDATABASE_URL=postgresql://user:password@host:port/database\n\n# Session Management\nSESSION_SECRET=your-super-secret-session-key\n\n# Application\nNODE_ENV=development\nPORT=5000\n```\n\n### Optional Variables\n```bash\n# Frontend (prefix with VITE_)\nVITE_API_URL=http://localhost:5000/api\nVITE_APP_NAME=\"IT Helpdesk Portal\"\n\n# Logging\nLOG_LEVEL=debug\n```\n\n## üß™ Testing the Setup\n\n### 1. Check Database Connection\n```bash\n# Using npm script\nnpm run db:studio\n\n# OR manually test connection\nnode -e \"\nconst { Pool } = require('@neondatabase/serverless');\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\npool.query('SELECT NOW()').then(res => console.log('DB Connected:', res.rows[0]));\n\"\n```\n\n### 2. Test Application\n1. Open `http://localhost:5000`\n2. Login with demo credentials:\n   - **Admin**: `admin` / `admin123`\n   - **Agent**: `agent` / `agent123`\n   - **User**: `user` / `user123`\n3. Test core features:\n   - Create a ticket\n   - Browse knowledge base\n   - View documentation\n   - Check dashboard\n\n## üîí Security Considerations\n\n### For Development\n- Use strong `SESSION_SECRET` (generate with: `openssl rand -hex 32`)\n- Don't commit `.env` file to version control\n- Use HTTPS in production\n\n### For Production\n- Set `NODE_ENV=production`\n- Use environment variables for secrets\n- Enable CORS properly\n- Set up proper logging\n- Use SSL/TLS certificates\n\n## üìÅ File Structure Details\n\n```\nproject/\n‚îú‚îÄ‚îÄ client/src/\n‚îÇ   ‚îú‚îÄ‚îÄ components/        # Reusable UI components\n‚îÇ   ‚îú‚îÄ‚îÄ pages/            # Application pages\n‚îÇ   ‚îú‚îÄ‚îÄ hooks/            # Custom React hooks\n‚îÇ   ‚îú‚îÄ‚îÄ lib/              # Utilities and configurations\n‚îÇ   ‚îî‚îÄ‚îÄ App.tsx           # Main application component\n‚îú‚îÄ‚îÄ server/\n‚îÇ   ‚îú‚îÄ‚îÄ auth.ts           # Authentication logic\n‚îÇ   ‚îú‚îÄ‚îÄ db.ts             # Database connection\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts         # API routes\n‚îÇ   ‚îú‚îÄ‚îÄ storage.ts        # Data access layer\n‚îÇ   ‚îî‚îÄ‚îÄ index.ts          # Server entry point\n‚îú‚îÄ‚îÄ shared/\n‚îÇ   ‚îî‚îÄ‚îÄ schema.ts         # Database schema and types\n‚îî‚îÄ‚îÄ configuration files\n```\n\n## üêõ Troubleshooting\n\n### Common Issues\n\n**Port Already in Use**\n```bash\n# Find process using port 5000\nlsof -i :5000\n# Kill the process\nkill -9 <PID>\n```\n\n**Database Connection Failed**\n- Check DATABASE_URL format\n- Verify database is running\n- Test connection manually\n- Check firewall settings\n\n**Module Not Found**\n```bash\n# Clear node_modules and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n**TypeScript Errors**\n```bash\n# Restart TypeScript server in VS Code\nCtrl+Shift+P ‚Üí \"TypeScript: Restart TS Server\"\n```\n\n### Database Issues\n\n**Schema Mismatch**\n```bash\n# Reset and repush schema\nnpm run db:push\n```\n\n**Sample Data Missing**\n- Re-run the INSERT queries from `supabase-sql-queries.sql`\n- Check for foreign key constraint errors\n\n## üöÄ Deployment Options\n\n### Vercel (Frontend + API)\n```bash\nnpm install -g vercel\nvercel --prod\n```\n\n### Railway (Full Stack)\n```bash\nnpm install -g @railway/cli\nrailway login\nrailway deploy\n```\n\n### Docker\n```dockerfile\n# See Docker deployment section below\n```\n\n## üìû Support\n\n### Getting Help\n1. Check console logs for error messages\n2. Verify environment variables are set\n3. Test database connection separately\n4. Check browser network tab for API errors\n\n### Resources\n- [Node.js Documentation](https://nodejs.org/docs/)\n- [React Documentation](https://react.dev/)\n- [Supabase Documentation](https://supabase.com/docs)\n- [Drizzle ORM Documentation](https://orm.drizzle.team/)\n\n## ‚úÖ Success Checklist\n\nAfter setup, you should have:\n- [ ] Application running at `http://localhost:5000`\n- [ ] Database connected and populated with sample data\n- [ ] All demo accounts working (admin/agent/user)\n- [ ] No console errors\n- [ ] All navigation links functional\n- [ ] Ticket creation/viewing working\n- [ ] Knowledge base accessible\n- [ ] Documentation page available\n\n## üéâ You're Ready!\n\nYour IT Helpdesk Portal is now running locally. You can:\n- Develop new features\n- Customize the interface\n- Add new functionality\n- Test changes in real-time\n\nHappy coding! üöÄ","size_bytes":8974},"QUICK_SETUP_CHECKLIST.md":{"content":"# ‚ö° Quick Setup Checklist\n## IT Helpdesk Portal - Local Development + Hosting\n\n## üì• Step 1: Download Project Files\nCopy these files from your Replit project to your local machine:\n\n### Essential Files (Copy All):\n```\n‚úÖ client/src/              (entire folder)\n‚úÖ server/                  (entire folder)\n‚úÖ shared/                  (entire folder)\n‚úÖ package.json             ‚Üí rename to package.json\n‚úÖ package-lock.json\n‚úÖ tsconfig.json\n‚úÖ tailwind.config.ts\n‚úÖ postcss.config.js\n‚úÖ drizzle.config.ts\n‚úÖ theme.json\n‚úÖ .gitignore\n```\n\n### New Configuration Files (Already Created):\n```\n‚úÖ package-local.json       ‚Üí rename to package.json\n‚úÖ vite.config.local.ts     ‚Üí rename to vite.config.ts  \n‚úÖ .env.example             ‚Üí copy to .env\n‚úÖ netlify.toml             (for Netlify)\n‚úÖ vercel.json              (for Vercel)\n‚úÖ netlify/functions/server.js\n‚úÖ api/server.js\n```\n\n### Migration Files:\n```\n‚úÖ supabase-sql-queries.sql\n‚úÖ supabase-migration-guide.md\n‚úÖ SUPABASE_MIGRATION_CHECKLIST.md\n```\n\n## üóÑÔ∏è Step 2: Setup Supabase Database (5 minutes)\n\n### A. Create Supabase Project\n1. üåê Go to [supabase.com/dashboard](https://supabase.com/dashboard)\n2. ‚ûï Click \"New Project\"\n3. üìù Name: \"IT Helpdesk Portal\"\n4. üîê Set strong password (save it!)\n5. üåç Choose region\n6. ‚è≥ Wait 2-3 minutes\n\n### B. Run Database Setup\n1. üìä In Supabase ‚Üí \"SQL Editor\"\n2. üìã Copy all contents from `supabase-sql-queries.sql`\n3. ‚ñ∂Ô∏è Run the query\n4. ‚úÖ Verify: 16 tables created + sample data\n\n### C. Get Connection String\n1. ‚öôÔ∏è Supabase ‚Üí \"Settings\" ‚Üí \"Database\"\n2. üîó Copy \"Connection string\" (URI format)\n3. üîÑ Replace `[YOUR-PASSWORD]` with your password\n\n## üíª Step 3: Local Development Setup (2 minutes)\n\n```bash\n# 1. Install dependencies\nnpm install\n\n# 2. Setup environment\ncp .env.example .env\n# Edit .env with your Supabase connection string\n\n# 3. Start development\nnpm run dev\n```\n\n### Environment Variables (.env):\n```bash\nDATABASE_URL=postgresql://postgres.xxxxx:password@aws-0-region.pooler.supabase.com:6543/postgres\nSESSION_SECRET=generate_random_32_character_string\nNODE_ENV=development\nPORT=5000\n```\n\n## üöÄ Step 4: Deploy to Hosting Platform\n\n### Option A: Netlify (Recommended)\n```bash\n# Install Netlify CLI\nnpm install -g netlify-cli\n\n# Login and deploy\nnetlify login\nnpm run build\nnetlify deploy --prod\n```\n\n**Environment Variables in Netlify:**\n- `DATABASE_URL` = your Supabase connection string\n- `SESSION_SECRET` = random 32-character string\n- `NODE_ENV` = production\n\n### Option B: Vercel\n```bash\n# Install Vercel CLI\nnpm install -g vercel\n\n# Deploy\nvercel login\nvercel --prod\n```\n\n**Environment Variables in Vercel:**\n- `DATABASE_URL` = your Supabase connection string  \n- `SESSION_SECRET` = random 32-character string\n- `NODE_ENV` = production\n\n## ‚úÖ Step 5: Test Everything\n\n### Local Testing:\n- üåê Visit: `http://localhost:5000`\n- üîê Login: `admin` / `admin123`\n- üé´ Create a test ticket\n- üìö Check knowledge base\n- üìñ View documentation\n\n### Production Testing:\n- üåê Visit your live URL\n- üîê Test all demo accounts\n- üì± Check mobile responsiveness\n- ‚ö° Verify performance\n\n## üéØ Success Indicators\n\nYou'll know it's working when:\n- ‚úÖ No console errors\n- ‚úÖ Authentication works\n- ‚úÖ Database operations function\n- ‚úÖ All pages load correctly\n- ‚úÖ Demo data is visible\n- ‚úÖ Mobile design responsive\n\n## üîß Quick Fixes\n\n### Build Fails:\n```bash\nrm -rf node_modules dist\nnpm install\nnpm run build\n```\n\n### Database Connection Error:\n- ‚úÖ Check DATABASE_URL format\n- ‚úÖ Verify Supabase project is active\n- ‚úÖ Test from Supabase SQL editor\n\n### Deployment Issues:\n- ‚úÖ Check environment variables are set\n- ‚úÖ Verify build output in `dist` folder\n- ‚úÖ Check hosting platform logs\n\n## üìû Demo Credentials\n\n**After setup, login with:**\n- üëë **Admin**: `admin` / `admin123`\n- üõ†Ô∏è **Agent**: `agent` / `agent123`\n- üë§ **User**: `user` / `user123`\n\n## ‚è±Ô∏è Time Estimate\n\n- Supabase setup: 5 minutes\n- Local setup: 2 minutes  \n- Deployment: 5 minutes\n- **Total: 12 minutes**\n\n## üéâ You're Done!\n\nYour IT Helpdesk Portal is now:\n- ‚úÖ Running locally for development\n- ‚úÖ Deployed to production hosting\n- ‚úÖ Connected to Supabase database\n- ‚úÖ Ready for real users\n\nHappy coding! üöÄ","size_bytes":4310},"SUPABASE_MIGRATION_CHECKLIST.md":{"content":"# üöÄ Supabase Migration Checklist\n\n## ‚úÖ Pre-Migration Setup\n\n### 1. Create Supabase Project\n- [ ] Go to [Supabase Dashboard](https://supabase.com/dashboard/projects)\n- [ ] Click \"New Project\" \n- [ ] Set project name: \"IT Helpdesk Portal\"\n- [ ] Create strong database password (save it!)\n- [ ] Select region closest to users\n- [ ] Wait for project creation (2-3 minutes)\n\n### 2. Get Connection String\n- [ ] Click \"Connect\" button in Supabase dashboard\n- [ ] Go to \"Connection string\" ‚Üí \"Transaction pooler\" \n- [ ] Copy the pooler URI (should include `.pooler.supabase.com`)\n- [ ] Replace `[YOUR-PASSWORD]` with your database password\n- [ ] Format: `postgresql://postgres.[ref]:[password]@aws-0-[region].pooler.supabase.com:6543/postgres`\n\n## ‚úÖ Database Migration\n\n### 3. Run SQL Migration\n- [ ] Open Supabase SQL Editor\n- [ ] Copy contents from `supabase-sql-queries.sql`\n- [ ] Run the complete SQL script\n- [ ] Verify all tables created (16 tables expected)\n- [ ] Check sample data inserted successfully\n\n### 4. Verify Data\nRun these verification queries in SQL Editor:\n```sql\n-- Check tables exist\nSELECT table_name FROM information_schema.tables \nWHERE table_schema = 'public' ORDER BY table_name;\n\n-- Check demo users\nSELECT username, role, name FROM users WHERE username IN ('admin', 'agent', 'user');\n\n-- Check sample tickets\nSELECT COUNT(*) FROM tickets;\n\n-- Check categories\nSELECT COUNT(*) FROM categories;\n```\n\n## ‚úÖ Application Configuration\n\n### 5. Update Environment Variables\n- [ ] In Replit: Go to Secrets tab\n- [ ] Update `DATABASE_URL` with your Supabase connection string\n- [ ] Verify format is correct (no spaces, correct password)\n\n### 6. Test Connection\n- [ ] Restart your Replit application\n- [ ] Check console logs for connection success\n- [ ] Verify no database errors in logs\n\n## ‚úÖ Functionality Testing\n\n### 7. Test Authentication\n- [ ] Login with admin credentials: `admin` / `admin123`\n- [ ] Login with agent credentials: `agent` / `agent123`  \n- [ ] Login with user credentials: `user` / `user123`\n- [ ] Verify dashboard loads correctly\n\n### 8. Test Core Features\n- [ ] Create a new ticket\n- [ ] View existing tickets\n- [ ] Add comments to tickets\n- [ ] Browse knowledge base/FAQs\n- [ ] Test chatbot functionality\n- [ ] Check all navigation links work\n\n### 9. Test Data Persistence\n- [ ] Create test data (ticket, comment, etc.)\n- [ ] Restart application\n- [ ] Verify data persists after restart\n- [ ] Check session management works\n\n## ‚úÖ Advanced Verification\n\n### 10. Performance Check\n- [ ] Load dashboard - should load in <2 seconds\n- [ ] Navigate between pages - smooth transitions\n- [ ] Check for any console errors\n- [ ] Verify responsive design on mobile\n\n### 11. Data Integrity\n- [ ] Verify foreign key relationships work\n- [ ] Test user permissions (if applicable)\n- [ ] Check data validation\n- [ ] Verify timestamps are correct\n\n## üéØ Expected Results\n\nAfter successful migration you should have:\n- ‚úÖ 16 database tables created\n- ‚úÖ 5 demo users (admin, agent, user, john.doe, jane.smith)\n- ‚úÖ 25 categories with subcategories\n- ‚úÖ 7 sample tickets with various statuses\n- ‚úÖ 9 sample comments\n- ‚úÖ 10 FAQs with view counts\n- ‚úÖ 12 chat messages\n- ‚úÖ 5 journey templates\n- ‚úÖ 3 sample user journeys\n- ‚úÖ Working authentication system\n- ‚úÖ Full application functionality\n\n## üîß Troubleshooting\n\n### Common Issues:\n\n**Connection Fails:**\n- Verify DATABASE_URL format\n- Check password has no special characters that need encoding\n- Ensure using pooler connection string (not direct)\n\n**Tables Not Created:**\n- Run SQL queries section by section\n- Check for foreign key constraint errors\n- Verify Supabase project is active\n\n**Login Doesn't Work:**\n- Check if users table has data\n- Verify password hashing is correct\n- Check session table exists\n\n**Data Not Persisting:**\n- Verify connection string is correct\n- Check Supabase project isn't paused\n- Ensure proper database permissions\n\n## üìû Support\n\nIf you encounter issues:\n1. Check Supabase dashboard for project status\n2. Review console logs for error messages\n3. Verify all SQL queries executed successfully\n4. Test connection with a simple query\n\n## üéâ Migration Complete!\n\nOnce all checkboxes are marked, your IT Helpdesk Portal is successfully migrated to Supabase!\n\n**Demo Credentials:**\n- Admin: `admin` / `admin123`\n- Agent: `agent` / `agent123` \n- User: `user` / `user123`","size_bytes":4403},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"netlify.toml":{"content":"[build]\n  command = \"npm run build\"\n  publish = \"dist/public\"\n\n[build.environment]\n  NODE_VERSION = \"18\"\n\n# API Routes\n\n# SPA Fallback\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[functions]\n  directory = \"netlify/functions\"\n  node_bundler = \"esbuild\"\n\n# Headers for security\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    X-Frame-Options = \"DENY\"\n    X-XSS-Protection = \"1; mode=block\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"strict-origin-when-cross-origin\"\n\n# Cache static assets\n[[headers]]\n  for = \"/assets/*\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n","size_bytes":636},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# IT Helpdesk Portal - User Journey Documentation System\n\n## Project Overview\nAn advanced IT Helpdesk Portal with comprehensive ticket management, knowledge base, chatbot assistance, and now featuring a complete User Journey Documentation System for mapping and documenting user workflows.\n\n## Current State\n- **Database**: Ready for Supabase migration with complete SQL schema\n- **Authentication System**: Role-based authentication with admin/agent/user roles\n- **Core Features**: Ticket management, FAQ system, chatbot, dashboard\n- **Data Access**: All data accessible to all user roles (no role restrictions)\n- **Documentation**: Comprehensive User Journey Documentation integrated\n- **Migration Ready**: Complete Supabase migration package prepared\n\n## Recent Changes\n- **2025-01-13**: Successfully migrated from Replit Agent to Replit environment\n  - Fixed database connection and schema setup\n  - Removed authentication restrictions for better accessibility\n  - Updated server configuration for Replit workflow compatibility\n  - Added comprehensive sample data (tickets, categories, FAQs, comments)\n  - Fixed all storage layer missing methods and TypeScript errors\n  - Application now running successfully on port 5000 with full functionality\n\n- **2025-01-15**: Removed all role-based access restrictions\n  - Updated server API routes to allow all authenticated users access to all endpoints\n  - Modified sidebar navigation to show all features to all users\n  - Removed role requirements from protected routes\n  - All users can now access admin pages, all tickets, user management, etc.\n\n- **2025-01-15**: Completed User Journey Documentation System\n  - Added comprehensive documentation directly to portal\n  - Created professional user guide accessible via sidebar\n  - Implemented export PDF and share link functionality\n  - Mobile-responsive design with complete navigation\n\n- **2025-01-15**: Prepared Complete Supabase Migration Package\n  - Created detailed migration guide with step-by-step instructions\n  - Generated complete SQL schema with all tables and relationships\n  - Included comprehensive sample data for testing\n  - Provided migration checklist and troubleshooting guide\n\n- **2025-08-13**: Fixed All Critical Issues and Restored Data\n  - **Fixed ticket creation**: Properly handles categoryId conversion from string to number\n  - **Fixed assignment status**: Tickets now display correct assigned user names instead of \"Unassigned\"\n  - **Fixed comment counts**: Shows accurate comment counts instead of always showing 0\n  - **Restored sample data**: All 5 original tickets visible with proper assignments and comments\n  - **Verified functionality**: Successfully tested ticket creation with category selection\n\n- **2025-08-13**: Completed Replit Agent Migration with Enhanced Features\n  - **Created ticket edit functionality**: Full ticket editing page with proper validation and permissions\n  - **Fixed category deletion**: Added missing storage methods for category management\n  - **Enhanced mobile responsiveness**: Improved mobile layout and sidebar behavior\n  - **Fixed React warnings**: Resolved nested anchor tag issues in sidebar navigation\n  - **Added PUT ticket endpoint**: Enhanced ticket update functionality for edit page\n  - **Improved error handling**: Better TypeScript error handling throughout the application\n\n- **2025-08-14**: Enhanced Ticket Creation and Reports Features\n  - **Enhanced Contact Field**: Updated Create Ticket form to show all agent names with email IDs and search functionality\n  - **Auto-fetch User Details**: Added automatic user detail population when email is selected, with manual entry option\n  - **New Support Type Field**: Added dropdown with Remote, Telephonic, Onsite Visit, Other options\n  - **Enhanced Reports Filters**: Added Created Date and Due Date range filters for better report customization\n  - **Removed Resolved Option**: Updated All Tickets filter to remove \"Resolved\" status option per requirements\n  - **Database Schema Updates**: Extended tickets table with supportType, contactEmail, contactName, contactPhone, contactDepartment, and dueDate fields\n\n- **2025-08-18**: Completed Migration from Replit Agent to Replit Environment\n  - **Fixed Dependencies**: Installed missing cross-env package that was causing workflow failures\n  - **Verified Compatibility**: Ensured proper client/server separation and security practices\n  - **Tested Functionality**: Confirmed server startup and HTTP 200 response on port 5000\n  - **Migration Complete**: Project now fully compatible with Replit environment and ready for development\n\n## User Preferences\n- Make all data accessible to all authenticated users regardless of role\n- Focus on comprehensive documentation and workflow mapping\n- Prefer visual, interactive tools for non-technical stakeholders\n- Export capabilities for sharing with external teams\n- Migrate database from PostgreSQL to Supabase for better scalability\n\n## Architecture Decisions\n- **Database**: Supabase (PostgreSQL) with Drizzle ORM\n- **Frontend**: React with TypeScript, shadcn/ui components\n- **Backend**: Express.js with session-based authentication\n- **Storage**: Supabase database storage for all persistent data including sessions\n- **Access Control**: Authentication required, but no role-based restrictions\n\n## Demo Credentials\n- Admin: admin/admin123\n- Agent: agent/agent123  \n- User: user/user123\n\n## Local Development & Deployment Package Created\n- `LOCAL_DEVELOPMENT_GUIDE.md` - Complete local setup and hosting guide\n- `QUICK_SETUP_CHECKLIST.md` - 12-minute fast setup checklist  \n- `package-local.json` - Optimized dependencies for local development\n- `vite.config.local.ts` - Local build configuration\n- `netlify.toml` & `vercel.json` - Hosting platform configurations\n- `netlify/functions/server.js` - Netlify serverless API\n- `api/server.js` - Vercel API handler\n- `.env.example` - Environment variables template\n\n## Migration Files\n- `supabase-migration-guide.md` - Complete Supabase setup instructions\n- `supabase-sql-queries.sql` - Full database schema and sample data  \n- `SUPABASE_MIGRATION_CHECKLIST.md` - Step-by-step migration checklist\n\n## Ready for Local Development & Production Deployment\n- Complete package for local development with Supabase\n- Production-ready deployment configurations for Netlify/Vercel\n- All optimizations and security configurations included\n- 12-minute setup process documented","size_bytes":6427},"supabase-migration-guide.md":{"content":"# Supabase Migration Guide for IT Helpdesk Portal\n\n## 1. Supabase Setup Instructions\n\n### Step 1: Create Supabase Project\n1. Go to [Supabase Dashboard](https://supabase.com/dashboard/projects)\n2. Click \"New Project\"\n3. Choose your organization\n4. Fill in project details:\n   - Name: `IT Helpdesk Portal`\n   - Database Password: Create a strong password (save this!)\n   - Region: Choose closest to your users\n5. Click \"Create new project\"\n\n### Step 2: Get Database Connection String\n1. Once project is created, click \"Connect\" button in the top toolbar\n2. Go to \"Connection string\" ‚Üí \"Transaction pooler\"\n3. Copy the URI value (it looks like: `postgresql://postgres.[project-ref]:[password]@aws-0-[region].pooler.supabase.com:6543/postgres`)\n4. Replace `[YOUR-PASSWORD]` with the database password you set\n5. This will be your `DATABASE_URL`\n\n### Step 3: Configure Environment\nAdd the database URL to your Replit secrets:\n- Key: `DATABASE_URL`\n- Value: Your Supabase connection string\n\n## 2. Database Schema Migration\n\nRun these SQL queries in Supabase SQL Editor (in order):\n\n### Create Tables\n\n```sql\n-- Users table\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(255) UNIQUE NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    role VARCHAR(50) DEFAULT 'user',\n    company_name VARCHAR(255),\n    department VARCHAR(255),\n    contact_number VARCHAR(255),\n    designation VARCHAR(255),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Categories table\nCREATE TABLE categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    parent_id INTEGER REFERENCES categories(id)\n);\n\n-- Tickets table\nCREATE TABLE tickets (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT NOT NULL,\n    status VARCHAR(50) DEFAULT 'open',\n    priority VARCHAR(50) DEFAULT 'medium',\n    category_id INTEGER REFERENCES categories(id),\n    subcategory_id INTEGER REFERENCES categories(id),\n    created_by_id INTEGER REFERENCES users(id) NOT NULL,\n    assigned_to_id INTEGER REFERENCES users(id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Comments table\nCREATE TABLE comments (\n    id SERIAL PRIMARY KEY,\n    content TEXT NOT NULL,\n    ticket_id INTEGER REFERENCES tickets(id) NOT NULL,\n    user_id INTEGER REFERENCES users(id) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- FAQs table\nCREATE TABLE faqs (\n    id SERIAL PRIMARY KEY,\n    question TEXT NOT NULL,\n    answer TEXT NOT NULL,\n    category_id INTEGER REFERENCES categories(id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Chat Messages table\nCREATE TABLE chat_messages (\n    id SERIAL PRIMARY KEY,\n    content TEXT NOT NULL,\n    user_id INTEGER REFERENCES users(id) NOT NULL,\n    is_bot BOOLEAN DEFAULT false,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Session table (for express-session with connect-pg-simple)\nCREATE TABLE session (\n    sid VARCHAR NOT NULL COLLATE \"default\",\n    sess JSON NOT NULL,\n    expire TIMESTAMP(6) NOT NULL\n) WITH (OIDS=FALSE);\n\nALTER TABLE session ADD CONSTRAINT session_pkey PRIMARY KEY (sid) NOT DEFERRABLE INITIALLY IMMEDIATE;\nCREATE INDEX IDX_session_expire ON session(expire);\n```\n\n### Insert Sample Data\n\n```sql\n-- Insert demo users\nINSERT INTO users (username, password, name, email, role, company_name, department, contact_number, designation) VALUES\n('admin', '87be282e5c1f8d86c50d495bb3d6dcc6a3b0b5f6c5c2b8a8f0c1e9d7a4f2b3c5.d4e5f6a7b8c9', 'Admin User', 'admin@company.com', 'admin', 'Tech Corp', 'IT', '+1-555-0001', 'System Administrator'),\n('agent', '87be282e5c1f8d86c50d495bb3d6dcc6a3b0b5f6c5c2b8a8f0c1e9d7a4f2b3c5.d4e5f6a7b8c9', 'Agent User', 'agent@company.com', 'agent', 'Tech Corp', 'IT Support', '+1-555-0002', 'Support Specialist'),\n('user', '87be282e5c1f8d86c50d495bb3d6dcc6a3b0b5f6c5c2b8a8f0c1e9d7a4f2b3c5.d4e5f6a7b8c9', 'Regular User', 'user@company.com', 'user', 'Tech Corp', 'Marketing', '+1-555-0003', 'Marketing Manager');\n\n-- Insert categories\nINSERT INTO categories (name, parent_id) VALUES\n('Network Issues', NULL),\n('Hardware Problems', NULL),\n('Software Issues', NULL),\n('Account & Access', NULL),\n('Wi-Fi Connection', 1),\n('VPN Issues', 1),\n('Printer Problems', 2),\n('Computer Hardware', 2),\n('Application Crashes', 3),\n('Installation Issues', 3),\n('Password Reset', 4),\n('User Permissions', 4);\n\n-- Insert sample tickets\nINSERT INTO tickets (title, description, status, priority, category_id, subcategory_id, created_by_id, assigned_to_id) VALUES\n('Cannot connect to Wi-Fi', 'Unable to connect to office Wi-Fi network. Getting authentication error.', 'open', 'high', 1, 5, 3, 2),\n('Printer not working', 'Office printer is not responding. Red light is blinking.', 'in_progress', 'medium', 2, 7, 3, 2),\n('Email application crashes', 'Outlook keeps crashing when trying to send emails with attachments.', 'resolved', 'low', 3, 9, 3, 2);\n\n-- Insert sample comments\nINSERT INTO comments (content, ticket_id, user_id) VALUES\n('I have checked the network settings. Please try restarting your device.', 1, 2),\n('Still having the same issue after restart.', 1, 3),\n('Printer has been fixed. Please test and confirm.', 2, 2),\n('Working perfectly now. Thank you!', 2, 3);\n\n-- Insert FAQs\nINSERT INTO faqs (question, answer, category_id) VALUES\n('How do I connect to the company Wi-Fi?', 'Go to Settings > Wi-Fi > Select CompanyWiFi > Enter your credentials', 1),\n('How do I reset my password?', 'Contact your system administrator or use the self-service portal', 4),\n('What should I do if my computer won''t start?', 'Check power cable, try different outlet, contact IT if issue persists', 2),\n('How do I install new software?', 'Submit a ticket requesting software installation. Admin approval may be required', 3),\n('How do I access VPN?', 'Download the company VPN client and use your network credentials to connect', 1),\n('Why is my printer not working?', 'Check paper, ink levels, and network connection. Restart if needed', 2);\n\n-- Insert sample chat messages\nINSERT INTO chat_messages (content, user_id, is_bot) VALUES\n('Hello! How can I help you today?', 1, true),\n('I need help with my email', 3, false),\n('I can help you with email issues. Can you describe the problem?', 1, true),\n('My emails are not sending', 3, false);\n```\n\n## 3. Code Changes Required\n\n### Update server/db.ts\n```typescript\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n```\n\n### Update package.json scripts\n```json\n{\n  \"scripts\": {\n    \"db:push\": \"drizzle-kit push --config=drizzle.config.ts\",\n    \"db:studio\": \"drizzle-kit studio --config=drizzle.config.ts\"\n  }\n}\n```\n\n## 4. Migration Steps\n\n1. **Setup Supabase** (Steps 1-3 above)\n2. **Run SQL queries** in Supabase SQL Editor\n3. **Update DATABASE_URL** in Replit secrets\n4. **Test connection** by running the application\n5. **Verify data** by logging into the application with demo credentials\n\n## 5. Demo Credentials (After Migration)\n- **Admin**: admin / admin123\n- **Agent**: agent / agent123\n- **User**: user / user123\n\n## 6. Verification Checklist\n- [ ] All tables created successfully\n- [ ] Sample data inserted\n- [ ] Application connects to Supabase\n- [ ] Login works with demo credentials\n- [ ] Tickets, FAQs, and other features work\n- [ ] Session management works\n\n## 7. Troubleshooting\n\n### Connection Issues\n- Verify DATABASE_URL format\n- Check Supabase project is running\n- Ensure pooler connection string is used\n\n### Permission Issues\n- Verify user has database access\n- Check RLS (Row Level Security) settings if needed\n\n### Migration Issues\n- Run queries one section at a time\n- Check for foreign key constraint errors\n- Verify table names match schema\n\n## Notes\n- Supabase uses PostgreSQL, so your existing Drizzle setup will work perfectly\n- No code changes needed except updating the connection string\n- Session table is included for express-session compatibility\n- All existing functionality will work the same way","size_bytes":8447},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.local.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [react()],\n  root: 'client',\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './client/src'),\n      '@shared': path.resolve(__dirname, './shared'),\n      '@assets': path.resolve(__dirname, './attached_assets'),\n    },\n  },\n  build: {\n    outDir: '../dist',\n    emptyOutDir: true,\n    sourcemap: false,\n    minify: 'terser',\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          router: ['wouter'],\n          query: ['@tanstack/react-query'],\n          ui: [\n            '@radix-ui/react-dialog', \n            '@radix-ui/react-dropdown-menu',\n            '@radix-ui/react-select',\n            '@radix-ui/react-tabs'\n          ],\n          forms: ['react-hook-form', '@hookform/resolvers'],\n          icons: ['lucide-react'],\n          utils: ['clsx', 'tailwind-merge', 'date-fns']\n        }\n      }\n    },\n    chunkSizeWarningLimit: 1000\n  },\n  server: {\n    port: 3000,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5001',\n        changeOrigin: true,\n        secure: false\n      }\n    }\n  },\n  preview: {\n    port: 3000,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5001',\n        changeOrigin: true,\n        secure: false\n      }\n    }\n  },\n  optimizeDeps: {\n    include: [\n      'react',\n      'react-dom',\n      'wouter',\n      '@tanstack/react-query',\n      'react-hook-form'\n    ]\n  }\n})","size_bytes":1542},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer()\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // üîÅ Copy _redirects file after build\n  closeBundle() {\n    const from = path.resolve(import.meta.dirname, \"_redirects\");\n    const to = path.resolve(import.meta.dirname, \"dist/public/_redirects\");\n    fs.copyFileSync(from, to);\n  },\n});\n","size_bytes":1237},"api/server.js":{"content":"const express = require('express');\nconst cors = require('cors');\n\n// Import your server modules\nconst { setupAuth } = require('../server/auth');\nconst { registerRoutes } = require('../server/routes');\n\nconst app = express();\n\n// CORS configuration for Vercel\napp.use(cors({\n  origin: true,\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'Cookie']\n}));\n\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\n\n// Trust proxy for Vercel\napp.set('trust proxy', 1);\n\n// Setup authentication\nsetupAuth(app);\n\n// Register API routes\nregisterRoutes(app);\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', vercel: true, timestamp: new Date().toISOString() });\n});\n\n// Error handling\napp.use((err, req, res, next) => {\n  console.error('Vercel API error:', err);\n  res.status(500).json({ \n    error: 'Internal server error',\n    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'\n  });\n});\n\n// Export for Vercel\nmodule.exports = app;","size_bytes":1122},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, InsertUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n\n  if (!hashed || !salt) {\n    throw new Error(\"Invalid stored password format\");\n  }\n\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n\n  // Fix: Ensure both buffers are the same length\n  if (hashedBuf.length !== suppliedBuf.length) {\n    return false; // or throw an Error if you prefer\n  }\n\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\n\nexport async function setupAuth(app: Express) {\n  // Create admin user if not exists\n  const adminExists = await storage.getUserByUsername(\"admin\");\n  if (!adminExists) {\n    await storage.createUser({\n      username: \"admin\",\n      password: await hashPassword(\"admin123\"),\n      name: \"Admin User\",\n      email: \"admin@example.com\",\n      role: \"admin\"\n    });\n  }\n  \n  // Create agent user if not exists\n  const agentExists = await storage.getUserByUsername(\"agent\");\n  if (!agentExists) {\n    await storage.createUser({\n      username: \"agent\",\n      password: await hashPassword(\"agent123\"),\n      name: \"Support Agent\",\n      email: \"agent@example.com\",\n      role: \"agent\"\n    });\n  }\n  \n  // Create regular user if not exists\n  const userExists = await storage.getUserByUsername(\"user\");\n  if (!userExists) {\n    await storage.createUser({\n      username: \"user\",\n      password: await hashPassword(\"user123\"),\n      name: \"John Smith\",\n      email: \"user@example.com\",\n      role: \"user\"\n    });\n  }\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"helpdesk-portal-secret\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 1000 * 60 * 60 * 24, // 24 hours\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (err) {\n        return done(err);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (err) {\n      done(err);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, password, name, email, role = \"user\" } = req.body;\n      \n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).send(\"Username already exists\");\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        username,\n        password: hashedPassword,\n        name,\n        email,\n        role\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":4382},"server/db.ts":{"content":"import dotenv from 'dotenv';\ndotenv.config();\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });","size_bytes":520},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Logging middleware for API requests\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Global error handler\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Vite for dev, static for prod\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ‚úÖ Proper bind for cloud hosting and Replit workflows\n  const port = 5000; // Fixed port for Replit workflows\n  const host = \"127.0.0.1\";\n\n  server.listen(port, host, () => {\n    log(`üöÄ Server running at http://${host}:${port}`);\n  });\n})();","size_bytes":1866},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport bcrypt from \"bcrypt\";\nimport { \n  insertTicketSchema, insertCommentSchema, \n  insertFaqSchema, insertChatMessageSchema, insertCategorySchema \n} from \"@shared/schema\";\n\n// Middleware to check if user is authenticated\nconst isAuthenticated = (req: Request, res: Response, next: Function) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};\n\n// Middleware to check if user is an admin\nconst isAdmin = (req: Request, res: Response, next: Function) => {\n  if (req.isAuthenticated() && req.user?.role === \"admin\") {\n    return next();\n  }\n  return res.status(403).json({ message: \"Forbidden - Admin access required\" });\n};\n\n// Middleware to check if user is an admin or agent\nconst isSupportStaff = (req: Request, res: Response, next: Function) => {\n  if (req.isAuthenticated() && (req.user?.role === \"admin\" || req.user?.role === \"agent\")) {\n    return next();\n  }\n  return res.status(403).json({ message: \"Forbidden - Support staff access required\" });\n};\n\n// Role-based middleware factory\nconst requireRole = (roles: string[]) => {\n  return (req: Request, res: Response, next: Function) => {\n    if (req.isAuthenticated() && req.user && roles.includes(req.user.role)) {\n      return next();\n    }\n    return res.status(403).json({ message: \"Forbidden - Insufficient permissions\" });\n  };\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  await setupAuth(app);\n  \n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n  \n  app.get(\"/api/categories/:id/subcategories\", async (req, res) => {\n    try {\n      const parentId = parseInt(req.params.id);\n      const subcategories = await storage.getSubcategories(parentId);\n      res.json(subcategories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch subcategories\" });\n    }\n  });\n  \n  app.post(\"/api/categories\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid category data\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.updateCategory(id, categoryData);\n      \n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      res.json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid category data\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteCategory(id);\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n  \n  // Tickets\n  app.get(\"/api/tickets\", async (req, res) => {\n    try {\n      const tickets = await storage.getAllTicketsWithRelations();\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch tickets\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/tickets/my\", async (req, res) => {\n    try {\n      const tickets = await storage.getAllTicketsWithRelations();\n      // Filter for current user (defaulting to user ID 1 since no authentication)\n      const myTickets = tickets.filter(ticket => ticket.createdById === 1);\n      res.json(myTickets);\n    } catch (error) {\n      console.error(\"Error fetching user tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch user tickets\", error: error.message });\n    }\n  });\n  \n  app.get(\"/api/tickets/filter\", async (req, res) => {\n    try {\n      const { status, priority, categoryId } = req.query;\n      const filters: { status?: string; priority?: string; categoryId?: number } = {};\n      \n      if (status) filters.status = status as string;\n      if (priority) filters.priority = priority as string;\n      if (categoryId) filters.categoryId = parseInt(categoryId as string);\n      \n      const tickets = await storage.getFilteredTickets(filters);\n      res.json(tickets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to filter tickets\" });\n    }\n  });\n  \n  app.get(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const ticket = await storage.getTicketWithRelations(id);\n      \n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch ticket\" });\n    }\n  });\n  \n  app.post(\"/api/tickets\", async (req, res) => {\n    try {\n      // Convert string IDs to numbers for validation and process new fields\n      const processedData = {\n        ...req.body,\n        categoryId: parseInt(req.body.categoryId),\n        subcategoryId: req.body.subcategoryId ? parseInt(req.body.subcategoryId) : undefined,\n        createdById: 1, // Default to admin user since no authentication required\n        supportType: req.body.supportType || \"remote\",\n        contactEmail: req.body.contactEmail,\n        contactName: req.body.contactName,\n        contactPhone: req.body.contactPhone,\n        contactDepartment: req.body.contactDepartment,\n        dueDate: req.body.dueDate ? new Date(req.body.dueDate) : null\n      };\n\n      const ticketData = insertTicketSchema.parse(processedData);\n      \n      const ticket = await storage.createTicket(ticketData);\n      res.status(201).json(ticket);\n    } catch (error) {\n      console.error(\"Create ticket error:\", error);\n      res.status(400).json({ message: \"Invalid ticket data\", error: error.message });\n    }\n  });\n  \n  app.patch(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const ticket = await storage.getTicket(id);\n      \n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      const updatedTicket = await storage.updateTicket(id, req.body);\n      res.json(updatedTicket);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update ticket\" });\n    }\n  });\n\n  app.put(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const ticket = await storage.getTicket(id);\n      \n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      // Convert string IDs to numbers for validation\n      const processedData = {\n        ...req.body,\n        categoryId: parseInt(req.body.categoryId),\n        assignedToId: req.body.assignedToId ? parseInt(req.body.assignedToId) : null,\n      };\n      \n      const updatedTicket = await storage.updateTicket(id, processedData);\n      res.json(updatedTicket);\n    } catch (error) {\n      console.error(\"Update ticket error:\", error);\n      res.status(400).json({ message: \"Failed to update ticket\", error: error.message });\n    }\n  });\n\n  // Delete ticket route\n  app.delete(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const ticket = await storage.getTicket(id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      // Since no authentication, allow all users to delete tickets\n      await storage.deleteTicket(id);\n      res.json({ message: \"Ticket deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete ticket error:\", error);\n      res.status(500).json({ message: \"Failed to delete ticket\", error: error.message });\n    }\n  });\n  \n  // Comments\n  app.get(\"/api/tickets/:ticketId/comments\", isAuthenticated, async (req, res) => {\n    try {\n      const ticketId = parseInt(req.params.ticketId);\n      const ticket = await storage.getTicket(ticketId);\n      \n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      const comments = await storage.getTicketComments(ticketId);\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n  \n  app.post(\"/api/tickets/:ticketId/comments\", isAuthenticated, async (req, res) => {\n    try {\n      const ticketId = parseInt(req.params.ticketId);\n      const ticket = await storage.getTicket(ticketId);\n      \n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      const commentData = insertCommentSchema.parse({\n        ...req.body,\n        ticketId,\n        userId: req.user!.id\n      });\n      \n      const comment = await storage.createComment(commentData);\n      res.status(201).json(comment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid comment data\" });\n    }\n  });\n  \n  // FAQs\n  app.get(\"/api/faqs\", async (req, res) => {\n    try {\n      let faqs;\n      const categoryId = req.query.categoryId ? parseInt(req.query.categoryId as string) : undefined;\n      \n      if (categoryId) {\n        faqs = await storage.getFaqsByCategory(categoryId);\n      } else {\n        faqs = await storage.getAllFaqs();\n      }\n      \n      res.json(faqs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch FAQs\" });\n    }\n  });\n  \n  app.get(\"/api/faqs/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const faq = await storage.getFaq(id);\n      \n      if (!faq) {\n        return res.status(404).json({ message: \"FAQ not found\" });\n      }\n      \n      res.json(faq);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch FAQ\" });\n    }\n  });\n  \n  app.post(\"/api/faqs\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const faqData = insertFaqSchema.parse(req.body);\n      const faq = await storage.createFaq(faqData);\n      res.status(201).json(faq);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid FAQ data\" });\n    }\n  });\n  \n  app.patch(\"/api/faqs/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updatedFaq = await storage.updateFaq(id, req.body);\n      \n      if (!updatedFaq) {\n        return res.status(404).json({ message: \"FAQ not found\" });\n      }\n      \n      res.json(updatedFaq);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update FAQ\" });\n    }\n  });\n  \n  // Chat messages\n  app.get(\"/api/chat\", isAuthenticated, async (req, res) => {\n    try {\n      const messages = await storage.getChatMessages(req.user!.id);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n  \n  app.post(\"/api/chat\", isAuthenticated, async (req, res) => {\n    try {\n      const messageData = insertChatMessageSchema.parse({\n        ...req.body,\n        userId: req.user!.id\n      });\n      \n      const message = await storage.createChatMessage(messageData);\n      \n      // Automatic bot response\n      const userMessage = message.message.toLowerCase();\n      let botResponse = \"Thank you for your message. How else can I assist you?\";\n      \n      if (userMessage.includes(\"wifi\") || userMessage.includes(\"network\")) {\n        botResponse = \"It sounds like you're having network issues. Would you like me to create a ticket for WiFi issues or direct you to our network troubleshooting guide?\";\n      } else if (userMessage.includes(\"password\") || userMessage.includes(\"reset\")) {\n        botResponse = \"Need to reset your password? You can reset it yourself at password.company.com or I can create a ticket for IT support to help you.\";\n      } else if (userMessage.includes(\"create ticket\") || userMessage.includes(\"submit ticket\")) {\n        botResponse = \"I can help you create a new support ticket. What issue are you experiencing?\";\n      } else if (userMessage.includes(\"ticket status\") || userMessage.includes(\"my tickets\")) {\n        botResponse = \"You can view all your tickets in the 'My Tickets' section of the portal. Would you like me to direct you there?\";\n      }\n      \n      const botMessage = await storage.createChatMessage({\n        userId: req.user!.id,\n        message: botResponse,\n        isFromBot: true\n      });\n      \n      res.status(201).json([message, botMessage]);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid message data\" });\n    }\n  });\n  \n  // Dashboard stats\n  app.get(\"/api/dashboard\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n  \n  // USER MANAGEMENT ROUTES (No authentication required as per replit.md)\n  app.get(\"/api/users\", async (req, res) => {\n  try {\n    const users = await storage.getAllUsers();\n    res.json(users);\n  } catch (err) {\n    console.error(\"Error in /api/users:\", err); // üîç This line is key\n    res.status(500).json({ error: \"Failed to fetch users\" });\n  }\n});\n\n\n  app.post('/api/users', isAuthenticated, requireRole(['admin']), async (req, res) => {\n    try {\n      const { username, password, name, email, role } = req.body;\n\n      if (!username || !password || !name || !email || !role) {\n        return res.status(400).json({ message: 'All fields are required' });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsernameOrEmail(username, email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'Username or email already exists' });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const newUser = await storage.createUser({\n        username,\n        password: hashedPassword,\n        name,\n        email,\n        role\n      });\n\n      res.status(201).json(newUser);\n    } catch (error) {\n      console.error('Create user error:', error);\n      res.status(500).json({ message: 'Failed to create user' });\n    }\n  });\n\n  app.put('/api/users/:id', isAuthenticated, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { username, password, name, email, role } = req.body;\n\n      // Check if user exists\n      const existingUser = await storage.getUserById(parseInt(id));\n      if (!existingUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Prepare update data\n      const updateData: any = { username, name, email, role };\n\n      // Only update password if provided\n      if (password && password.trim() !== '') {\n        updateData.password = await bcrypt.hash(password, 10);\n      }\n\n      const updatedUser = await storage.updateUser(parseInt(id), updateData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Update user error:', error);\n      res.status(500).json({ message: 'Failed to update user' });\n    }\n  });\n\n  app.delete('/api/users/:id', isAuthenticated, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // Check if user exists\n      const existingUser = await storage.getUserById(parseInt(id));\n      if (!existingUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      await storage.deleteUser(parseInt(id));\n      res.json({ message: 'User deleted successfully' });\n    } catch (error) {\n      console.error('Delete user error:', error);\n      res.status(500).json({ message: 'Failed to delete user' });\n    }\n  });\n\n  // Password change route\n  app.put('/api/users/:id/password', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { currentPassword, newPassword } = req.body;\n\n      // Verify user is changing their own password or is admin\n      if (parseInt(id) !== req.user?.id && req.user?.role !== 'admin') {\n        return res.status(403).json({ message: 'You can only change your own password' });\n      }\n\n      // Get user and verify current password\n      const user = await storage.getUserById(parseInt(id));\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Verify current password for non-admin users\n      if (req.user?.role !== 'admin') {\n        const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\n        if (!isCurrentPasswordValid) {\n          return res.status(400).json({ message: 'Current password is incorrect' });\n        }\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n\n      // Update password\n      await storage.updateUser(parseInt(id), { password: hashedNewPassword });\n      res.json({ message: 'Password updated successfully' });\n    } catch (error) {\n      console.error('Password change error:', error);\n      res.status(500).json({ message: 'Failed to update password' });\n    }\n  });\n\n  // Export user data route\n  app.get('/api/users/:id/export', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // Verify user is exporting their own data or is admin\n      if (parseInt(id) !== req.user?.id && req.user?.role !== 'admin') {\n        return res.status(403).json({ message: 'You can only export your own data' });\n      }\n\n      // Get user data\n      const user = await storage.getUserById(parseInt(id));\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Get user's tickets\n      const tickets = await storage.getUserTickets(parseInt(id));\n\n      // Get user's comments (simplified for now)\n      const userComments: any[] = []; // TODO: Add getAllComments method\n\n      // Remove sensitive information\n      const sanitizedUser = {\n        id: user.id,\n        username: user.username,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        companyName: user.companyName,\n        department: user.department,\n        designation: user.designation,\n        contactNumber: user.contactNumber,\n        createdAt: user.createdAt,\n      };\n\n      const exportData = {\n        user: sanitizedUser,\n        tickets,\n        comments: userComments,\n        exportedAt: new Date().toISOString(),\n      };\n\n      res.json(exportData);\n    } catch (error) {\n      console.error('Export data error:', error);\n      res.status(500).json({ message: 'Failed to export data' });\n    }\n  });\n\n  // Category management routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid category data\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const category = await storage.getCategory(id);\n      \n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      const updatedCategory = await storage.updateCategory(id, req.body);\n      res.json(updatedCategory);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const category = await storage.getCategory(id);\n      \n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      await storage.deleteCategory(id);\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete category error:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20924},"server/storage.ts":{"content":"import { \n  users, type User, type InsertUser,\n  categories, type Category, type InsertCategory,\n  tickets, type Ticket, type InsertTicket,\n  comments, type Comment, type InsertComment,\n  faqs, type Faq, type InsertFaq,\n  chatMessages, type ChatMessage, type InsertChatMessage,\n  type TicketWithRelations, type DashboardStats\n} from \"@shared/schema\";\nimport session from \"express-session\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport connectPg from \"connect-pg-simple\";\nimport createMemoryStore from \"memorystore\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\nconst MemoryStore = createMemoryStore(session);\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, data: Partial<InsertUser>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Category operations\n  getCategory(id: number): Promise<Category | undefined>;\n  getCategoryByName(name: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: number, data: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: number): Promise<void>;\n  getAllCategories(): Promise<Category[]>;\n  getSubcategories(parentId: number): Promise<Category[]>;\n  \n  // Ticket operations\n  getTicket(id: number): Promise<Ticket | undefined>;\n  getTicketWithRelations(id: number): Promise<TicketWithRelations | undefined>;\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  updateTicket(id: number, data: Partial<InsertTicket>): Promise<Ticket | undefined>;\n  deleteTicket(id: number): Promise<void>;\n  getUserTickets(userId: number): Promise<Ticket[]>;\n  getAllTickets(): Promise<Ticket[]>;\n  getAllTicketsWithRelations(): Promise<any[]>;\n  getFilteredTickets(filters: { status?: string, priority?: string, categoryId?: number }): Promise<Ticket[]>;\n  getTicketsCount(): Promise<{ [key: string]: number }>;\n  getDashboardStats(): Promise<DashboardStats>;\n  \n  // Comment operations\n  getComment(id: number): Promise<Comment | undefined>;\n  getTicketComments(ticketId: number): Promise<(Comment & { user: User })[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  \n  // FAQ operations\n  getFaq(id: number): Promise<Faq | undefined>;\n  getAllFaqs(): Promise<Faq[]>;\n  getFaqsByCategory(categoryId: number): Promise<Faq[]>;\n  createFaq(faq: InsertFaq): Promise<Faq>;\n  updateFaq(id: number, data: Partial<InsertFaq>): Promise<Faq | undefined>;\n  \n  // Chat operations\n  getChatMessages(userId: number): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  \n  // Session store\n  sessionStore: session.Store;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private categories: Map<number, Category>;\n  private tickets: Map<number, Ticket>;\n  private comments: Map<number, Comment>;\n  private faqs: Map<number, Faq>;\n  private chatMessages: Map<number, ChatMessage>;\n  \n  sessionStore: session.Store;\n  \n  private userIdCounter: number;\n  private categoryIdCounter: number;\n  private ticketIdCounter: number;\n  private commentIdCounter: number;\n  private faqIdCounter: number;\n  private chatMessageIdCounter: number;\n\n  constructor() {\n    this.users = new Map();\n    this.categories = new Map();\n    this.tickets = new Map();\n    this.comments = new Map();\n    this.faqs = new Map();\n    this.chatMessages = new Map();\n    \n    this.userIdCounter = 1;\n    this.categoryIdCounter = 1;\n    this.ticketIdCounter = 1;\n    this.commentIdCounter = 1;\n    this.faqIdCounter = 1;\n    this.chatMessageIdCounter = 1;\n    \n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000 // prune expired entries every 24h\n    });\n    \n    // Initialize with sample data\n    this.initializeData();\n  }\n  \n  private async initializeData() {\n    // Initialize Categories\n    const networkCat = await this.createCategory({ name: \"Network Issues\", parentId: null });\n    const hardwareCat = await this.createCategory({ name: \"Hardware\", parentId: null });\n    const emailCat = await this.createCategory({ name: \"Email Services\", parentId: null });\n    const accountCat = await this.createCategory({ name: \"Account & Password\", parentId: null });\n    \n    // Initialize Subcategories\n    await this.createCategory({ name: \"WiFi\", parentId: networkCat.id });\n    await this.createCategory({ name: \"VPN\", parentId: networkCat.id });\n    await this.createCategory({ name: \"LAN\", parentId: networkCat.id });\n    \n    await this.createCategory({ name: \"Printer\", parentId: hardwareCat.id });\n    await this.createCategory({ name: \"Scanner\", parentId: hardwareCat.id });\n    await this.createCategory({ name: \"Desktop\", parentId: hardwareCat.id });\n    await this.createCategory({ name: \"Laptop\", parentId: hardwareCat.id });\n    \n    await this.createCategory({ name: \"Outlook\", parentId: emailCat.id });\n    await this.createCategory({ name: \"SMTP\", parentId: emailCat.id });\n    await this.createCategory({ name: \"Webmail\", parentId: emailCat.id });\n    \n    // Initialize FAQs\n    await this.createFaq({\n      question: \"How do I reset my network password?\",\n      answer: \"You can reset your network password by going to password.company.com and following the 'Forgot Password' instructions. You will need to verify your identity using your registered email or phone number.\",\n      categoryId: accountCat.id\n    });\n    \n    await this.createFaq({\n      question: \"My computer is running slow, what should I do?\",\n      answer: \"First, try restarting your computer. If that doesn't help, check for running applications using high resources (Ctrl+Alt+Delete > Task Manager on Windows). Also ensure your computer has the latest updates installed.\",\n      categoryId: hardwareCat.id\n    });\n    \n    await this.createFaq({\n      question: \"How do I connect to the company VPN?\",\n      answer: \"Download the VPN client from the company portal, install it, and then enter your network credentials. Select the appropriate server location and click Connect. For detailed instructions, refer to the IT handbook.\",\n      categoryId: networkCat.id\n    });\n    \n    await this.createFaq({\n      question: \"How to set up email on my mobile device?\",\n      answer: \"For company email on mobile, install the Outlook app from your app store. Open it and add your company email account. Enter your company email address and password when prompted. Choose Exchange as the account type.\",\n      categoryId: emailCat.id\n    });\n    \n    await this.createFaq({\n      question: \"How do I report a phishing email?\",\n      answer: \"If you receive a suspicious email, do not click any links or download attachments. Forward the email as an attachment to phishing@company.com and then delete it from your inbox.\",\n      categoryId: emailCat.id\n    });\n    \n    await this.createFaq({\n      question: \"How to access shared network drives?\",\n      answer: \"To access shared drives, open File Explorer, click on 'This PC' in the left panel, then click 'Map network drive' in the Computer tab. Enter the drive path (e.g., \\\\\\\\server\\\\share) and assign a drive letter.\",\n      categoryId: networkCat.id\n    });\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username.toLowerCase() === username.toLowerCase()\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.userIdCounter++;\n    const createdAt = new Date();\n    // Force role to be a string if it's undefined\n    const role = insertUser.role || 'user';\n    const user: User = { ...insertUser, id, createdAt, role };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  async updateUser(id: number, data: Partial<InsertUser>): Promise<User | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n    \n    const updatedUser: User = { ...user, ...data };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n  \n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n  \n  // Category operations\n  async getCategory(id: number): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n  \n  async getCategoryByName(name: string): Promise<Category | undefined> {\n    return Array.from(this.categories.values()).find(\n      (category) => category.name.toLowerCase() === name.toLowerCase()\n    );\n  }\n  \n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = this.categoryIdCounter++;\n    const category: Category = { ...insertCategory, id };\n    this.categories.set(id, category);\n    return category;\n  }\n  \n  async getAllCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n  \n  async getSubcategories(parentId: number): Promise<Category[]> {\n    return Array.from(this.categories.values()).filter(\n      (category) => category.parentId === parentId\n    );\n  }\n\n  async updateCategory(id: number, data: Partial<InsertCategory>): Promise<Category | undefined> {\n    const category = await this.getCategory(id);\n    if (!category) return undefined;\n    \n    const updatedCategory: Category = { ...category, ...data };\n    this.categories.set(id, updatedCategory);\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: number): Promise<void> {\n    // Check if category exists\n    const category = await this.getCategory(id);\n    if (!category) {\n      throw new Error(\"Category not found\");\n    }\n\n    // Check if category has subcategories\n    const subcategories = await this.getSubcategories(id);\n    if (subcategories.length > 0) {\n      throw new Error(\"Cannot delete category with subcategories. Please delete subcategories first.\");\n    }\n\n    // Check if category is used by any tickets\n    const ticketsUsingCategory = Array.from(this.tickets.values()).filter(\n      (ticket) => ticket.categoryId === id || ticket.subcategoryId === id\n    );\n    \n    if (ticketsUsingCategory.length > 0) {\n      throw new Error(`Cannot delete category. It is being used by ${ticketsUsingCategory.length} ticket(s).`);\n    }\n\n    // Safe to delete\n    this.categories.delete(id);\n  }\n  \n  // Ticket operations\n  async getTicket(id: number): Promise<Ticket | undefined> {\n    return this.tickets.get(id);\n  }\n  \n  async getTicketWithRelations(id: number): Promise<TicketWithRelations | undefined> {\n    const ticket = await this.getTicket(id);\n    if (!ticket) return undefined;\n    \n    const category = await this.getCategory(ticket.categoryId);\n    if (!category) return undefined;\n    \n    let subcategory = undefined;\n    if (ticket.subcategoryId) {\n      subcategory = await this.getCategory(ticket.subcategoryId);\n    }\n    \n    const createdBy = await this.getUser(ticket.createdById);\n    if (!createdBy) return undefined;\n    \n    let assignedTo = undefined;\n    if (ticket.assignedToId) {\n      assignedTo = await this.getUser(ticket.assignedToId);\n    }\n    \n    const ticketComments = await this.getTicketComments(ticket.id);\n    \n    return {\n      ...ticket,\n      category,\n      subcategory,\n      createdBy,\n      assignedTo,\n      comments: ticketComments\n    };\n  }\n  \n  async createTicket(insertTicket: InsertTicket): Promise<Ticket> {\n    const id = this.ticketIdCounter++;\n    const createdAt = new Date();\n    const updatedAt = new Date();\n    // Set default values for fields that might be undefined\n    const status = insertTicket.status || 'open';\n    const priority = insertTicket.priority || 'medium';\n    const ticket: Ticket = { \n      ...insertTicket, \n      id, \n      createdAt, \n      updatedAt, \n      status, \n      priority,\n      subcategoryId: insertTicket.subcategoryId || null,\n      assignedToId: insertTicket.assignedToId || null\n    };\n    this.tickets.set(id, ticket);\n    return ticket;\n  }\n  \n  async updateTicket(id: number, data: Partial<InsertTicket>): Promise<Ticket | undefined> {\n    const ticket = await this.getTicket(id);\n    if (!ticket) return undefined;\n    \n    const updatedTicket: Ticket = { \n      ...ticket, \n      ...data,\n      updatedAt: new Date()\n    };\n    this.tickets.set(id, updatedTicket);\n    return updatedTicket;\n  }\n\n  async deleteTicket(id: number): Promise<void> {\n    this.tickets.delete(id);\n    // Also delete related comments\n    Array.from(this.comments.values()).forEach(comment => {\n      if (comment.ticketId === id) {\n        this.comments.delete(comment.id);\n      }\n    });\n  }\n  \n  async getUserTickets(userId: number): Promise<Ticket[]> {\n    return Array.from(this.tickets.values()).filter(\n      (ticket) => ticket.createdById === userId\n    );\n  }\n  \n  async getAllTickets(): Promise<Ticket[]> {\n    return Array.from(this.tickets.values());\n  }\n\n  async getAllTicketsWithRelations(): Promise<any[]> {\n    // For in-memory storage, just return basic tickets since this is not used in development\n    return Array.from(this.tickets.values());\n  }\n  \n  async getFilteredTickets(filters: { status?: string, priority?: string, categoryId?: number }): Promise<Ticket[]> {\n    let result = Array.from(this.tickets.values());\n    \n    if (filters.status) {\n      result = result.filter(ticket => ticket.status === filters.status);\n    }\n    \n    if (filters.priority) {\n      result = result.filter(ticket => ticket.priority === filters.priority);\n    }\n    \n    if (filters.categoryId) {\n      result = result.filter(ticket => \n        ticket.categoryId === filters.categoryId || \n        ticket.subcategoryId === filters.categoryId\n      );\n    }\n    \n    return result;\n  }\n  \n  async getTicketsCount(): Promise<{ [key: string]: number }> {\n    const tickets = await this.getAllTickets();\n    \n    return {\n      total: tickets.length,\n      open: tickets.filter(t => t.status === 'open').length,\n      inProgress: tickets.filter(t => t.status === 'in-progress').length,\n      resolved: tickets.filter(t => t.status === 'resolved').length,\n      closed: tickets.filter(t => t.status === 'closed').length,\n    };\n  }\n  \n  async getDashboardStats(): Promise<DashboardStats> {\n    const counts = await this.getTicketsCount();\n    \n    return {\n      openTickets: counts.open,\n      inProgressTickets: counts.inProgress,\n      resolvedTickets: counts.resolved,\n      closedTickets: counts.closed,\n      avgResponseTime: \"4.2 hours\", // Sample value\n      slaComplianceRate: \"94%\"      // Sample value\n    };\n  }\n  \n  // Comment operations\n  async getComment(id: number): Promise<Comment | undefined> {\n    return this.comments.get(id);\n  }\n  \n  async getTicketComments(ticketId: number): Promise<(Comment & { user: User })[]> {\n    const ticketComments = Array.from(this.comments.values()).filter(\n      (comment) => comment.ticketId === ticketId\n    );\n    \n    const commentsWithUser = [];\n    for (const comment of ticketComments) {\n      const user = await this.getUser(comment.userId);\n      if (user) {\n        commentsWithUser.push({ ...comment, user });\n      }\n    }\n    \n    return commentsWithUser;\n  }\n  \n  async createComment(insertComment: InsertComment): Promise<Comment> {\n    const id = this.commentIdCounter++;\n    const createdAt = new Date();\n    const comment: Comment = { \n      ...insertComment, \n      id, \n      createdAt,\n      isInternal: insertComment.isInternal || null\n    };\n    this.comments.set(id, comment);\n    return comment;\n  }\n  \n  // FAQ operations\n  async getFaq(id: number): Promise<Faq | undefined> {\n    return this.faqs.get(id);\n  }\n  \n  async getAllFaqs(): Promise<Faq[]> {\n    return Array.from(this.faqs.values());\n  }\n  \n  async getFaqsByCategory(categoryId: number): Promise<Faq[]> {\n    return Array.from(this.faqs.values()).filter(\n      (faq) => faq.categoryId === categoryId\n    );\n  }\n  \n  async createFaq(insertFaq: InsertFaq): Promise<Faq> {\n    const id = this.faqIdCounter++;\n    const createdAt = new Date();\n    const updatedAt = new Date();\n    const viewCount = 0;\n    const faq: Faq = { \n      ...insertFaq, \n      id, \n      viewCount, \n      createdAt, \n      updatedAt,\n      categoryId: insertFaq.categoryId || null\n    };\n    this.faqs.set(id, faq);\n    return faq;\n  }\n  \n  async updateFaq(id: number, data: Partial<InsertFaq>): Promise<Faq | undefined> {\n    const faq = await this.getFaq(id);\n    if (!faq) return undefined;\n    \n    const updatedFaq: Faq = { \n      ...faq, \n      ...data,\n      updatedAt: new Date()\n    };\n    this.faqs.set(id, updatedFaq);\n    return updatedFaq;\n  }\n  \n  // Chat operations\n  async getChatMessages(userId: number): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values()).filter(\n      (message) => message.userId === userId\n    );\n  }\n  \n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = this.chatMessageIdCounter++;\n    const createdAt = new Date();\n    const message: ChatMessage = { \n      ...insertMessage, \n      id, \n      createdAt,\n      isFromBot: insertMessage.isFromBot || null\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ pool, createTableIfMissing: true });\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: number, data: Partial<InsertUser>): Promise<User | undefined> {\n    const [updatedUser] = await db.update(users)\n      .set(data)\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getUserByUsernameOrEmail(username: string, email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(\n      sql`${users.username} = ${username} OR ${users.email} = ${email}`\n    );\n    return user;\n  }\n\n  async getUserById(id: number): Promise<User | undefined> {\n    return await this.getUser(id);\n  }\n\n  async deleteUser(id: number): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Category operations\n  async getCategory(id: number): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category;\n  }\n\n  async getCategoryByName(name: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.name, name));\n    return category;\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const [category] = await db.insert(categories).values(insertCategory).returning();\n    return category;\n  }\n\n  async getAllCategories(): Promise<Category[]> {\n    return await db.select().from(categories);\n  }\n\n  async getSubcategories(parentId: number): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.parentId, parentId));\n  }\n\n  async updateCategory(id: number, data: Partial<InsertCategory>): Promise<Category | undefined> {\n    const [updatedCategory] = await db.update(categories)\n      .set(data)\n      .where(eq(categories.id, id))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: number): Promise<void> {\n    // Check if category exists\n    const category = await this.getCategory(id);\n    if (!category) {\n      throw new Error(\"Category not found\");\n    }\n\n    // Check if category has subcategories\n    const subcategories = await this.getSubcategories(id);\n    if (subcategories.length > 0) {\n      throw new Error(\"Cannot delete category with subcategories. Please delete subcategories first.\");\n    }\n\n    // Check if category is used by any tickets\n    const ticketsUsingCategory = await db.select()\n      .from(tickets)\n      .where(sql`${tickets.categoryId} = ${id} OR ${tickets.subcategoryId} = ${id}`);\n    \n    if (ticketsUsingCategory.length > 0) {\n      throw new Error(`Cannot delete category. It is being used by ${ticketsUsingCategory.length} ticket(s).`);\n    }\n\n    // Safe to delete\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Ticket operations\n  async getTicket(id: number): Promise<Ticket | undefined> {\n    const [ticket] = await db.select().from(tickets).where(eq(tickets.id, id));\n    return ticket;\n  }\n\n  async getTicketWithRelations(id: number): Promise<TicketWithRelations | undefined> {\n    const ticket = await this.getTicket(id);\n    if (!ticket) return undefined;\n    \n    const category = await this.getCategory(ticket.categoryId);\n    if (!category) return undefined;\n    \n    let subcategory = undefined;\n    if (ticket.subcategoryId) {\n      subcategory = await this.getCategory(ticket.subcategoryId);\n    }\n    \n    const createdBy = await this.getUser(ticket.createdById);\n    if (!createdBy) return undefined;\n    \n    let assignedTo = undefined;\n    if (ticket.assignedToId) {\n      assignedTo = await this.getUser(ticket.assignedToId);\n    }\n    \n    const ticketComments = await this.getTicketComments(ticket.id);\n    \n    return {\n      ...ticket,\n      category,\n      subcategory,\n      createdBy,\n      assignedTo,\n      comments: ticketComments\n    };\n  }\n\n  async createTicket(insertTicket: InsertTicket): Promise<Ticket> {\n    try {\n      // Only insert core fields that we know exist\n      const coreTicketData = {\n        title: insertTicket.title,\n        description: insertTicket.description,\n        status: insertTicket.status || 'open',\n        priority: insertTicket.priority || 'medium',\n        categoryId: insertTicket.categoryId,\n        subcategoryId: insertTicket.subcategoryId || null,\n        assignedToId: insertTicket.assignedToId || null,\n        createdById: insertTicket.createdById,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      const [ticket] = await db.insert(tickets).values(coreTicketData).returning();\n      \n      // Add default values for new fields\n      return {\n        ...ticket,\n        supportType: (insertTicket as any).supportType || 'remote',\n        contactEmail: (insertTicket as any).contactEmail || null,\n        contactName: (insertTicket as any).contactName || null,\n        contactPhone: (insertTicket as any).contactPhone || null,\n        contactDepartment: (insertTicket as any).contactDepartment || null,\n        dueDate: (insertTicket as any).dueDate || null\n      };\n    } catch (error) {\n      console.error(\"Error creating ticket:\", error);\n      throw error;\n    }\n  }\n\n  async updateTicket(id: number, data: Partial<InsertTicket>): Promise<Ticket | undefined> {\n    const [updatedTicket] = await db.update(tickets)\n      .set({\n        ...data,\n        updatedAt: new Date()\n      })\n      .where(eq(tickets.id, id))\n      .returning();\n    return updatedTicket;\n  }\n\n  async deleteTicket(id: number): Promise<void> {\n    await db.delete(tickets).where(eq(tickets.id, id));\n  }\n\n  async getUserTickets(userId: number): Promise<Ticket[]> {\n    return await db.select().from(tickets).where(eq(tickets.createdById, userId));\n  }\n\n  async getAllTickets(): Promise<Ticket[]> {\n    try {\n      // Select only the core columns to avoid issues with missing columns\n      const result = await db.select({\n        id: tickets.id,\n        title: tickets.title,\n        description: tickets.description,\n        status: tickets.status,\n        priority: tickets.priority,\n        categoryId: tickets.categoryId,\n        subcategoryId: tickets.subcategoryId,\n        assignedToId: tickets.assignedToId,\n        createdById: tickets.createdById,\n        createdAt: tickets.createdAt,\n        updatedAt: tickets.updatedAt\n      }).from(tickets).orderBy(desc(tickets.createdAt));\n      \n      // Add default values for new columns\n      return result.map(ticket => ({\n        ...ticket,\n        supportType: 'remote' as string,\n        contactEmail: null as string | null,\n        contactName: null as string | null,\n        contactPhone: null as string | null,\n        contactDepartment: null as string | null,\n        dueDate: null as Date | null\n      }));\n    } catch (error) {\n      console.error(\"Error in getAllTickets:\", error);\n      throw error;\n    }\n  }\n\n  async getAllTicketsWithRelations(): Promise<any[]> {\n    try {\n      const allTickets = await this.getAllTickets();\n      const ticketsWithRelations = [];\n      \n      for (const ticket of allTickets) {\n        const category = await this.getCategory(ticket.categoryId);\n        let subcategory = null;\n        if (ticket.subcategoryId) {\n          subcategory = await this.getCategory(ticket.subcategoryId);\n        }\n        \n        const createdBy = await this.getUser(ticket.createdById);\n        let assignedTo = null;\n        if (ticket.assignedToId) {\n          assignedTo = await this.getUser(ticket.assignedToId);\n        }\n        \n        // Get comment count\n        const ticketComments = await this.getTicketComments(ticket.id);\n        const commentCount = ticketComments.length;\n        \n        ticketsWithRelations.push({\n          ...ticket,\n          category: category || null,\n          subcategory,\n          createdBy: createdBy || null,\n          assignedTo,\n          commentCount\n        });\n      }\n      \n      return ticketsWithRelations;\n    } catch (error) {\n      console.error(\"Error in getAllTicketsWithRelations:\", error);\n      throw error;\n    }\n  }\n\n  async getFilteredTickets(filters: { status?: string, priority?: string, categoryId?: number }): Promise<Ticket[]> {\n    let query = db.select().from(tickets);\n    \n    if (filters.status) {\n      query = query.where(eq(tickets.status, filters.status));\n    }\n    \n    if (filters.priority) {\n      query = query.where(eq(tickets.priority, filters.priority));\n    }\n    \n    if (filters.categoryId) {\n      // This handles both category and subcategory\n      query = query.where(\n        sql`${tickets.categoryId} = ${filters.categoryId} OR \n            ${tickets.subcategoryId} = ${filters.categoryId}`\n      );\n    }\n    \n    return await query;\n  }\n\n  async getTicketsCount(): Promise<{ [key: string]: number }> {\n    const allTickets = await this.getAllTickets();\n    \n    return {\n      total: allTickets.length,\n      open: allTickets.filter(t => t.status === 'open').length,\n      inProgress: allTickets.filter(t => t.status === 'in-progress').length,\n      resolved: allTickets.filter(t => t.status === 'resolved').length,\n      closed: allTickets.filter(t => t.status === 'closed').length,\n    };\n  }\n\n  async getDashboardStats(): Promise<DashboardStats> {\n    const counts = await this.getTicketsCount();\n    \n    return {\n      openTickets: counts.open,\n      inProgressTickets: counts.inProgress,\n      resolvedTickets: counts.resolved,\n      closedTickets: counts.closed,\n      avgResponseTime: \"4.2 hours\", // This could be calculated from actual data\n      slaComplianceRate: \"94%\" // This could be calculated from actual data\n    };\n  }\n\n  // Comment operations\n  async getComment(id: number): Promise<Comment | undefined> {\n    const [comment] = await db.select().from(comments).where(eq(comments.id, id));\n    return comment;\n  }\n\n  async getTicketComments(ticketId: number): Promise<(Comment & { user: User })[]> {\n    const commentsResult = await db.select().from(comments).where(eq(comments.ticketId, ticketId));\n    \n    const commentsWithUser = [];\n    for (const comment of commentsResult) {\n      const user = await this.getUser(comment.userId);\n      if (user) {\n        commentsWithUser.push({ ...comment, user });\n      }\n    }\n    \n    return commentsWithUser;\n  }\n\n  async createComment(insertComment: InsertComment): Promise<Comment> {\n    const [comment] = await db.insert(comments).values({\n      ...insertComment,\n      createdAt: new Date()\n    }).returning();\n    return comment;\n  }\n\n  // FAQ operations\n  async getFaq(id: number): Promise<Faq | undefined> {\n    const [faq] = await db.select().from(faqs).where(eq(faqs.id, id));\n    return faq;\n  }\n\n  async getAllFaqs(): Promise<Faq[]> {\n    return await db.select().from(faqs);\n  }\n\n  async getFaqsByCategory(categoryId: number): Promise<Faq[]> {\n    return await db.select().from(faqs).where(eq(faqs.categoryId, categoryId));\n  }\n\n  async createFaq(insertFaq: InsertFaq): Promise<Faq> {\n    const [faq] = await db.insert(faqs).values({\n      ...insertFaq,\n      viewCount: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }).returning();\n    return faq;\n  }\n\n  async updateFaq(id: number, data: Partial<InsertFaq>): Promise<Faq | undefined> {\n    const [updatedFaq] = await db.update(faqs)\n      .set({\n        ...data,\n        updatedAt: new Date()\n      })\n      .where(eq(faqs.id, id))\n      .returning();\n    return updatedFaq;\n  }\n\n  // Chat operations\n  async getChatMessages(userId: number): Promise<ChatMessage[]> {\n    return await db.select().from(chatMessages).where(eq(chatMessages.userId, userId));\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const [message] = await db.insert(chatMessages).values({\n      ...insertMessage,\n      createdAt: new Date()\n    }).returning();\n    return message;\n  }\n}\n\n// Use database storage implementation\nexport const storage = new DatabaseStorage();","size_bytes":29958},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User table with role-based access control\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // \"admin\", \"agent\", \"user\"\n  companyName: text(\"company_name\"),\n  department: text(\"department\"),\n  contactNumber: text(\"contact_number\"),\n  designation: text(\"designation\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Categories for tickets\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  parentId: integer(\"parent_id\"),\n});\n\n// Tickets table\nexport const tickets = pgTable(\"tickets\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default(\"open\"), // \"open\", \"in-progress\", \"resolved\", \"closed\"\n  priority: text(\"priority\").notNull().default(\"medium\"), // \"low\", \"medium\", \"high\"\n  supportType: text(\"support_type\").notNull().default(\"remote\"), // \"remote\", \"telephonic\", \"onsite_visit\", \"other\"\n  contactEmail: text(\"contact_email\"), // Email for contact field\n  contactName: text(\"contact_name\"), // Name associated with contact email\n  contactPhone: text(\"contact_phone\"), // Phone number for contact\n  contactDepartment: text(\"contact_department\"), // Department for contact\n  categoryId: integer(\"category_id\").references(() => categories.id).notNull(),\n  subcategoryId: integer(\"subcategory_id\").references(() => categories.id),\n  createdById: integer(\"created_by_id\").references(() => users.id).notNull(),\n  assignedToId: integer(\"assigned_to_id\").references(() => users.id),\n  dueDate: timestamp(\"due_date\"), // Adding due date for reports filtering\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Comments on tickets\nexport const comments = pgTable(\"comments\", {\n  id: serial(\"id\").primaryKey(),\n  ticketId: integer(\"ticket_id\").references(() => tickets.id).notNull(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  isInternal: boolean(\"is_internal\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// FAQs for knowledge base\nexport const faqs = pgTable(\"faqs\", {\n  id: serial(\"id\").primaryKey(),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  categoryId: integer(\"category_id\").references(() => categories.id),\n  viewCount: integer(\"view_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chatbot messages for persistent chat history\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  message: text(\"message\").notNull(),\n  isFromBot: boolean(\"is_from_bot\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User Journey Documentation System Tables\n\n// User Journey Templates/Types\nexport const journeyTemplates = pgTable(\"journey_templates\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // \"onboarding\", \"feature-workflow\", \"error-recovery\", \"admin\", \"returning-user\"\n  color: text(\"color\").default(\"#3B82F6\"), // Color for visual identification\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User Journeys (instances of templates)\nexport const userJourneys = pgTable(\"user_journeys\", {\n  id: serial(\"id\").primaryKey(),\n  templateId: integer(\"template_id\").references(() => journeyTemplates.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  version: text(\"version\").default(\"1.0\"),\n  status: text(\"status\").notNull().default(\"draft\"), // \"draft\", \"in-review\", \"approved\", \"archived\"\n  personas: json(\"personas\").$type<string[]>().default([]), // Array of user persona names\n  prerequisites: text(\"prerequisites\"),\n  entryPoints: json(\"entry_points\").$type<string[]>().default([]), // Where users can start this journey\n  successCriteria: text(\"success_criteria\"),\n  painPoints: text(\"pain_points\"),\n  improvementNotes: text(\"improvement_notes\"),\n  createdById: integer(\"created_by_id\").references(() => users.id).notNull(),\n  lastUpdatedById: integer(\"last_updated_by_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Journey Steps (the actual workflow steps)\nexport const journeySteps = pgTable(\"journey_steps\", {\n  id: serial(\"id\").primaryKey(),\n  journeyId: integer(\"journey_id\").references(() => userJourneys.id).notNull(),\n  stepNumber: integer(\"step_number\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  userActions: json(\"user_actions\").$type<string[]>().default([]), // Array of required user actions\n  systemResponses: json(\"system_responses\").$type<string[]>().default([]), // Array of system responses\n  expectedOutcomes: json(\"expected_outcomes\").$type<string[]>().default([]), // Array of expected outcomes\n  errorScenarios: json(\"error_scenarios\").$type<{scenario: string, handling: string}[]>().default([]), // Error handling\n  screenshotPlaceholder: text(\"screenshot_placeholder\"), // Placeholder for screenshot/mockup\n  notes: text(\"notes\"),\n  isOptional: boolean(\"is_optional\").default(false),\n  estimatedDuration: text(\"estimated_duration\"), // e.g., \"2 minutes\", \"30 seconds\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Comments and collaboration on journeys\nexport const journeyComments = pgTable(\"journey_comments\", {\n  id: serial(\"id\").primaryKey(),\n  journeyId: integer(\"journey_id\").references(() => userJourneys.id),\n  stepId: integer(\"step_id\").references(() => journeySteps.id), // Optional: comment on specific step\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  type: text(\"type\").default(\"comment\"), // \"comment\", \"suggestion\", \"issue\"\n  isResolved: boolean(\"is_resolved\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Journey exports/shares\nexport const journeyExports = pgTable(\"journey_exports\", {\n  id: serial(\"id\").primaryKey(),\n  journeyId: integer(\"journey_id\").references(() => userJourneys.id).notNull(),\n  exportType: text(\"export_type\").notNull(), // \"pdf\", \"markdown\", \"share-link\"\n  exportData: json(\"export_data\").$type<any>().default({}), // Metadata about the export\n  shareToken: text(\"share_token\"), // For shareable links\n  expiresAt: timestamp(\"expires_at\"), // For shareable links\n  createdById: integer(\"created_by_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFaqSchema = createInsertSchema(faqs).omit({\n  id: true,\n  viewCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Journey Documentation Schema Validation\nexport const insertJourneyTemplateSchema = createInsertSchema(journeyTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserJourneySchema = createInsertSchema(userJourneys).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJourneyStepSchema = createInsertSchema(journeySteps).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJourneyCommentSchema = createInsertSchema(journeyComments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJourneyExportSchema = createInsertSchema(journeyExports).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Ticket = typeof tickets.$inferSelect;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\n\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n\nexport type Faq = typeof faqs.$inferSelect;\nexport type InsertFaq = z.infer<typeof insertFaqSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\n// Custom types for API responses\nexport type TicketWithRelations = Ticket & {\n  category: Category;\n  subcategory?: Category;\n  createdBy: User;\n  assignedTo?: User;\n  comments: (Comment & { user: User })[];\n};\n\nexport type DashboardStats = {\n  openTickets: number;\n  inProgressTickets: number;\n  resolvedTickets: number;\n  closedTickets: number;\n  avgResponseTime: string;\n  slaComplianceRate: string;\n};\n","size_bytes":9792},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\n\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport HomePage from \"@/pages/home-page\";\nimport TicketsPage from \"@/pages/tickets-page\";\nimport TicketDetailPage from \"@/pages/ticket-detail-page\";\nimport TicketCreatePage from \"@/pages/ticket-create-page\";\nimport TicketEditPage from \"@/pages/ticket-edit-page\";\nimport KnowledgeBasePage from \"@/pages/knowledge-base-page\";\nimport AllTicketsPage from \"@/pages/all-tickets-page\";\nimport DocumentationPage from \"@/pages/documentation-page\";\nimport SettingsPage from \"@/pages/settings-page\";\nimport ReportsPage from \"@/pages/admin/reports-page\";\nimport UsersPage from \"@/pages/admin/users-page\";\nimport CategoriesPage from \"@/pages/admin/categories-page\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={HomePage} />\n      <ProtectedRoute path=\"/tickets\" component={TicketsPage} />\n      <ProtectedRoute path=\"/tickets/new\" component={TicketCreatePage} />\n      <ProtectedRoute path=\"/tickets/:id/edit\" component={TicketEditPage} />\n      <ProtectedRoute path=\"/tickets/:id\" component={TicketDetailPage} />\n      <ProtectedRoute path=\"/knowledge-base\" component={KnowledgeBasePage} />\n      <ProtectedRoute path=\"/documentation\" component={DocumentationPage} />\n      <ProtectedRoute path=\"/settings\" component={SettingsPage} />\n      <ProtectedRoute \n        path=\"/all-tickets\" \n        component={AllTicketsPage} \n      />\n      <ProtectedRoute \n        path=\"/admin/reports\" \n        component={ReportsPage} \n      />\n      <ProtectedRoute \n        path=\"/admin/users\" \n        component={UsersPage} \n      />\n      <ProtectedRoute \n        path=\"/admin/categories\" \n        component={CategoriesPage} \n      />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <Router />\n        <Toaster />\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2364},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Mobile responsiveness enhancements */\n@layer utilities {\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n  \n  .mobile-sidebar {\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .mobile-sidebar.open {\n    transform: translateX(0);\n  }\n  \n  .mobile-sidebar.closed {\n    transform: translateX(-100%);\n  }\n  \n  /* Responsive breakpoints for better mobile experience */\n  @media (max-width: 768px) {\n    .responsive-grid {\n      grid-template-columns: 1fr;\n    }\n    \n    .responsive-padding {\n      padding: 1rem;\n    }\n    \n    .responsive-text {\n      font-size: 0.875rem;\n    }\n    \n    .mobile-hidden {\n      display: none;\n    }\n  }\n  \n  @media (min-width: 769px) {\n    .desktop-grid {\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    }\n  }\n}","size_bytes":1046},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"netlify/functions/server.js":{"content":"const express = require('express');\nconst serverless = require('serverless-http');\nconst cors = require('cors');\n\n// Import your server modules\nconst { setupAuth } = require('../../server/auth');\nconst { registerRoutes } = require('../../server/routes');\n\nconst app = express();\n\n// Basic middleware\napp.use(cors({\n  origin: true,\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'Cookie']\n}));\n\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\n\n// Trust proxy for secure cookies\napp.set('trust proxy', 1);\n\n// Setup authentication\nsetupAuth(app);\n\n// Register API routes\nregisterRoutes(app);\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({ \n    error: 'Internal server error',\n    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'\n  });\n});\n\n// 404 handler for API routes\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'API endpoint not found' });\n});\n\n// Export for Netlify Functions\nconst handler = serverless(app);\n\nmodule.exports.handler = async (event, context) => {\n  // Set context timeout\n  context.callbackWaitsForEmptyEventLoop = false;\n  \n  try {\n    const result = await handler(event, context);\n    return result;\n  } catch (error) {\n    console.error('Netlify function error:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Function execution failed' })\n    };\n  }\n};","size_bytes":1718},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { InsertUser, User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\ntype LoginData = {\n  username: string;\n  password: string;\n};\n\ntype RegisterData = {\n  username: string;\n  password: string;\n  name: string;\n  email: string;\n  role?: string;\n  companyName?: string;\n  department?: string;\n  contactNumber?: string;\n  designation?: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", userData);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to IT Helpdesk, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Unable to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3447},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  requiredRole = [],\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n  requiredRole?: string[];\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  // Role-based restriction removed - all users can access all pages\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":825},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/all-tickets-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport TicketList from \"@/components/tickets/ticket-list\";\nimport TicketFilters from \"@/components/tickets/ticket-filters\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter } from \"lucide-react\";\nimport { Category, Ticket, User } from \"@shared/schema\";\n\ninterface FilterState {\n  status?: string;\n  priority?: string;\n  categoryId?: number;\n  assignedToId?: number;\n  companyName?: string;\n}\n\nexport default function AllTicketsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filters, setFilters] = useState<FilterState>({\n    assignedToId: 0  // Default to unassigned tickets\n  });\n  const { user } = useAuth();\n  const isMobile = window.innerWidth < 768;\n\n  // Fetch all tickets (for admins and agents)\n  const { data: tickets, isLoading: isLoadingTickets } = useQuery<any[]>({\n    queryKey: [\"/api/tickets\"],\n    enabled: !!user,\n  });\n\n  // Fetch ticket categories\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    enabled: !!user,\n  });\n\n  // Fetch users (for assignment filter)\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Get ticket counts by status\n  const getTicketCounts = () => {\n    if (!tickets) return { total: 0, open: 0, inProgress: 0, closed: 0 };\n    \n    return {\n      total: tickets.length,\n      open: tickets.filter(t => t.status === 'open').length,\n      inProgress: tickets.filter(t => t.status === 'in-progress').length,\n      closed: tickets.filter(t => t.status === 'closed').length,\n    };\n  };\n\n  const counts = getTicketCounts();\n\n  // Filter tickets based on search query and filters\n  const filteredTickets = tickets?.filter(ticket => {\n    let matchesSearch = true;\n    let matchesFilters = true;\n\n    // Apply search query\n    if (searchQuery) {\n      matchesSearch = \n        ticket.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        ticket.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        `TKT-${ticket.id.toString().padStart(4, '0')}`.includes(searchQuery);\n    }\n\n    // Apply status filter\n    if (filters.status && ticket.status !== filters.status) {\n      matchesFilters = false;\n    }\n\n    // Apply priority filter\n    if (filters.priority && ticket.priority !== filters.priority) {\n      matchesFilters = false;\n    }\n\n    // Apply category filter\n    if (filters.categoryId && ticket.categoryId !== filters.categoryId) {\n      matchesFilters = false;\n    }\n\n    // Apply assigned filter\n    if (filters.assignedToId !== undefined) {\n      // If filter is for unassigned tickets\n      if (filters.assignedToId === 0 && ticket.assignedToId !== null) {\n        matchesFilters = false;\n      } \n      // If filter is for tickets assigned to specific agent\n      else if (filters.assignedToId > 0 && ticket.assignedToId !== filters.assignedToId) {\n        matchesFilters = false;\n      }\n    }\n\n    // Apply company name filter\n    if (filters.companyName && ticket.createdBy.companyName !== filters.companyName) {\n      matchesFilters = false;\n    }\n\n    return matchesSearch && matchesFilters;\n  });\n\n  // Handle filter changes\n  const handleFilterChange = (newFilters: FilterState) => {\n    setFilters(newFilters);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"All Tickets\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          {/* Actions Header */}\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6\">\n            <div className=\"mb-4 md:mb-0\">\n              <h2 className=\"text-lg font-semibold text-gray-800\">All Support Tickets</h2>\n              <p className=\"text-sm text-gray-500\">Manage and resolve tickets from all users</p>\n            </div>\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search tickets...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n                <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n              </div>\n              <Button variant=\"outline\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                Advanced Filter\n              </Button>\n            </div>\n          </div>\n\n          {/* Tickets Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n            <Card>\n              <CardContent className=\"p-4 flex justify-between items-center\">\n                <div>\n                  <p className=\"text-sm text-gray-500 font-medium\">Total</p>\n                  <p className=\"text-2xl font-semibold mt-1\">{isLoadingTickets ? <Skeleton className=\"h-8 w-8\" /> : counts.total}</p>\n                </div>\n                <div className=\"bg-gray-100 p-2 rounded-full text-gray-700\">\n                  <Filter className=\"h-5 w-5\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4 flex justify-between items-center\">\n                <div>\n                  <p className=\"text-sm text-gray-500 font-medium\">Open</p>\n                  <p className=\"text-2xl font-semibold mt-1\">{isLoadingTickets ? <Skeleton className=\"h-8 w-8\" /> : counts.open}</p>\n                </div>\n                <div className=\"bg-red-100 p-2 rounded-full text-red-600\">\n                  <div className=\"h-5 w-5 flex items-center justify-center font-bold\">!</div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4 flex justify-between items-center\">\n                <div>\n                  <p className=\"text-sm text-gray-500 font-medium\">In Progress</p>\n                  <p className=\"text-2xl font-semibold mt-1\">{isLoadingTickets ? <Skeleton className=\"h-8 w-8\" /> : counts.inProgress}</p>\n                </div>\n                <div className=\"bg-yellow-100 p-2 rounded-full text-yellow-600\">\n                  <div className=\"h-5 w-5 flex items-center justify-center\">‚è±Ô∏è</div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4 flex justify-between items-center\">\n                <div>\n                  <p className=\"text-sm text-gray-500 font-medium\">Closed</p>\n                  <p className=\"text-2xl font-semibold mt-1\">{isLoadingTickets ? <Skeleton className=\"h-8 w-8\" /> : counts.closed}</p>\n                </div>\n                <div className=\"bg-green-100 p-2 rounded-full text-green-600\">\n                  <div className=\"h-5 w-5 flex items-center justify-center\">‚úì</div>\n                </div>\n              </CardContent>\n            </Card>\n            \n\n          </div>\n\n          {/* Filters */}\n          <TicketFilters \n            categories={categories || []} \n            users={users || []} \n            tickets={tickets || []}\n            showAssigneeFilter={true}\n            onFilterChange={handleFilterChange}\n          />\n\n          {/* Tickets List */}\n          <Card>\n            {isLoadingTickets ? (\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, index) => (\n                    <Skeleton key={index} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              </CardContent>\n            ) : filteredTickets && filteredTickets.length > 0 ? (\n              <TicketList \n                tickets={filteredTickets} \n                showCreatedBy={true}\n                showAssignedTo={true}\n              />\n            ) : (\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No tickets found</h3>\n                <p className=\"text-gray-500 mb-6\">\n                  {Object.keys(filters).length > 0 || searchQuery\n                    ? \"Try adjusting your filters or search query\"\n                    : \"There are no tickets in the system yet\"}\n                </p>\n              </CardContent>\n            )}\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9275},"client/src/pages/auth-page.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, Headset } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  companyName: z.string().optional(),\n  department: z.string().optional(),\n  contactNumber: z.string().optional(),\n  location: z.string().optional(),\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\ntype RegisterFormValues = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [, navigate] = useLocation();\n  const { user, loginMutation, registerMutation, isLoading } = useAuth();\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      navigate(\"/\");\n    }\n  }, [user, navigate]);\n\n  const loginForm = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      name: \"\",\n      email: \"\",\n      companyName: \"\",\n      department: \"\",\n      contactNumber: \"\",\n      location: \"\",\n    },\n  });\n\n  const onLoginSubmit = (data: LoginFormValues) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterFormValues) => {\n    registerMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col md:flex-row\">\n      {/* Left Side - Auth Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center\">\n              <Headset className=\"h-12 w-12 text-primary mr-2\" />\n              <h1 className=\"text-3xl font-bold\">IT Helpdesk</h1>\n            </div>\n            <p className=\"text-gray-600 mt-2\">A comprehensive support & ticketing solution</p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\">Register</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Login to your account</CardTitle>\n                  <CardDescription>\n                    Enter your credentials to access the helpdesk portal\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...loginForm}>\n                    <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={loginMutation.isPending}\n                      >\n                        {loginMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Logging in...\n                          </>\n                        ) : (\n                          \"Login\"\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create an account</CardTitle>\n                  <CardDescription>\n                    Register to start using the helpdesk portal\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Choose a username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your full name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"Enter your email\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Create a password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"mt-6 mb-3\">\n                        <h3 className=\"text-sm font-medium text-gray-700\">Additional Information</h3>\n                        <p className=\"text-xs text-gray-500\">This information helps us provide more personalized support</p>\n                      </div>\n                      <FormField\n                        control={registerForm.control}\n                        name=\"companyName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Company Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your company name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"department\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Department</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your department\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"contactNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Official Contact Number</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your contact number\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"designation\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Location</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your work location\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={registerMutation.isPending}\n                      >\n                        {registerMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Creating account...\n                          </>\n                        ) : (\n                          \"Register\"\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"mt-6 text-center text-sm text-gray-600\">\n            <p>Demo accounts</p>\n            <p>Admin: admin / admin123</p>\n            <p>Agent: agent / agent123</p>\n            <p>User: user / user123</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Side - Intro & Features */}\n      <div className=\"hidden md:flex flex-1 bg-primary text-white p-8 items-center justify-center\">\n        <div className=\"max-w-md\">\n          <h2 className=\"text-3xl font-bold mb-6\">IT Helpdesk Portal</h2>\n          <p className=\"text-lg mb-8\">A Comprehensive Support & Ticketing Solution with Chatbot Assistant</p>\n          \n          <div className=\"space-y-6\">\n            <div className=\"flex items-start\">\n              <div className=\"bg-white/10 p-2 rounded-full mr-4\">\n                <svg className=\"h-6 w-6\" fill=\"none\" strokeWidth=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-medium\">Centralized Ticketing</h3>\n                <p className=\"mt-1 text-white/80\">Track and manage all your IT support requests in one place</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start\">\n              <div className=\"bg-white/10 p-2 rounded-full mr-4\">\n                <svg className=\"h-6 w-6\" fill=\"none\" strokeWidth=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4\"></path>\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-medium\">Role-Based Access</h3>\n                <p className=\"mt-1 text-white/80\">Different permissions for users, agents, and administrators</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start\">\n              <div className=\"bg-white/10 p-2 rounded-full mr-4\">\n                <svg className=\"h-6 w-6\" fill=\"none\" strokeWidth=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-medium\">Knowledge Base</h3>\n                <p className=\"mt-1 text-white/80\">Self-service resources to solve common problems</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start\">\n              <div className=\"bg-white/10 p-2 rounded-full mr-4\">\n                <svg className=\"h-6 w-6\" fill=\"none\" strokeWidth=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"></path>\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-medium\">Chatbot Assistant</h3>\n                <p className=\"mt-1 text-white/80\">24/7 support with AI chatbot for immediate assistance</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15710},"client/src/pages/documentation-page.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Download, ExternalLink, Clock, CheckCircle, Users, Target } from \"lucide-react\";\n\nexport default function DocumentationPage() {\n  const handleExportPDF = () => {\n    window.print();\n  };\n\n  const handleShareLink = () => {\n    navigator.clipboard.writeText(window.location.href);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      {/* Header Section */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">\n              IT Helpdesk Portal - User Journey Documentation\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Your complete guide to using the IT Helpdesk Portal effectively\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={handleExportPDF} variant=\"outline\" className=\"flex items-center gap-2\">\n              <Download className=\"h-4 w-4\" />\n              Export PDF\n            </Button>\n            <Button onClick={handleShareLink} variant=\"outline\" className=\"flex items-center gap-2\">\n              <ExternalLink className=\"h-4 w-4\" />\n              Share Link\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex gap-4 text-sm text-gray-500\">\n          <span>Version 1.0</span>\n          <span>‚Ä¢</span>\n          <span>Last Updated: January 15, 2025</span>\n          <span>‚Ä¢</span>\n          <span>Next Review: April 15, 2025</span>\n        </div>\n      </div>\n\n      {/* Quick Navigation */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Table of Contents\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <a href=\"#executive-summary\" className=\"block p-2 rounded hover:bg-gray-50 text-blue-600 hover:text-blue-800\">\n                1. Executive Summary\n              </a>\n              <a href=\"#getting-started\" className=\"block p-2 rounded hover:bg-gray-50 text-blue-600 hover:text-blue-800\">\n                2. Getting Started\n              </a>\n              <a href=\"#user-interface\" className=\"block p-2 rounded hover:bg-gray-50 text-blue-600 hover:text-blue-800\">\n                3. User Interface Overview\n              </a>\n              <a href=\"#user-journey\" className=\"block p-2 rounded hover:bg-gray-50 text-blue-600 hover:text-blue-800\">\n                4. Step-by-Step User Journey\n              </a>\n            </div>\n            <div className=\"space-y-2\">\n              <a href=\"#feature-deep-dive\" className=\"block p-2 rounded hover:bg-gray-50 text-blue-600 hover:text-blue-800\">\n                5. Feature Deep Dive\n              </a>\n              <a href=\"#advanced-features\" className=\"block p-2 rounded hover:bg-gray-50 text-blue-600 hover:text-blue-800\">\n                6. Advanced Features\n              </a>\n              <a href=\"#support-resources\" className=\"block p-2 rounded hover:bg-gray-50 text-blue-600 hover:text-blue-800\">\n                7. Support and Resources\n              </a>\n              <a href=\"#appendix\" className=\"block p-2 rounded hover:bg-gray-50 text-blue-600 hover:text-blue-800\">\n                8. Appendix\n              </a>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Executive Summary */}\n      <section id=\"executive-summary\" className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold mb-6 text-gray-900\">1. Executive Summary</h2>\n        \n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Application Purpose\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-700 leading-relaxed\">\n              The IT Helpdesk Portal is a comprehensive technical support management system designed to streamline \n              IT support workflows and enhance user experience. It provides a centralized platform for ticket management, \n              knowledge sharing, and automated assistance.\n            </p>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Key Benefits</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2\">\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                  <span className=\"text-sm\">Streamlined Support Process</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                  <span className=\"text-sm\">Self-Service Capabilities</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                  <span className=\"text-sm\">AI-Powered Assistance</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                  <span className=\"text-sm\">Role-Based Access</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                  <span className=\"text-sm\">Real-Time Analytics</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                  <span className=\"text-sm\">Mobile-Responsive Design</span>\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Target Audience\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\">End Users</Badge>\n                  <span className=\"text-sm text-gray-600\">Employees seeking IT support</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\">IT Agents</Badge>\n                  <span className=\"text-sm text-gray-600\">Technical staff managing tickets</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\">Administrators</Badge>\n                  <span className=\"text-sm text-gray-600\">System managers</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\">Management</Badge>\n                  <span className=\"text-sm text-gray-600\">Performance stakeholders</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Getting Started */}\n      <section id=\"getting-started\" className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold mb-6 text-gray-900\">2. Getting Started</h2>\n        \n        <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Requirements</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2 text-sm\">\n                <li><strong>Browser:</strong> Chrome 90+, Firefox 88+, Safari 14+, Edge 90+</li>\n                <li><strong>Internet:</strong> Stable broadband connection</li>\n                <li><strong>Device:</strong> Desktop, tablet, or mobile (320px+ width)</li>\n                <li><strong>JavaScript:</strong> Must be enabled</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Demo Credentials</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm\">\n                <div><strong>Admin:</strong> admin / admin123</div>\n                <div><strong>Agent:</strong> agent / agent123</div>\n                <div><strong>User:</strong> user / user123</div>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Contact your IT administrator for production credentials\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* User Journey Steps */}\n      <section id=\"user-journey\" className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold mb-6 text-gray-900\">4. Step-by-Step User Journey</h2>\n        \n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Journey 1: Creating a Support Ticket</span>\n                <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                  <Clock className=\"h-4 w-4\" />\n                  3-5 minutes\n                </div>\n              </CardTitle>\n              <CardDescription>\n                Submit a new IT support request through the ticketing system\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-blue-900 mb-2\">Objective</h4>\n                  <p className=\"text-blue-800\">Submit a new IT support request</p>\n                  <h4 className=\"font-semibold text-blue-900 mb-2 mt-3\">Entry Point</h4>\n                  <p className=\"text-blue-800\">Dashboard or \"Create Ticket\" button</p>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex gap-3\">\n                    <div className=\"bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">1</div>\n                    <div>\n                      <h5 className=\"font-semibold\">Access Creation Form</h5>\n                      <p className=\"text-gray-600 text-sm\">Click \"Create Ticket\" button from dashboard or sidebar</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-3\">\n                    <div className=\"bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">2</div>\n                    <div>\n                      <h5 className=\"font-semibold\">Complete Required Information</h5>\n                      <p className=\"text-gray-600 text-sm\">Enter title, select category/subcategory, set priority level</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-3\">\n                    <div className=\"bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">3</div>\n                    <div>\n                      <h5 className=\"font-semibold\">Provide Detailed Description</h5>\n                      <p className=\"text-gray-600 text-sm\">Describe issue comprehensively, include steps to reproduce</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-3\">\n                    <div className=\"bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">4</div>\n                    <div>\n                      <h5 className=\"font-semibold\">Submit Ticket</h5>\n                      <p className=\"text-gray-600 text-sm\">Review information and click \"Submit Ticket\"</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-green-900 mb-2\">Expected Outcomes</h4>\n                  <ul className=\"text-green-800 text-sm space-y-1\">\n                    <li>‚Ä¢ Ticket created with unique ID</li>\n                    <li>‚Ä¢ Confirmation message displayed</li>\n                    <li>‚Ä¢ Email notification sent (if configured)</li>\n                    <li>‚Ä¢ Ticket appears in \"My Tickets\" section</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Journey 2: Using the Knowledge Base</span>\n                <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                  <Clock className=\"h-4 w-4\" />\n                  2-10 minutes\n                </div>\n              </CardTitle>\n              <CardDescription>\n                Find solutions to common issues independently\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"bg-orange-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-orange-900 mb-2\">Objective</h4>\n                  <p className=\"text-orange-800\">Find solutions to common issues independently</p>\n                  <h4 className=\"font-semibold text-orange-900 mb-2 mt-3\">Entry Point</h4>\n                  <p className=\"text-orange-800\">Knowledge Base section</p>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex gap-3\">\n                    <div className=\"bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">1</div>\n                    <div>\n                      <h5 className=\"font-semibold\">Access Knowledge Base</h5>\n                      <p className=\"text-gray-600 text-sm\">Click \"Knowledge Base\" in sidebar navigation</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-3\">\n                    <div className=\"bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">2</div>\n                    <div>\n                      <h5 className=\"font-semibold\">Search for Solutions</h5>\n                      <p className=\"text-gray-600 text-sm\">Use search bar or browse by category</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-3\">\n                    <div className=\"bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">3</div>\n                    <div>\n                      <h5 className=\"font-semibold\">Apply Solution</h5>\n                      <p className=\"text-gray-600 text-sm\">Follow step-by-step instructions and test resolution</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Support and Resources */}\n      <section id=\"support-resources\" className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold mb-6 text-gray-900\">7. Support and Resources</h2>\n        \n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Frequently Asked Questions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <h5 className=\"font-semibold text-sm\">How do I reset my password?</h5>\n                  <p className=\"text-gray-600 text-sm\">Contact your system administrator for password reset requests.</p>\n                </div>\n                <div>\n                  <h5 className=\"font-semibold text-sm\">How long for ticket response?</h5>\n                  <p className=\"text-gray-600 text-sm\">High: 2-4 hours, Medium: 8-24 hours, Low: 1-3 business days</p>\n                </div>\n                <div>\n                  <h5 className=\"font-semibold text-sm\">How to escalate urgent issues?</h5>\n                  <p className=\"text-gray-600 text-sm\">Create ticket with \"High\" priority or contact support directly</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Contact Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm\">\n                <div><strong>System Administrator:</strong> Contact your IT department</div>\n                <div><strong>Technical Support:</strong> Available through ticket system</div>\n                <div><strong>Emergency Support:</strong> Contact your organization's IT emergency line</div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Separator className=\"my-8\" />\n      <div className=\"text-center text-sm text-gray-500\">\n        <p>This documentation is designed to be easily converted to PDF format for distribution.</p>\n        <p className=\"mt-2\">For additional assistance, please contact your system administrator.</p>\n        <div className=\"mt-4 flex justify-center gap-4\">\n          <span>Document Version: 1.0</span>\n          <span>‚Ä¢</span>\n          <span>Last Updated: January 15, 2025</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18080},"client/src/pages/home-page.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardFooter, \n  CardHeader, \n  CardTitle \n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  AlertCircle,\n  Clock,\n  CheckCircle,\n  BarChart,\n  ArrowRight,\n  ArrowUpRight,\n  ArrowDownRight,\n  ExternalLink\n} from \"lucide-react\";\nimport { DashboardStats, Faq, Ticket, User } from \"@shared/schema\";\n\nexport default function HomePage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { user } = useAuth();\n  const isMobile = window.innerWidth < 768;\n\n  // Fetch dashboard stats\n  const { data: stats, isLoading: isLoadingStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard\"],\n    enabled: !!user,\n  });\n\n  // Fetch recent tickets\n  const { data: tickets, isLoading: isLoadingTickets } = useQuery<Ticket[]>({\n    queryKey: [\"/api/tickets\"],\n    enabled: !!user,\n  });\n\n  // Fetch popular FAQs\n  const { data: faqs, isLoading: isLoadingFaqs } = useQuery<Faq[]>({\n    queryKey: [\"/api/faqs\"],\n    enabled: !!user,\n  });\n\n  // Get status color based on ticket status\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-red-100 text-red-800\";\n      case \"in-progress\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Dashboard\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n            {/* Open Tickets */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"text-sm text-gray-500 font-medium\">Open Tickets</p>\n                    {isLoadingStats ? (\n                      <Skeleton className=\"h-8 w-12 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-semibold mt-1\">{stats?.openTickets || 0}</p>\n                    )}\n                  </div>\n                  <div className=\"bg-red-100 p-2 rounded-full text-red-600\">\n                    <AlertCircle size={20} />\n                  </div>\n                </div>\n                <div className=\"mt-2 text-sm text-gray-600\">\n                  <span className=\"text-red-600\">+5%</span> from last week\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* In Progress Tickets */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"text-sm text-gray-500 font-medium\">In Progress</p>\n                    {isLoadingStats ? (\n                      <Skeleton className=\"h-8 w-12 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-semibold mt-1\">{stats?.inProgressTickets || 0}</p>\n                    )}\n                  </div>\n                  <div className=\"bg-yellow-100 p-2 rounded-full text-yellow-600\">\n                    <Clock size={20} />\n                  </div>\n                </div>\n                <div className=\"mt-2 text-sm text-gray-600\">\n                  <span className=\"text-yellow-600\">2 tickets</span> pending response\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recently Resolved */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"text-sm text-gray-500 font-medium\">Recently Resolved</p>\n                    {isLoadingStats ? (\n                      <Skeleton className=\"h-8 w-12 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-semibold mt-1\">{stats?.resolvedTickets || 0}</p>\n                    )}\n                  </div>\n                  <div className=\"bg-green-100 p-2 rounded-full text-green-600\">\n                    <CheckCircle size={20} />\n                  </div>\n                </div>\n                <div className=\"mt-2 text-sm text-gray-600\">\n                  <span className=\"text-green-600\">-10%</span> from last week\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Average Response Time */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"text-sm text-gray-500 font-medium\">Avg. Response Time</p>\n                    {isLoadingStats ? (\n                      <Skeleton className=\"h-8 w-20 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-semibold mt-1\">{stats?.avgResponseTime || \"N/A\"}</p>\n                    )}\n                  </div>\n                  <div className=\"bg-blue-100 p-2 rounded-full text-blue-600\">\n                    <BarChart size={20} />\n                  </div>\n                </div>\n                <div className=\"mt-2 text-sm text-gray-600\">\n                  <span className=\"text-green-600\">+15%</span> improvement\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Tickets */}\n          <Card className=\"mb-6\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle>Recent Tickets</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoadingTickets ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-12 w-full\" />\n                    </div>\n                  ))}\n                </div>\n              ) : tickets && tickets.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">ID</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Title</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Priority</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Created</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {tickets.slice(0, 5).map((ticket) => (\n                        <tr key={ticket.id} className=\"hover:bg-gray-50 cursor-pointer\" onClick={() => window.location.href = `/tickets/${ticket.id}`}>\n                          <td className=\"px-4 py-3 whitespace-nowrap\">\n                            <span className=\"text-sm font-mono text-gray-900\">TKT-{ticket.id.toString().padStart(4, '0')}</span>\n                          </td>\n                          <td className=\"px-4 py-3 whitespace-nowrap\">\n                            <span className=\"text-sm font-medium text-blue-600\">{ticket.title}</span>\n                          </td>\n                          <td className=\"px-4 py-3 whitespace-nowrap\">\n                            <Badge variant=\"outline\" className={getStatusColor(ticket.status)}>\n                              {ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1)}\n                            </Badge>\n                          </td>\n                          <td className=\"px-4 py-3 whitespace-nowrap\">\n                            <span className={`text-sm capitalize ${\n                              ticket.priority === 'high' ? 'text-red-600' : \n                              ticket.priority === 'medium' ? 'text-yellow-600' : \n                              'text-green-600'\n                            }`}>{ticket.priority}</span>\n                          </td>\n                          <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                            {formatDate(ticket.createdAt)}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">No tickets found</p>\n                  <Button asChild className=\"mt-4\">\n                    <Link href=\"/tickets/new\">Create your first ticket</Link>\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n            <CardFooter className=\"bg-gray-50 flex justify-end py-3\">\n              <Button variant=\"ghost\" size=\"sm\" asChild>\n                <Link href=\"/tickets\">\n                  View all tickets\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Link>\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Additional Dashboard Elements */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* FAQ Most Viewed */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle>Popular FAQs</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingFaqs ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(3)].map((_, i) => (\n                      <Skeleton key={i} className=\"h-16 w-full\" />\n                    ))}\n                  </div>\n                ) : faqs && faqs.length > 0 ? (\n                  <ul className=\"space-y-3\">\n                    {faqs.slice(0, 3).map((faq) => (\n                      <li key={faq.id} className=\"pb-3 border-b border-gray-100\">\n                        <Link href={`/knowledge-base?faq=${faq.id}`}>\n                          <a className=\"block hover:text-primary\">\n                            <h3 className=\"text-sm font-medium\">{faq.question}</h3>\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              {/* Category name would come from a join query, we're simplifying here */}\n                              {faq.categoryId ? `Category #${faq.categoryId}` : 'General'}\n                            </p>\n                          </a>\n                        </Link>\n                      </li>\n                    ))}\n                  </ul>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-gray-500\">No FAQs available</p>\n                  </div>\n                )}\n              </CardContent>\n              <CardFooter className=\"bg-gray-50 flex justify-end py-3\">\n                <Button variant=\"ghost\" size=\"sm\" asChild>\n                  <Link href=\"/knowledge-base\">\n                    View knowledge base\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Link>\n                </Button>\n              </CardFooter>\n            </Card>\n\n            {/* SLA Status */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle>SLA Compliance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingStats ? (\n                  <div className=\"space-y-3\">\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-8 w-full\" />\n                    <Skeleton className=\"h-24 w-full\" />\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <span className=\"text-sm font-medium text-gray-700\">Overall SLA Compliance</span>\n                      <span className=\"text-sm font-semibold text-green-600\">{stats?.slaComplianceRate || \"N/A\"}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2.5 mb-6\">\n                      <div className=\"bg-green-600 h-2.5 rounded-full\" style={{ width: stats?.slaComplianceRate || \"0%\" }}></div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"text-sm text-gray-500\">Response Time</span>\n                        <p className=\"text-lg font-semibold\">30 min</p>\n                        <div className=\"flex items-center mt-1\">\n                          <span className=\"text-xs text-green-600\">96% met</span>\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-sm text-gray-500\">Resolution Time</span>\n                        <p className=\"text-lg font-semibold\">4 hours</p>\n                        <div className=\"flex items-center mt-1\">\n                          <span className=\"text-xs text-yellow-600\">87% met</span>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14657},"client/src/pages/knowledge-base-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport FAQItem from \"@/components/knowledge-base/faq-item\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Search, \n  Wifi, \n  Monitor, \n  Mail, \n  Lock, \n  HelpCircle, \n  ArrowRight, \n  Share2,\n  ThumbsUp\n} from \"lucide-react\";\nimport { Category, Faq } from \"@shared/schema\";\n\nexport default function KnowledgeBasePage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [location, navigate] = useLocation();\n  const { user } = useAuth();\n  const isMobile = window.innerWidth < 768;\n\n  // Parse query params for initial search or FAQ highlight\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const q = urlParams.get(\"q\");\n    const faqId = urlParams.get(\"faq\");\n    \n    if (q) {\n      setSearchQuery(q);\n    }\n    \n    if (faqId) {\n      // Logic to scroll to specific FAQ would go here\n      const element = document.getElementById(`faq-${faqId}`);\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  }, []);\n\n  // Fetch categories\n  const { data: categories, isLoading: isLoadingCategories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Fetch FAQs\n  const { data: faqs, isLoading: isLoadingFaqs } = useQuery<Faq[]>({\n    queryKey: [\"/api/faqs\", selectedCategory],\n    queryFn: async ({ queryKey }) => {\n      const categoryId = queryKey[1];\n      if (categoryId) {\n        const res = await fetch(`/api/faqs?categoryId=${categoryId}`, {\n          credentials: \"include\",\n        });\n        if (!res.ok) throw new Error(\"Failed to fetch FAQs\");\n        return res.json();\n      } else {\n        const res = await fetch(\"/api/faqs\", {\n          credentials: \"include\",\n        });\n        if (!res.ok) throw new Error(\"Failed to fetch FAQs\");\n        return res.json();\n      }\n    },\n  });\n\n  // Filter FAQs by search query\n  const filteredFaqs = faqs?.filter(faq => \n    faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    faq.answer.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Get parent categories\n  const parentCategories = categories?.filter(c => !c.parentId);\n\n  // Get category name by ID\n  const getCategoryNameById = (id: number | null) => {\n    if (!id) return \"General\";\n    const category = categories?.find(c => c.id === id);\n    return category ? category.name : \"Unknown\";\n  };\n\n  // Get category icon\n  const getCategoryIcon = (categoryName: string) => {\n    switch (categoryName.toLowerCase()) {\n      case \"network issues\":\n        return <Wifi className=\"h-6 w-6\" />;\n      case \"hardware\":\n        return <Monitor className=\"h-6 w-6\" />;\n      case \"email services\":\n        return <Mail className=\"h-6 w-6\" />;\n      case \"account & password\":\n        return <Lock className=\"h-6 w-6\" />;\n      default:\n        return <HelpCircle className=\"h-6 w-6\" />;\n    }\n  };\n\n  // Handle category selection\n  const handleCategorySelect = (categoryId: string) => {\n    setSelectedCategory(categoryId);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Knowledge Base\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          {/* Search and Categories */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center mb-6\">\n                <h2 className=\"text-2xl font-semibold text-gray-800 mb-2\">Knowledge Base & FAQs</h2>\n                <p className=\"text-gray-500\">Find answers to common questions and issues</p>\n              </div>\n              <div className=\"relative max-w-2xl mx-auto mb-8\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search for help articles...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 py-6 text-base\"\n                />\n                <Search className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n              </div>\n\n              {/* Categories */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n                {isLoadingCategories ? (\n                  <>\n                    <Skeleton className=\"h-24 w-full\" />\n                    <Skeleton className=\"h-24 w-full\" />\n                    <Skeleton className=\"h-24 w-full\" />\n                    <Skeleton className=\"h-24 w-full\" />\n                  </>\n                ) : (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      className={`h-24 flex flex-col items-center justify-center text-center ${selectedCategory === \"\" ? \"border-primary border-2\" : \"\"}`}\n                      onClick={() => handleCategorySelect(\"\")}\n                    >\n                      <HelpCircle className={`h-8 w-8 mb-2 ${selectedCategory === \"\" ? \"text-primary\" : \"text-gray-500\"}`} />\n                      <span className=\"font-medium\">All Categories</span>\n                    </Button>\n\n                    {parentCategories?.map((category) => (\n                      <Button\n                        key={category.id}\n                        variant=\"outline\"\n                        className={`h-24 flex flex-col items-center justify-center text-center ${selectedCategory === category.id.toString() ? \"border-primary border-2\" : \"\"}`}\n                        onClick={() => handleCategorySelect(category.id.toString())}\n                      >\n                        <div className={`mb-2 ${selectedCategory === category.id.toString() ? \"text-primary\" : \"text-gray-500\"}`}>\n                          {getCategoryIcon(category.name)}\n                        </div>\n                        <span className=\"font-medium\">{category.name}</span>\n                      </Button>\n                    ))}\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* FAQ Articles */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {selectedCategory\n                  ? `${getCategoryNameById(parseInt(selectedCategory))} FAQs`\n                  : searchQuery\n                  ? \"Search Results\"\n                  : \"Popular Articles\"}\n              </CardTitle>\n              {searchQuery && (\n                <CardDescription>\n                  {filteredFaqs?.length === 0\n                    ? \"No results found\"\n                    : `Found ${filteredFaqs?.length} results for \"${searchQuery}\"`}\n                </CardDescription>\n              )}\n            </CardHeader>\n            <CardContent>\n              {isLoadingFaqs ? (\n                <div className=\"space-y-6\">\n                  <Skeleton className=\"h-24 w-full\" />\n                  <Skeleton className=\"h-24 w-full\" />\n                  <Skeleton className=\"h-24 w-full\" />\n                </div>\n              ) : filteredFaqs && filteredFaqs.length > 0 ? (\n                <div className=\"space-y-6\">\n                  {filteredFaqs.map((faq) => (\n                    <FAQItem\n                      key={faq.id}\n                      faq={faq}\n                      categoryName={getCategoryNameById(faq.categoryId)}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <HelpCircle className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-lg font-medium text-gray-900\">No FAQs found</h3>\n                  <p className=\"mt-1 text-gray-500\">\n                    {searchQuery\n                      ? \"Try adjusting your search terms\"\n                      : selectedCategory\n                      ? \"No FAQs available in this category yet\"\n                      : \"No FAQs available\"}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Can't find what you're looking for? */}\n          <div className=\"bg-blue-50 rounded-lg p-6 text-center mt-6\">\n            <h3 className=\"text-lg font-semibold text-blue-700 mb-2\">Can't find what you're looking for?</h3>\n            <p className=\"text-gray-700 mb-4\">Our support team is ready to help with your specific issue</p>\n            <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n              <Button asChild>\n                <Link href=\"/tickets/new\">Create a Support Ticket</Link>\n              </Button>\n              <Button variant=\"outline\" onClick={() => {\n                // Open chatbot (this would be implemented with a global state or context)\n                const chatbotToggle = document.querySelector('[aria-label=\"Chat with support\"]');\n                if (chatbotToggle && chatbotToggle instanceof HTMLElement) {\n                  chatbotToggle.click();\n                }\n              }}>\n                Chat with Support Bot\n              </Button>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10149},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/ticket-create-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ArrowLeft, Upload, FilePlus } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Category, User } from \"@shared/schema\";\n\n// Form validation schema\nconst createTicketSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\").max(100, \"Title cannot exceed 100 characters\"),\n  description: z.string().min(20, \"Description must be at least 20 characters\"),\n  categoryId: z.string().min(1, \"Please select a category\"),\n  subcategoryId: z.string().optional(),\n  priority: z.enum([\"low\", \"medium\", \"high\"]).default(\"medium\"),\n  supportType: z.enum([\"remote\", \"telephonic\", \"onsite_visit\", \"other\"]).default(\"remote\"),\n  contactEmail: z.string().email(\"Please enter a valid email address\"),\n  contactName: z.string().min(2, \"Contact name must be at least 2 characters\"),\n  contactPhone: z.string().optional(),\n  contactDepartment: z.string().optional(),\n  dueDate: z.string().optional(),\n});\n\ntype CreateTicketFormValues = z.infer<typeof createTicketSchema>;\n\nexport default function TicketCreatePage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>(\"\");\n  const [file, setFile] = useState<File | null>(null);\n  const [searchAgent, setSearchAgent] = useState(\"\");\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isMobile = window.innerWidth < 768;\n\n  // Initialize form\n  const form = useForm<CreateTicketFormValues>({\n    resolver: zodResolver(createTicketSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      categoryId: \"\",\n      subcategoryId: \"\",\n      priority: \"medium\",\n      supportType: \"remote\",\n      contactEmail: \"\",\n      contactName: \"\",\n      contactPhone: \"\",\n      contactDepartment: \"\",\n      dueDate: \"\",\n    },\n  });\n\n  // Fetch categories\n  const { data: categories, isLoading: isLoadingCategories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    enabled: !!user,\n  });\n\n  // Get subcategories for selected category\n  const { data: subcategories, isLoading: isLoadingSubcategories } = useQuery<Category[]>({\n    queryKey: [`/api/categories/${selectedCategoryId}/subcategories`],\n    enabled: !!selectedCategoryId && selectedCategoryId !== \"\",\n  });\n\n  // Fetch all users (agents and admins)\n  const { data: allUsers, isLoading: isLoadingUsers } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: !!user,\n  });\n\n  // Filter agents and admins for contact field\n  const agentUsers = allUsers?.filter(u => u.role === \"agent\" || u.role === \"admin\") || [];\n  \n  // Filter agents based on search\n  const filteredAgents = agentUsers.filter(agent => \n    agent.name.toLowerCase().includes(searchAgent.toLowerCase()) ||\n    agent.email.toLowerCase().includes(searchAgent.toLowerCase())\n  );\n\n  // Auto-fetch user details by email\n  const handleEmailSelection = async (email: string) => {\n    const selectedAgent = agentUsers.find(agent => agent.email === email);\n    if (selectedAgent) {\n      form.setValue(\"contactName\", selectedAgent.name);\n      form.setValue(\"contactPhone\", selectedAgent.contactNumber || \"\");\n      form.setValue(\"contactDepartment\", selectedAgent.department || \"\");\n    }\n  };\n\n  // Create ticket mutation\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: CreateTicketFormValues) => {\n      const res = await apiRequest(\"POST\", \"/api/tickets\", {\n        title: data.title,\n        description: data.description,\n        categoryId: parseInt(data.categoryId),\n        subcategoryId: data.subcategoryId ? parseInt(data.subcategoryId) : undefined,\n        priority: data.priority,\n        supportType: data.supportType,\n        contactEmail: data.contactEmail,\n        contactName: data.contactName,\n        contactPhone: data.contactPhone,\n        contactDepartment: data.contactDepartment,\n        dueDate: data.dueDate ? new Date(data.dueDate).toISOString() : undefined,\n        status: \"open\",\n      });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Ticket created successfully\",\n        description: `Ticket #${data.id} has been submitted.`,\n      });\n      navigate(`/tickets/${data.id}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to create ticket\",\n        description: error.message || \"An error occurred while creating the ticket.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle form submission\n  const onSubmit = (data: CreateTicketFormValues) => {\n    createTicketMutation.mutate(data);\n  };\n\n  // Handle category change\n  const handleCategoryChange = (value: string) => {\n    setSelectedCategoryId(value);\n    form.setValue(\"categoryId\", value);\n    form.setValue(\"subcategoryId\", \"\");\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Create Ticket\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          <div className=\"flex items-center mb-6\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"mr-2\" onClick={() => navigate(\"/tickets\")}>\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <h2 className=\"text-xl font-semibold text-gray-800\">Create New Support Ticket</h2>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>New Support Request</CardTitle>\n              <CardDescription>\n                Provide detailed information about your issue for faster resolution\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Ticket Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Brief summary of the issue\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          Be concise and specific about the problem\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-5\">\n                    <FormField\n                      control={form.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select\n                            onValueChange={(value) => handleCategoryChange(value)}\n                            value={field.value}\n                            disabled={isLoadingCategories}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select Category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories?.filter(c => !c.parentId).map((category) => (\n                                <SelectItem key={category.id} value={category.id.toString()}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"subcategoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Subcategory</FormLabel>\n                          <Select\n                            onValueChange={field.onChange}\n                            value={field.value}\n                            disabled={isLoadingSubcategories || !selectedCategoryId}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select Subcategory\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {subcategories?.map((subcategory) => (\n                                <SelectItem key={subcategory.id} value={subcategory.id.toString()}>\n                                  {subcategory.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"priority\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Priority</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select Priority\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"low\">Low</SelectItem>\n                              <SelectItem value=\"medium\">Medium</SelectItem>\n                              <SelectItem value=\"high\">High</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5\">\n                    <FormField\n                      control={form.control}\n                      name=\"supportType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Support Type</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select Support Type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"remote\">Remote</SelectItem>\n                              <SelectItem value=\"telephonic\">Telephonic</SelectItem>\n                              <SelectItem value=\"onsite_visit\">Onsite Visit</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"dueDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Due Date (Optional)</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium text-gray-800\">Contact Information</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5\">\n                      <FormField\n                        control={form.control}\n                        name=\"contactEmail\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Contact Email</FormLabel>\n                            <Select\n                              onValueChange={(value) => {\n                                field.onChange(value);\n                                handleEmailSelection(value);\n                              }}\n                              value={field.value}\n                              disabled={isLoadingUsers}\n                            >\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select Agent or Enter Email\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <div className=\"p-2\">\n                                  <Input\n                                    placeholder=\"Search by name or email...\"\n                                    value={searchAgent}\n                                    onChange={(e) => setSearchAgent(e.target.value)}\n                                    className=\"mb-2\"\n                                  />\n                                </div>\n                                {filteredAgents.length > 0 ? (\n                                  filteredAgents.map((agent) => (\n                                    <SelectItem key={agent.id} value={agent.email}>\n                                      {agent.name} ({agent.email})\n                                    </SelectItem>\n                                  ))\n                                ) : (\n                                  <SelectItem value=\"\" disabled>\n                                    No agents found\n                                  </SelectItem>\n                                )}\n                              </SelectContent>\n                            </Select>\n                            <FormDescription>\n                              Select an agent from the list or manually enter details below\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"contactName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Contact Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter contact name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"contactPhone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Contact Phone (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter phone number\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"contactDepartment\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Contact Department (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter department\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            rows={6}\n                            placeholder=\"Detailed description of the issue you're experiencing...\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Include relevant details like error messages, when it started, and what you've tried\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"border border-dashed border-gray-300 rounded-md p-6\">\n                    <div className=\"text-center\">\n                      <FilePlus className=\"mx-auto h-12 w-12 text-gray-400\" />\n                      <div className=\"mt-4\">\n                        <label\n                          htmlFor=\"file-upload\"\n                          className=\"relative cursor-pointer rounded-md bg-white font-medium text-primary hover:text-primary-dark focus-within:outline-none\"\n                        >\n                          <span>Upload a file</span>\n                          <input\n                            id=\"file-upload\"\n                            name=\"file-upload\"\n                            type=\"file\"\n                            className=\"sr-only\"\n                            onChange={e => {\n                              if (e.target.files && e.target.files[0]) {\n                                setFile(e.target.files[0]);\n                              }\n                            }}\n                            accept=\".png,.jpg,.jpeg,.pdf,.doc,.docx\"\n                          />\n                        </label>\n                        <p className=\"pl-1 text-sm text-gray-500\">or drag and drop</p>\n                        {file && (\n                          <p className=\"text-xs text-green-600 mt-2\">\n                            Selected file: {file.name}\n                          </p>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-gray-500 mt-2\">\n                        PNG, JPG, PDF, DOC up to 10MB\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-end space-x-3 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => navigate(\"/tickets\")}\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createTicketMutation.isPending}\n                    >\n                      {createTicketMutation.isPending ? \"Creating...\" : \"Create Ticket\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21231},"client/src/pages/ticket-detail-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport CommentThread from \"@/components/tickets/comment-thread\";\nimport { \n  Card, \n  CardContent, \n  CardHeader, \n  CardTitle,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  ArrowLeft,\n  Calendar,\n  Tag,\n  User,\n  Clock,\n  CheckCircle,\n  ExternalLink\n} from \"lucide-react\";\nimport { TicketWithRelations } from \"@shared/schema\";\n\nexport default function TicketDetailPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const [isInternalNote, setIsInternalNote] = useState(false);\n  const [location, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isMobile = window.innerWidth < 768;\n\n  // Extract ticket ID from URL\n  const ticketId = location.split(\"/\").pop();\n  \n  // Fetch ticket details with relations\n  const { \n    data: ticket, \n    isLoading: isLoadingTicket,\n    error \n  } = useQuery<TicketWithRelations>({\n    queryKey: [`/api/tickets/${ticketId}`],\n    enabled: !!user && !!ticketId,\n  });\n\n  // Fetch users for assignment dropdown\n  const { data: users } = useQuery<any[]>({\n    queryKey: [\"/api/users\"],\n    enabled: !!user,\n  });\n\n  // Mutation for updating ticket status\n  const updateTicketMutation = useMutation({\n    mutationFn: async ({ status, assignedToId, priority }: { status?: string; assignedToId?: number | null; priority?: string }) => {\n      const res = await apiRequest(\"PATCH\", `/api/tickets/${ticketId}`, {\n        status,\n        assignedToId,\n        priority\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/tickets/${ticketId}`] });\n      toast({\n        title: \"Ticket updated\",\n        description: \"The ticket has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to update ticket\",\n        description: error.message || \"An error occurred while updating the ticket.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation for adding a comment\n  const addCommentMutation = useMutation({\n    mutationFn: async ({ ticketId, content, isInternal }: { ticketId: number; content: string; isInternal: boolean }) => {\n      const res = await apiRequest(\"POST\", `/api/tickets/${ticketId}/comments`, {\n        content,\n        isInternal\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/tickets/${ticketId}`] });\n      setCommentText(\"\");\n      setIsInternalNote(false);\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been added to the ticket.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to add comment\",\n        description: error.message || \"An error occurred while adding your comment.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle status change\n  const handleStatusChange = (status: string) => {\n    updateTicketMutation.mutate({ status });\n  };\n\n  // Handle priority change\n  const handlePriorityChange = (priority: string) => {\n    updateTicketMutation.mutate({ priority });\n  };\n\n  // Handle assignment change\n  const handleAssignmentChange = (agentId: string) => {\n    updateTicketMutation.mutate({ \n      assignedToId: agentId === \"unassigned\" ? null : parseInt(agentId)\n    });\n  };\n\n  // Handle comment submission\n  const handleSubmitComment = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!commentText.trim() || !ticket) return;\n\n    addCommentMutation.mutate({\n      ticketId: ticket.id,\n      content: commentText,\n      isInternal: isInternalNote\n    });\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  // Handle error state\n  useEffect(() => {\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load ticket details. Please try again.\",\n        variant: \"destructive\",\n      });\n      navigate(\"/tickets\");\n    }\n  }, [error, navigate, toast]);\n\n  // Get status color\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-red-100 text-red-800\";\n      case \"in-progress\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  // Get priority color\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"text-red-600\";\n      case \"medium\":\n        return \"text-yellow-600\";\n      case \"low\":\n        return \"text-green-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Ticket Details\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          {/* Ticket header */}\n          <div className=\"flex justify-between items-start mb-6\">\n            <div>\n              <div className=\"flex items-center mb-1\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-2\" onClick={() => navigate(\"/tickets\")}>\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n                <h2 className=\"text-xl font-semibold text-gray-800\">\n                  {isLoadingTicket ? (\n                    <Skeleton className=\"h-7 w-48\" />\n                  ) : (\n                    <>\n                      <span className=\"font-mono text-gray-500 text-base mr-2\">TKT-{ticket?.id.toString().padStart(4, '0')}</span>\n                      <span>{ticket?.title}</span>\n                    </>\n                  )}\n                </h2>\n              </div>\n              <div className=\"flex items-center flex-wrap text-sm text-gray-500 ml-9\">\n                {isLoadingTicket ? (\n                  <Skeleton className=\"h-5 w-64\" />\n                ) : (\n                  <>\n                    <span className=\"mr-3\">Created {formatDate(ticket?.createdAt || \"\")}</span>\n                    <span className=\"mr-3\">By {ticket?.createdBy.name}</span>\n                    <Badge variant=\"outline\" className={getStatusColor(ticket?.status || \"\")}>\n                      {ticket?.status.charAt(0).toUpperCase() + ticket?.status.slice(1)}\n                    </Badge>\n                    <Badge variant=\"outline\" className={`ml-2 capitalize ${getPriorityColor(ticket?.priority || \"\")}`}>\n                      {ticket?.priority} Priority\n                    </Badge>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Ticket content and metadata */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Comments and updates */}\n            <div className=\"md:col-span-2 space-y-6\">\n              {/* Ticket description */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  {isLoadingTicket ? (\n                    <div className=\"space-y-4\">\n                      <Skeleton className=\"h-6 w-32\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-2/3\" />\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div className=\"flex items-start\">\n                          <div className=\"bg-gray-200 w-10 h-10 rounded-full flex items-center justify-center mr-3\">\n                            <User className=\"h-5 w-5 text-gray-500\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-medium text-gray-800\">{ticket?.createdBy.name}</h3>\n                            <p className=\"text-sm text-gray-500\">{formatDate(ticket?.createdAt || \"\")}</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-gray-700 mb-4\">{ticket?.description}</div>\n                      <div className=\"flex items-center text-sm text-gray-500\">\n                        <Badge variant=\"outline\" className=\"mr-2\">{ticket?.category.name}</Badge>\n                        {ticket?.subcategory && (\n                          <Badge variant=\"outline\">{ticket?.subcategory.name}</Badge>\n                        )}\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Comments */}\n              {isLoadingTicket ? (\n                <div className=\"space-y-4\">\n                  <Skeleton className=\"h-40 w-full\" />\n                  <Skeleton className=\"h-40 w-full\" />\n                </div>\n              ) : ticket?.comments && ticket.comments.length > 0 ? (\n                <CommentThread \n                  comments={ticket.comments} \n                  currentUserRole={user?.role || \"user\"} \n                />\n              ) : (\n                <Card>\n                  <CardContent className=\"p-6 text-center text-gray-500\">\n                    No comments yet.\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Add comment */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Add a Comment</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmitComment}>\n                    <Textarea\n                      rows={4}\n                      placeholder=\"Type your message here...\"\n                      value={commentText}\n                      onChange={(e) => setCommentText(e.target.value)}\n                      className=\"mb-4\"\n                    />\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        {(user?.role === \"admin\" || user?.role === \"agent\") && (\n                          <div className=\"flex items-center\">\n                            <Checkbox \n                              id=\"internal-note\" \n                              checked={isInternalNote} \n                              onCheckedChange={(checked) => setIsInternalNote(checked === true)}\n                              className=\"mr-2\" \n                            />\n                            <label htmlFor=\"internal-note\" className=\"text-sm text-gray-700 cursor-pointer\">\n                              Make this an internal note\n                            </label>\n                          </div>\n                        )}\n                      </div>\n                      <Button \n                        type=\"submit\" \n                        disabled={!commentText.trim() || addCommentMutation.isPending}\n                      >\n                        {addCommentMutation.isPending ? \"Sending...\" : \"Send Comment\"}\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Ticket metadata */}\n            <div className=\"space-y-6\">\n              {/* Status panel */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-lg\">Ticket Status</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-4 space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Current Status</label>\n                    <Select \n                      value={ticket?.status || \"open\"} \n                      onValueChange={handleStatusChange}\n                      disabled={isLoadingTicket || updateTicketMutation.isPending}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"open\">Open</SelectItem>\n                        <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"closed\">Closed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {(user?.role === \"admin\" || user?.role === \"agent\") && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Assigned To</label>\n                      <Select \n                        value={ticket?.assignedToId?.toString() || \"unassigned\"} \n                        onValueChange={handleAssignmentChange}\n                        disabled={isLoadingTicket || updateTicketMutation.isPending}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Unassigned\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                          {users?.filter(u => u.role === \"agent\" || u.role === \"admin\").map((user) => (\n                            <SelectItem key={user.id} value={user.id.toString()}>\n                              {user.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Priority</label>\n                    <Select \n                      value={ticket?.priority || \"medium\"} \n                      onValueChange={handlePriorityChange}\n                      disabled={isLoadingTicket || updateTicketMutation.isPending}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select priority\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Details panel */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-lg\">Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-4\">\n                  {isLoadingTicket ? (\n                    <div className=\"space-y-4\">\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                    </div>\n                  ) : (\n                    <ul className=\"space-y-3\">\n                      <li className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-500 flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2\" /> Created\n                        </span>\n                        <span className=\"text-sm text-gray-800\">{formatDate(ticket?.createdAt || \"\")}</span>\n                      </li>\n                      <li className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-500 flex items-center\">\n                          <Tag className=\"h-4 w-4 mr-2\" /> Category\n                        </span>\n                        <span className=\"text-sm text-gray-800\">{ticket?.category.name}</span>\n                      </li>\n                      {ticket?.subcategory && (\n                        <li className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-500 flex items-center\">\n                            <Tag className=\"h-4 w-4 mr-2\" /> Subcategory\n                          </span>\n                          <span className=\"text-sm text-gray-800\">{ticket.subcategory.name}</span>\n                        </li>\n                      )}\n                      <li className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-500 flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-2\" /> Last Updated\n                        </span>\n                        <span className=\"text-sm text-gray-800\">\n                          {ticket?.comments && ticket.comments.length > 0\n                            ? formatDate(ticket.comments[ticket.comments.length - 1].createdAt)\n                            : formatDate(ticket?.updatedAt || \"\")}\n                        </span>\n                      </li>\n                      {ticket?.assignedTo && (\n                        <li className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-500 flex items-center\">\n                            <User className=\"h-4 w-4 mr-2\" /> Assigned To\n                          </span>\n                          <span className=\"text-sm text-gray-800\">{ticket.assignedTo.name}</span>\n                        </li>\n                      )}\n                    </ul>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Related articles */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-lg\">Related Articles</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-4\">\n                  {isLoadingTicket ? (\n                    <div className=\"space-y-3\">\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                    </div>\n                  ) : (\n                    <ul className=\"space-y-2\">\n                      {ticket?.category.name === \"Network Issues\" && (\n                        <li>\n                          <Link href=\"/knowledge-base?q=wifi\">\n                            <a className=\"text-blue-600 hover:text-blue-800 text-sm flex items-center\">\n                              <ExternalLink className=\"h-3 w-3 mr-2\" /> \n                              How to troubleshoot WiFi connectivity issues\n                            </a>\n                          </Link>\n                        </li>\n                      )}\n                      {ticket?.category.name === \"Email Services\" && (\n                        <li>\n                          <Link href=\"/knowledge-base?q=outlook\">\n                            <a className=\"text-blue-600 hover:text-blue-800 text-sm flex items-center\">\n                              <ExternalLink className=\"h-3 w-3 mr-2\" /> \n                              Common Outlook syncing problems and solutions\n                            </a>\n                          </Link>\n                        </li>\n                      )}\n                      {ticket?.category.name === \"Hardware\" && ticket?.subcategory?.name === \"Printer\" && (\n                        <li>\n                          <Link href=\"/knowledge-base?q=printer\">\n                            <a className=\"text-blue-600 hover:text-blue-800 text-sm flex items-center\">\n                              <ExternalLink className=\"h-3 w-3 mr-2\" /> \n                              Resolving printer error messages and paper jams\n                            </a>\n                          </Link>\n                        </li>\n                      )}\n                      {!((ticket?.category.name === \"Network Issues\") || \n                         (ticket?.category.name === \"Email Services\") || \n                         (ticket?.category.name === \"Hardware\" && ticket?.subcategory?.name === \"Printer\")) && (\n                        <li className=\"text-gray-500 text-sm\">\n                          No related articles found.\n                        </li>\n                      )}\n                    </ul>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21791},"client/src/pages/ticket-edit-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { \n  Card, \n  CardContent, \n  CardHeader, \n  CardTitle,\n  CardDescription\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { ArrowLeft, Save } from \"lucide-react\";\nimport { TicketWithRelations, Category, User } from \"@shared/schema\";\n\n// Form validation schema\nconst ticketEditSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\").max(100, \"Title cannot exceed 100 characters\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n  status: z.enum([\"open\", \"in-progress\", \"resolved\", \"closed\"]),\n  categoryId: z.string().min(1, \"Please select a category\"),\n  assignedToId: z.string().optional(),\n});\n\ntype TicketEditFormValues = z.infer<typeof ticketEditSchema>;\n\nexport default function TicketEditPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [location, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isMobile = window.innerWidth < 768;\n\n  // Extract ticket ID from URL\n  const ticketId = location.split(\"/\")[2]; // /tickets/{id}/edit\n\n  // Initialize form\n  const form = useForm<TicketEditFormValues>({\n    resolver: zodResolver(ticketEditSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      priority: \"medium\",\n      status: \"open\",\n      categoryId: \"\",\n      assignedToId: \"\",\n    },\n  });\n\n  // Fetch ticket details\n  const { \n    data: ticket, \n    isLoading: isLoadingTicket,\n    error \n  } = useQuery<TicketWithRelations>({\n    queryKey: [`/api/tickets/${ticketId}`],\n    enabled: !!user && !!ticketId,\n  });\n\n  // Fetch categories\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    enabled: !!user,\n  });\n\n  // Fetch users (for assignment)\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: !!user && (user.role === \"admin\" || user.role === \"agent\"),\n  });\n\n  // Populate form when ticket data is loaded\n  useEffect(() => {\n    if (ticket) {\n      form.setValue(\"title\", ticket.title);\n      form.setValue(\"description\", ticket.description);\n      form.setValue(\"priority\", ticket.priority);\n      form.setValue(\"status\", ticket.status);\n      form.setValue(\"categoryId\", ticket.categoryId?.toString() || \"\");\n      form.setValue(\"assignedToId\", ticket.assignedToId?.toString() || \"unassigned\");\n    }\n  }, [ticket, form]);\n\n  // Update ticket mutation\n  const updateTicketMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"PUT\", `/api/tickets/${ticketId}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/tickets/${ticketId}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      toast({\n        title: \"Ticket updated\",\n        description: \"The ticket has been updated successfully.\",\n      });\n      navigate(`/tickets/${ticketId}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update ticket\",\n        description: error.message || \"An error occurred while updating the ticket.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle form submission\n  const onSubmit = (data: TicketEditFormValues) => {\n    const formData = {\n      title: data.title,\n      description: data.description,\n      priority: data.priority,\n      status: data.status,\n      categoryId: parseInt(data.categoryId),\n      assignedToId: data.assignedToId && data.assignedToId !== \"unassigned\" ? parseInt(data.assignedToId) : null,\n    };\n\n    updateTicketMutation.mutate(formData);\n  };\n\n  const handleBack = () => {\n    navigate(`/tickets/${ticketId}`);\n  };\n\n  // Check permissions\n  const canEdit = () => {\n    if (!user || !ticket) return false;\n    return (\n      user.role === \"admin\" ||\n      user.role === \"agent\" ||\n      ticket.createdById === user.id\n    );\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Edit Ticket\" />\n          <main className=\"flex-1 overflow-auto p-6\">\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Ticket Not Found</h3>\n                <p className=\"text-gray-500 mb-6\">The ticket you're looking for doesn't exist or you don't have permission to view it.</p>\n                <Button onClick={() => navigate(\"/tickets\")}>\n                  Back to Tickets\n                </Button>\n              </CardContent>\n            </Card>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  if (!canEdit() && ticket) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Edit Ticket\" />\n          <main className=\"flex-1 overflow-auto p-6\">\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Access Denied</h3>\n                <p className=\"text-gray-500 mb-6\">You don't have permission to edit this ticket.</p>\n                <Button onClick={() => navigate(`/tickets/${ticketId}`)}>\n                  View Ticket\n                </Button>\n              </CardContent>\n            </Card>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Edit Ticket\" />\n\n        <main className=\"flex-1 overflow-auto p-4 md:p-6\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            {/* Back Button */}\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" onClick={handleBack} className=\"flex items-center\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Ticket\n              </Button>\n            </div>\n\n            {isLoadingTicket ? (\n              <Card>\n                <CardHeader>\n                  <Skeleton className=\"h-8 w-64\" />\n                  <Skeleton className=\"h-4 w-48\" />\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Skeleton className=\"h-10 w-full\" />\n                  <Skeleton className=\"h-32 w-full\" />\n                  <Skeleton className=\"h-10 w-48\" />\n                  <Skeleton className=\"h-10 w-48\" />\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Edit Ticket #{ticket?.id}</CardTitle>\n                  <CardDescription>\n                    Update the ticket details below. Changes will be reflected immediately.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        {/* Title */}\n                        <div className=\"md:col-span-2\">\n                          <FormField\n                            control={form.control}\n                            name=\"title\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Title *</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Brief description of the issue\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        {/* Priority */}\n                        <FormField\n                          control={form.control}\n                          name=\"priority\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Priority *</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select priority\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"low\">Low</SelectItem>\n                                  <SelectItem value=\"medium\">Medium</SelectItem>\n                                  <SelectItem value=\"high\">High</SelectItem>\n                                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        {/* Status */}\n                        <FormField\n                          control={form.control}\n                          name=\"status\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Status *</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select status\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"open\">Open</SelectItem>\n                                  <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                                  <SelectItem value=\"closed\">Closed</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        {/* Category */}\n                        <FormField\n                          control={form.control}\n                          name=\"categoryId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Category *</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select category\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {categories?.map((category) => (\n                                    <SelectItem key={category.id} value={category.id.toString()}>\n                                      {category.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        {/* Assigned To */}\n                        {(user?.role === \"admin\" || user?.role === \"agent\") && (\n                          <FormField\n                            control={form.control}\n                            name=\"assignedToId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Assigned To</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select assignee\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                                    {users?.filter(u => u.role === \"admin\" || u.role === \"agent\").map((assignUser) => (\n                                      <SelectItem key={assignUser.id} value={assignUser.id.toString()}>\n                                        {assignUser.name || assignUser.username}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        )}\n                      </div>\n\n                      {/* Description */}\n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description *</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Detailed description of the issue, steps to reproduce, error messages, etc.\"\n                                className=\"min-h-32\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Submit Button */}\n                      <div className=\"flex justify-end space-x-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={handleBack}\n                          disabled={updateTicketMutation.isPending}\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={updateTicketMutation.isPending}\n                          data-testid=\"button-save-ticket\"\n                        >\n                          <Save className=\"h-4 w-4 mr-2\" />\n                          {updateTicketMutation.isPending ? \"Updating...\" : \"Update Ticket\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":16853},"client/src/pages/tickets-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { \n  Card, \n  CardContent\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Plus, \n  Search,\n  Filter,\n  Eye,\n  MessageSquare\n} from \"lucide-react\";\nimport { Category, Ticket } from \"@shared/schema\";\n\ninterface TicketFilters {\n  status?: string;\n  priority?: string;\n  categoryId?: number;\n}\n\nexport default function TicketsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [filters, setFilters] = useState<TicketFilters>({});\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { user } = useAuth();\n  const isMobile = window.innerWidth < 768;\n\n  // Fetch user tickets\n  const { data: tickets, isLoading: isLoadingTickets } = useQuery<any[]>({\n    queryKey: [\"/api/tickets/my\"],\n    enabled: !!user,\n  });\n\n  // Fetch categories for filters\n  const { data: categories, isLoading: isLoadingCategories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    enabled: !!user,\n  });\n\n  // Get status color based on ticket status\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-red-100 text-red-800\";\n      case \"in-progress\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  // Get priority color\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"text-red-600\";\n      case \"medium\":\n        return \"text-yellow-600\";\n      case \"low\":\n        return \"text-green-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  // Apply filters\n  const handleApplyFilters = () => {\n    // For this version, we're filtering client-side\n    // In a production app, this would typically call an API with the filters\n    console.log(\"Applied filters:\", filters);\n  };\n\n  // Reset filters\n  const handleResetFilters = () => {\n    setFilters({});\n  };\n\n  // Filter tickets based on search query and filters\n  const filteredTickets = tickets?.filter(ticket => {\n    let matchesSearch = true;\n    let matchesFilters = true;\n\n    // Apply search query\n    if (searchQuery) {\n      matchesSearch = \n        ticket.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        ticket.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        `TKT-${ticket.id.toString().padStart(4, '0')}`.includes(searchQuery);\n    }\n\n    // Apply status filter\n    if (filters.status && ticket.status !== filters.status) {\n      matchesFilters = false;\n    }\n\n    // Apply priority filter\n    if (filters.priority && ticket.priority !== filters.priority) {\n      matchesFilters = false;\n    }\n\n    // Apply category filter\n    if (filters.categoryId && ticket.categoryId !== filters.categoryId) {\n      matchesFilters = false;\n    }\n\n    return matchesSearch && matchesFilters;\n  });\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"My Tickets\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          {/* Actions Header */}\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6\">\n            <div className=\"mb-4 md:mb-0\">\n              <h2 className=\"text-lg font-semibold text-gray-800\">My Support Tickets</h2>\n              <p className=\"text-sm text-gray-500\">View and manage your support requests</p>\n            </div>\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search tickets...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n                <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n              </div>\n              <Button asChild>\n                <Link href=\"/tickets/new\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  New Ticket\n                </Link>\n              </Button>\n            </div>\n          </div>\n\n          {/* Filters */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-wrap gap-4\">\n                <div className=\"w-full sm:w-auto\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n                  <Select \n                    value={filters.status || \"all-statuses\"} \n                    onValueChange={(value) => setFilters({...filters, status: value !== \"all-statuses\" ? value : undefined})}\n                  >\n                    <SelectTrigger className=\"w-full sm:w-40\">\n                      <SelectValue placeholder=\"All Statuses\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-statuses\">All Statuses</SelectItem>\n                      <SelectItem value=\"open\">Open</SelectItem>\n                      <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"w-full sm:w-auto\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Priority</label>\n                  <Select \n                    value={filters.priority || \"all-priorities\"} \n                    onValueChange={(value) => setFilters({...filters, priority: value !== \"all-priorities\" ? value : undefined})}\n                  >\n                    <SelectTrigger className=\"w-full sm:w-40\">\n                      <SelectValue placeholder=\"All Priorities\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-priorities\">All Priorities</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"w-full sm:w-auto\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Category</label>\n                  <Select \n                    value={filters.categoryId?.toString() || \"all-categories\"} \n                    onValueChange={(value) => setFilters({\n                      ...filters, \n                      categoryId: value !== \"all-categories\" ? parseInt(value) : undefined\n                    })}\n                  >\n                    <SelectTrigger className=\"w-full sm:w-48\">\n                      <SelectValue placeholder=\"All Categories\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-categories\">All Categories</SelectItem>\n                      {categories?.filter(c => !c.parentId).map((category) => (\n                        <SelectItem key={category.id} value={category.id.toString()}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"w-full sm:w-auto ml-auto flex items-end gap-2\">\n                  <Button variant=\"outline\" onClick={handleResetFilters}>\n                    Reset\n                  </Button>\n                  <Button variant=\"outline\" onClick={handleApplyFilters}>\n                    <Filter className=\"mr-2 h-4 w-4\" />\n                    Apply Filters\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tickets List */}\n          <Card>\n            {isLoadingTickets ? (\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, index) => (\n                    <Skeleton key={index} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              </CardContent>\n            ) : filteredTickets && filteredTickets.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">ID</th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Title</th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Priority</th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Created</th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {filteredTickets.map((ticket) => (\n                      <tr key={ticket.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\n                          <span className=\"text-sm font-mono text-gray-900\">TKT-{ticket.id.toString().padStart(4, '0')}</span>\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\n                          <Link href={`/tickets/${ticket.id}`}>\n                            <a className=\"text-sm font-medium text-blue-600 hover:text-blue-800\">\n                              {ticket.title}\n                            </a>\n                          </Link>\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\n                          <Badge variant=\"outline\" className={getStatusColor(ticket.status)}>\n                            {ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1)}\n                          </Badge>\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\n                          <span className={`text-sm capitalize ${getPriorityColor(ticket.priority)}`}>\n                            {ticket.priority}\n                          </span>\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {formatDate(ticket.createdAt)}\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium\">\n                          <div className=\"flex space-x-2\">\n                            <Button variant=\"ghost\" size=\"icon\" asChild>\n                              <Link href={`/tickets/${ticket.id}`}>\n                                <Eye className=\"h-4 w-4 text-blue-600\" />\n                              </Link>\n                            </Button>\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <MessageSquare className=\"h-4 w-4 text-gray-600\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No tickets found</h3>\n                <p className=\"text-gray-500 mb-6\">\n                  {filters.status || filters.priority || filters.categoryId || searchQuery\n                    ? \"Try adjusting your filters or search query\"\n                    : \"You haven't created any support tickets yet\"}\n                </p>\n                <Button asChild>\n                  <Link href=\"/tickets/new\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create your first ticket\n                  </Link>\n                </Button>\n              </CardContent>\n            )}\n\n            {/* Pagination (simplified) */}\n            {filteredTickets && filteredTickets.length > 0 && (\n              <div className=\"px-4 py-3 flex items-center justify-between border-t border-gray-200\">\n                <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-700\">\n                      Showing <span className=\"font-medium\">1</span> to{\" \"}\n                      <span className=\"font-medium\">{filteredTickets.length}</span> of{\" \"}\n                      <span className=\"font-medium\">{filteredTickets.length}</span> results\n                    </p>\n                  </div>\n                  {/* Pagination controls would go here in a real app */}\n                </div>\n              </div>\n            )}\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14498},"client/src/components/chatbot/chatbot.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { X, MessageSquare, Send, User, Bot } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  useQuery, \n  useMutation, \n  useQueryClient \n} from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\ninterface ChatbotProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ntype Message = {\n  id: number;\n  userId: number;\n  message: string;\n  isFromBot: boolean;\n  createdAt: string;\n};\n\nexport default function Chatbot({ isOpen, onClose }: ChatbotProps) {\n  const [message, setMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch chat history\n  const { data: chatMessages, isLoading } = useQuery<Message[]>({\n    queryKey: [\"/api/chat\"],\n    queryFn: undefined, // Uses the default fetcher\n    enabled: isOpen && !!user, // Only fetch when chatbot is open and user is logged in\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (newMessage: string) => {\n      const res = await apiRequest(\"POST\", \"/api/chat\", { message: newMessage });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData([\"/api/chat\"], (oldData: Message[] = []) => [...oldData, ...data]);\n      scrollToBottom();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    scrollToBottom();\n  }, [chatMessages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim() || !user) return;\n\n    sendMessageMutation.mutate(message);\n    setMessage(\"\");\n  };\n\n  // Chatbot toggle button (fixed position)\n  const ChatbotToggle = () => (\n    <Button\n      className=\"fixed bottom-4 right-4 z-40 rounded-full w-14 h-14 shadow-lg p-0\"\n      onClick={isOpen ? onClose : undefined}\n    >\n      <MessageSquare size={24} />\n    </Button>\n  );\n\n  if (!isOpen) {\n    return <ChatbotToggle />;\n  }\n\n  return (\n    <>\n      <ChatbotToggle />\n\n      <div className=\"fixed bottom-20 right-4 z-40 w-80 shadow-lg\">\n        <Card className=\"flex flex-col h-96 max-h-96\">\n          <CardHeader className=\"bg-primary text-white py-3 px-4 flex flex-row items-center justify-between space-y-0\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <Bot className=\"h-5 w-5 mr-2\" />\n              IT Support Assistant\n            </CardTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white hover:bg-primary-foreground/10 h-8 w-8\"\n              onClick={onClose}\n            >\n              <X size={16} />\n            </Button>\n          </CardHeader>\n\n          <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {isLoading ? (\n              <div className=\"flex justify-center items-center h-full\">\n                <p className=\"text-sm text-gray-500\">Loading messages...</p>\n              </div>\n            ) : !chatMessages || chatMessages.length === 0 ? (\n              <div className=\"flex flex-col justify-center items-center h-full text-center space-y-2\">\n                <Bot className=\"h-10 w-10 text-gray-400\" />\n                <p className=\"text-sm text-gray-500\">Hello! I'm your IT support assistant.</p>\n                <p className=\"text-sm text-gray-500\">How can I help you today?</p>\n              </div>\n            ) : (\n              chatMessages.map((msg, index) => (\n                <div\n                  key={msg.id || index}\n                  className={`flex ${msg.isFromBot ? \"justify-start\" : \"justify-end\"}`}\n                >\n                  <div\n                    className={`max-w-[80%] rounded-lg px-3 py-2 ${\n                      msg.isFromBot\n                        ? \"bg-gray-100 text-gray-800\"\n                        : \"bg-primary text-white\"\n                    }`}\n                  >\n                    <div className=\"flex items-center mb-1\">\n                      {msg.isFromBot ? (\n                        <Bot className=\"h-3 w-3 mr-1\" />\n                      ) : (\n                        <User className=\"h-3 w-3 mr-1\" />\n                      )}\n                      <span className=\"text-xs\">\n                        {msg.isFromBot ? \"Assistant\" : \"You\"}\n                      </span>\n                    </div>\n                    <p className=\"text-sm break-words\">{msg.message}</p>\n                  </div>\n                </div>\n              ))\n            )}\n            <div ref={messagesEndRef} />\n          </CardContent>\n\n          <CardFooter className=\"border-t p-3\">\n            <form onSubmit={handleSendMessage} className=\"flex w-full gap-2\">\n              <Input\n                placeholder=\"Type your message...\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                className=\"flex-1\"\n                disabled={sendMessageMutation.isPending || !user}\n              />\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                disabled={sendMessageMutation.isPending || !message.trim() || !user}\n              >\n                <Send size={16} />\n              </Button>\n            </form>\n          </CardFooter>\n        </Card>\n\n        {!user && (\n          <div className=\"mt-2 text-xs text-center p-2 bg-white rounded shadow-md\">\n            <p className=\"text-gray-700\">\n              Please <Link href=\"/auth\"><a className=\"text-primary hover:underline\">login</a></Link> to chat with support\n            </p>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":6253},"client/src/components/dashboard/stats-overview.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { DashboardStats } from \"@shared/schema\";\nimport {\n  AlertCircle,\n  Clock,\n  CheckCircle,\n  BarChart\n} from \"lucide-react\";\n\ninterface StatsOverviewProps {\n  stats?: DashboardStats;\n  isLoading: boolean;\n}\n\nexport default function StatsOverview({ stats, isLoading }: StatsOverviewProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n      {/* Open Tickets */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <p className=\"text-sm text-gray-500 font-medium\">Open Tickets</p>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-12 mt-1\" />\n              ) : (\n                <p className=\"text-2xl font-semibold mt-1\">{stats?.openTickets || 0}</p>\n              )}\n            </div>\n            <div className=\"bg-red-100 p-2 rounded-full text-red-600\">\n              <AlertCircle size={20} />\n            </div>\n          </div>\n          <div className=\"mt-2 text-sm text-gray-600\">\n            <span className=\"text-red-600\">+5%</span> from last week\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* In Progress Tickets */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <p className=\"text-sm text-gray-500 font-medium\">In Progress</p>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-12 mt-1\" />\n              ) : (\n                <p className=\"text-2xl font-semibold mt-1\">{stats?.inProgressTickets || 0}</p>\n              )}\n            </div>\n            <div className=\"bg-yellow-100 p-2 rounded-full text-yellow-600\">\n              <Clock size={20} />\n            </div>\n          </div>\n          <div className=\"mt-2 text-sm text-gray-600\">\n            <span className=\"text-yellow-600\">2 tickets</span> pending response\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recently Resolved */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <p className=\"text-sm text-gray-500 font-medium\">Recently Resolved</p>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-12 mt-1\" />\n              ) : (\n                <p className=\"text-2xl font-semibold mt-1\">{stats?.resolvedTickets || 0}</p>\n              )}\n            </div>\n            <div className=\"bg-green-100 p-2 rounded-full text-green-600\">\n              <CheckCircle size={20} />\n            </div>\n          </div>\n          <div className=\"mt-2 text-sm text-gray-600\">\n            <span className=\"text-green-600\">-10%</span> from last week\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Average Response Time */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <p className=\"text-sm text-gray-500 font-medium\">Avg. Response Time</p>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-20 mt-1\" />\n              ) : (\n                <p className=\"text-2xl font-semibold mt-1\">{stats?.avgResponseTime || \"N/A\"}</p>\n              )}\n            </div>\n            <div className=\"bg-blue-100 p-2 rounded-full text-blue-600\">\n              <BarChart size={20} />\n            </div>\n          </div>\n          <div className=\"mt-2 text-sm text-gray-600\">\n            <span className=\"text-green-600\">+15%</span> improvement\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3749},"client/src/components/knowledge-base/faq-item.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Faq } from \"@shared/schema\";\nimport { ThumbsUp, Share2 } from \"lucide-react\";\n\ninterface FAQItemProps {\n  faq: Faq;\n  categoryName: string;\n}\n\nexport default function FAQItem({ faq, categoryName }: FAQItemProps) {\n  const [expanded, setExpanded] = useState(false);\n  const [helpful, setHelpful] = useState(false);\n\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n  };\n\n  const markHelpful = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setHelpful(true);\n  };\n\n  const shareItem = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    \n    // Create a shareable URL for this FAQ\n    const shareUrl = `${window.location.origin}/knowledge-base?faq=${faq.id}`;\n    \n    // Check if the browser supports the Web Share API\n    if (navigator.share) {\n      navigator.share({\n        title: faq.question,\n        text: `Check out this FAQ: ${faq.question}`,\n        url: shareUrl,\n      }).catch(err => {\n        console.error('Error sharing:', err);\n      });\n    } else {\n      // Fallback to copying the URL to clipboard\n      navigator.clipboard.writeText(shareUrl).then(() => {\n        alert('Link copied to clipboard');\n      }).catch(err => {\n        console.error('Error copying to clipboard:', err);\n      });\n    }\n  };\n\n  return (\n    <Card \n      id={`faq-${faq.id}`}\n      className={`transition-all duration-200 ${expanded ? \"border-blue-200\" : \"\"}`}\n      onClick={toggleExpand}\n    >\n      <CardHeader className=\"py-4 px-6 cursor-pointer\">\n        <CardTitle className=\"text-lg flex justify-between items-start\">\n          <span>{faq.question}</span>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"ml-2 h-7 w-7 p-0 rotate-0 transform transition-transform duration-200\"\n            aria-label={expanded ? \"Collapse\" : \"Expand\"}\n          >\n            <svg \n              width=\"15\" \n              height=\"15\" \n              viewBox=\"0 0 15 15\" \n              fill=\"none\" \n              xmlns=\"http://www.w3.org/2000/svg\"\n              className={`transition-transform ${expanded ? \"rotate-180\" : \"rotate-0\"}`}\n            >\n              <path d=\"M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z\" fill=\"currentColor\" fillRule=\"evenodd\" clipRule=\"evenodd\"></path>\n            </svg>\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className={`px-6 overflow-hidden transition-all duration-300 ${expanded ? \"pb-4\" : \"max-h-0 p-0\"}`}>\n        <div className={`transition-opacity duration-200 ${expanded ? \"opacity-100\" : \"opacity-0\"}`}>\n          <p className=\"text-gray-700 mb-4 whitespace-pre-wrap\">{faq.answer}</p>\n          <div className=\"flex items-center justify-between\">\n            <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-800 hover:bg-gray-100\">\n              {categoryName}\n            </Badge>\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className={`flex items-center gap-1 ${helpful ? 'text-green-600' : 'text-gray-600'}`}\n                onClick={markHelpful}\n                disabled={helpful}\n              >\n                <ThumbsUp className=\"h-4 w-4\" />\n                <span>{helpful ? 'Helpful' : 'Mark as helpful'}</span>\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"flex items-center gap-1 text-blue-600\"\n                onClick={shareItem}\n              >\n                <Share2 className=\"h-4 w-4\" />\n                <span>Share</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4196},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, Bell, Search, MessageSquare } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport Chatbot from \"@/components/chatbot/chatbot\";\n\ninterface HeaderProps {\n  toggleSidebar: () => void;\n  title: string;\n}\n\nexport default function Header({ toggleSidebar, title }: HeaderProps) {\n  const [isChatbotOpen, setIsChatbotOpen] = useState(false);\n  const [location] = useLocation();\n\n  // Helper to determine page title from URL (if not provided)\n  const getPageTitle = (): string => {\n    if (title) return title;\n\n    if (location === \"/\") return \"Dashboard\";\n    if (location.startsWith(\"/tickets\")) {\n      if (location === \"/tickets\") return \"My Tickets\";\n      if (location.includes(\"/new\")) return \"Create Ticket\";\n      return \"Ticket Details\";\n    }\n    if (location === \"/knowledge-base\") return \"Knowledge Base\";\n    if (location === \"/all-tickets\") return \"All Tickets\";\n    if (location === \"/admin/users\") return \"User Management\";\n    if (location === \"/admin/categories\") return \"Categories\";\n    if (location === \"/admin/reports\") return \"Reports\";\n    if (location === \"/admin/settings\") return \"Settings\";\n\n    return \"IT Helpdesk\";\n  };\n\n  const toggleChatbot = () => {\n    setIsChatbotOpen(!isChatbotOpen);\n  };\n\n  return (\n    <>\n      <header className=\"bg-white border-b h-16 flex items-center justify-between px-4 md:px-6 sticky top-0 z-10\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleSidebar}\n            className=\"md:hidden text-gray-600\"\n            aria-label=\"Toggle menu\"\n          >\n            <Menu size={20} />\n          </Button>\n          <div className=\"ml-2 md:ml-0\">\n            <h1 className=\"text-xl font-semibold text-gray-800\">{getPageTitle()}</h1>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-gray-600 hover:text-gray-900\"\n            aria-label=\"Search\"\n          >\n            <Search size={20} />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-gray-600 hover:text-gray-900 relative\"\n            aria-label=\"Notifications\"\n          >\n            <Bell size={20} />\n            <span className=\"absolute top-1 right-1 bg-red-400 rounded-full w-2 h-2\"></span>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-gray-600 hover:text-gray-900\"\n            onClick={toggleChatbot}\n            aria-label=\"Chat with support\"\n          >\n            <MessageSquare size={20} />\n          </Button>\n        </div>\n      </header>\n\n      <Chatbot isOpen={isChatbotOpen} onClose={() => setIsChatbotOpen(false)} />\n    </>\n  );\n}\n","size_bytes":2942},"client/src/components/layout/sidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Headset, \n  Home, \n  TicketCheck, \n  Book, \n  FileText,\n  ListChecks, \n  Users, \n  Tags, \n  BarChart, \n  Settings, \n  Menu, \n  X \n} from \"lucide-react\";\n\ninterface SidebarProps {\n  isMobile?: boolean;\n  isOpen?: boolean;\n  onClose?: () => void;\n}\n\nexport default function Sidebar({ isMobile = false, isOpen = true, onClose }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Close sidebar on location change in mobile view\n  useEffect(() => {\n    if (isMobile && isOpen && onClose) {\n      onClose();\n    }\n  }, [location, isMobile, isOpen, onClose]);\n\n  // Check if route is active\n  const isRouteActive = (route: string) => {\n    if (route === \"/\") return location === \"/\";\n    return location.startsWith(route);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"bg-white h-full fixed inset-y-0 left-0 z-30 w-64 shadow-lg flex flex-col\",\n        \"md:relative md:translate-x-0\",\n        isMobile && \"transform transition-transform duration-300 ease-in-out\",\n        isMobile && (isOpen ? \"translate-x-0\" : \"-translate-x-full\")\n      )}\n    >\n      {/* Logo & Close Button */}\n      <div className=\"flex items-center justify-between px-4 h-16 bg-primary text-white\">\n        <Link href=\"/\" className=\"flex items-center space-x-2\">\n          <Headset size={24} />\n          <span className=\"font-semibold text-lg\">IT Helpdesk</span>\n        </Link>\n        {isMobile && (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"text-white hover:bg-primary-foreground/10\"\n          >\n            <X size={20} />\n          </Button>\n        )}\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"bg-gray-200 w-10 h-10 rounded-full flex items-center justify-center\">\n            <Users className=\"h-5 w-5 text-gray-600\" />\n          </div>\n          <div>\n            <p className=\"font-medium\">{user?.name || \"Guest\"}</p>\n            <p className=\"text-sm text-gray-500 capitalize\">{user?.role || \"Not logged in\"}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 overflow-y-auto p-2\">\n        <div className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider px-3 py-2\">\n          Main\n        </div>\n        <SidebarLink href=\"/\" active={isRouteActive(\"/\")} icon={<Home size={18} />} label=\"Dashboard\" />\n        <SidebarLink\n          href=\"/tickets\"\n          active={isRouteActive(\"/tickets\")}\n          icon={<TicketCheck size={18} />}\n          label=\"My Tickets\"\n        />\n        <SidebarLink\n          href=\"/knowledge-base\"\n          active={isRouteActive(\"/knowledge-base\")}\n          icon={<Book size={18} />}\n          label=\"Knowledge Base\"\n        />\n        <SidebarLink\n          href=\"/documentation\"\n          active={isRouteActive(\"/documentation\")}\n          icon={<FileText size={18} />}\n          label=\"Documentation\"\n        />\n\n        {/* Support Staff Section (Now visible to all users) */}\n        <>\n          <div className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider px-3 pb-1 pt-4\">\n            Support\n          </div>\n          <SidebarLink\n            href=\"/all-tickets\"\n            active={isRouteActive(\"/all-tickets\")}\n            icon={<ListChecks size={18} />}\n            label=\"All Tickets\"\n          />\n        </>\n\n        {/* Admin Section (Now visible to all users) */}\n        <>\n          <div className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider px-3 pb-1 pt-4\">\n            Administration\n          </div>\n          <SidebarLink\n            href=\"/admin/users\"\n            active={isRouteActive(\"/admin/users\")}\n            icon={<Users size={18} />}\n            label=\"Users\"\n          />\n          <SidebarLink\n            href=\"/admin/categories\"\n            active={isRouteActive(\"/admin/categories\")}\n            icon={<Tags size={18} />}\n            label=\"Categories\"\n          />\n          <SidebarLink\n            href=\"/admin/reports\"\n            active={isRouteActive(\"/admin/reports\")}\n            icon={<BarChart size={18} />}\n            label=\"Reports\"\n          />\n        </>\n\n        {/* Personal Section */}\n        <>\n          <div className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider px-3 pb-1 pt-4\">\n            Personal\n          </div>\n          <SidebarLink\n            href=\"/settings\"\n            active={isRouteActive(\"/settings\")}\n            icon={<Settings size={18} />}\n            label=\"Settings\"\n          />\n        </>\n      </nav>\n\n      {/* Logout */}\n      <div className=\"p-4 border-t\">\n        <Button\n          variant=\"outline\"\n          className=\"w-full justify-start\"\n          onClick={handleLogout}\n          disabled={logoutMutation.isPending}\n        >\n          {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface SidebarLinkProps {\n  href: string;\n  label: string;\n  icon: React.ReactNode;\n  active: boolean;\n}\n\nfunction SidebarLink({ href, label, icon, active }: SidebarLinkProps) {\n  return (\n    <Link href={href}>\n      <div\n        className={cn(\n          \"flex items-center px-3 py-2 text-sm font-medium rounded-md mb-1 transition-colors cursor-pointer\",\n          active\n            ? \"bg-primary text-white\"\n            : \"text-gray-700 hover:bg-gray-100\"\n        )}\n      >\n        <span className=\"mr-2\">{icon}</span>\n        {label}\n      </div>\n    </Link>\n  );\n}\n","size_bytes":5948},"client/src/components/tickets/comment-thread.tsx":{"content":"import { User, Shield, MessageSquare } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface CommentThreadProps {\n  comments: {\n    id: number;\n    content: string;\n    createdAt: string;\n    isInternal: boolean;\n    user: {\n      id: number;\n      name: string;\n      role: string;\n    };\n  }[];\n  currentUserRole: string;\n}\n\nexport default function CommentThread({ comments, currentUserRole }: CommentThreadProps) {\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  // Filter out internal comments if user is not admin or agent\n  const visibleComments = comments.filter(comment => \n    !comment.isInternal || \n    currentUserRole === \"admin\" || \n    currentUserRole === \"agent\"\n  );\n\n  if (visibleComments.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-6 text-center text-gray-500\">\n        No comments yet.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {visibleComments.map((comment, index) => (\n        <div \n          key={comment.id} \n          className={`bg-white rounded-lg shadow p-6 ${comment.user.role === 'agent' || comment.user.role === 'admin' ? 'bg-blue-50' : ''}`}\n          id={`comment-${comment.id}`}\n        >\n          <div className=\"flex justify-between items-start mb-4\">\n            <div className=\"flex items-start\">\n              <div className={`w-10 h-10 rounded-full flex items-center justify-center mr-3 ${\n                comment.user.role === 'agent' || comment.user.role === 'admin' \n                  ? 'bg-blue-100 text-blue-600' \n                  : 'bg-gray-200 text-gray-500'\n              }`}>\n                {comment.user.role === 'agent' || comment.user.role === 'admin' \n                  ? <Shield className=\"h-5 w-5\" /> \n                  : <User className=\"h-5 w-5\" />}\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-800\">{comment.user.name}</h3>\n                <div className=\"flex items-center\">\n                  <p className=\"text-sm text-gray-500\">{formatDate(comment.createdAt)}</p>\n                  {(comment.user.role === 'agent' || comment.user.role === 'admin') && (\n                    <Badge className=\"ml-2 bg-blue-100 text-blue-800 hover:bg-blue-100\">\n                      {comment.user.role === 'agent' ? 'Support Agent' : 'Admin'}\n                    </Badge>\n                  )}\n                  {comment.isInternal && (\n                    <Badge variant=\"outline\" className=\"ml-2 bg-gray-800 text-white hover:bg-gray-800\">\n                      Internal Note\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-gray-700 whitespace-pre-wrap\">\n            {comment.content}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2918},"client/src/components/tickets/ticket-filters.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Filter } from \"lucide-react\";\nimport { Category, User } from \"@shared/schema\";\n\ninterface FilterState {\n  status?: string;\n  priority?: string;\n  categoryId?: number;\n  assignedToId?: number;\n  companyName?: string;\n}\n\ninterface TicketFiltersProps {\n  categories: Category[];\n  users?: User[];\n  tickets?: any[];\n  showAssigneeFilter?: boolean;\n  onFilterChange: (filters: FilterState) => void;\n}\n\nexport default function TicketFilters({\n  categories,\n  users = [],\n  tickets = [],\n  showAssigneeFilter = false,\n  onFilterChange,\n}: TicketFiltersProps) {\n  const [filters, setFilters] = useState<FilterState>({\n    assignedToId: showAssigneeFilter ? 0 : undefined  // Default to unassigned when showing assignee filter\n  });\n\n  // Apply filters\n  const handleApplyFilters = () => {\n    onFilterChange(filters);\n  };\n\n  // Reset filters\n  const handleResetFilters = () => {\n    const resetFilters = {\n      status: undefined,\n      priority: undefined,\n      categoryId: undefined,\n      assignedToId: showAssigneeFilter ? 0 : undefined  // Keep unassigned default when resetting\n    };\n    setFilters(resetFilters);\n    onFilterChange(resetFilters);\n  };\n\n  // Update parent when filters change (dynamic filtering)\n  useEffect(() => {\n    onFilterChange(filters);\n  }, [filters, onFilterChange]);\n\n  // Get parent categories (no parentId)\n  const parentCategories = categories.filter(c => !c.parentId);\n\n  // Get unique company names from tickets\n  const uniqueCompanies = Array.from(new Set(tickets.map(t => t.createdBy?.companyName).filter(Boolean)));\n\n  return (\n    <Card className=\"mb-6\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex flex-wrap gap-4\">\n          <div className=\"w-full sm:w-auto\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n            <Select \n              value={filters.status || \"all-statuses\"} \n              onValueChange={(value) => setFilters({...filters, status: value !== \"all-statuses\" ? value : undefined})}\n            >\n              <SelectTrigger className=\"w-full sm:w-40\">\n                <SelectValue placeholder=\"All Statuses\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all-statuses\">All Statuses</SelectItem>\n                <SelectItem value=\"open\">Open</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"closed\">Closed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"w-full sm:w-auto\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Priority</label>\n            <Select \n              value={filters.priority || \"all-priorities\"} \n              onValueChange={(value) => setFilters({...filters, priority: value !== \"all-priorities\" ? value : undefined})}\n            >\n              <SelectTrigger className=\"w-full sm:w-40\">\n                <SelectValue placeholder=\"All Priorities\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all-priorities\">All Priorities</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"w-full sm:w-auto\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Category</label>\n            <Select \n              value={filters.categoryId?.toString() || \"all-categories\"} \n              onValueChange={(value) => setFilters({\n                ...filters, \n                categoryId: value !== \"all-categories\" ? parseInt(value) : undefined\n              })}\n            >\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all-categories\">All Categories</SelectItem>\n                {parentCategories.map((category) => (\n                  <SelectItem key={category.id} value={category.id.toString()}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {showAssigneeFilter && (\n            <div className=\"w-full sm:w-auto\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Assigned To</label>\n              <Select \n                value={filters.assignedToId === 0 ? \"unassigned\" : (filters.assignedToId?.toString() || \"all-agents\")} \n                onValueChange={(value) => {\n                  if (value === \"unassigned\") {\n                    setFilters({...filters, assignedToId: 0});\n                  } else if (value === \"all-agents\") {\n                    setFilters({...filters, assignedToId: undefined});\n                  } else {\n                    setFilters({...filters, assignedToId: parseInt(value)});\n                  }\n                }}\n              >\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Select Assignment\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-agents\">All Agents</SelectItem>\n                  <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                  {users.filter(u => u.role === \"agent\" || u.role === \"admin\").map((user) => (\n                    <SelectItem key={user.id} value={user.id.toString()}>\n                      {user.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Company Name Filter */}\n          <div className=\"w-full sm:w-auto\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Company Name</label>\n            <Select \n              value={filters.companyName || \"all-companies\"} \n              onValueChange={(value) => setFilters({\n                ...filters, \n                companyName: value !== \"all-companies\" ? value : undefined\n              })}\n            >\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"All Companies\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all-companies\">All Companies</SelectItem>\n                {uniqueCompanies.map((company) => (\n                  <SelectItem key={company} value={company}>\n                    {company}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"w-full sm:w-auto ml-auto flex items-end gap-2\">\n            <Button variant=\"outline\" onClick={handleResetFilters}>\n              Reset Filters\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7351},"client/src/components/tickets/ticket-list.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  MessageSquare,\n  MoreVertical,\n  Eye,\n  Edit,\n  Trash2,\n  UserCheck,\n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertCircle\n} from \"lucide-react\";\nimport { Ticket, User } from \"@shared/schema\";\n\ninterface TicketWithExtras extends Ticket {\n  category?: any;\n  subcategory?: any;\n  createdBy?: User;\n  assignedTo?: User;\n  commentCount?: number;\n}\n\ninterface TicketListProps {\n  tickets: TicketWithExtras[];\n  showCreatedBy?: boolean;\n  showAssignedTo?: boolean;\n  isOwner?: boolean;\n}\n\nexport default function TicketList({\n  tickets,\n  showCreatedBy = false,\n  showAssignedTo = false,\n  isOwner = false\n}: TicketListProps) {\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [ticketToDelete, setTicketToDelete] = useState<TicketWithExtras | null>(null);\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Delete ticket mutation\n  const deleteTicketMutation = useMutation({\n    mutationFn: async (ticketId: number) => {\n      await apiRequest(\"DELETE\", `/api/tickets/${ticketId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      toast({\n        title: \"Ticket deleted\",\n        description: \"The ticket has been deleted successfully.\",\n      });\n      setShowDeleteDialog(false);\n      setTicketToDelete(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to delete ticket\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update ticket status mutation\n  const updateTicketMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      await apiRequest(\"PATCH\", `/api/tickets/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      toast({\n        title: \"Ticket updated\",\n        description: \"The ticket status has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update ticket\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Assign ticket to self mutation\n  const assignTicketMutation = useMutation({\n    mutationFn: async (ticketId: number) => {\n      await apiRequest(\"PATCH\", `/api/tickets/${ticketId}`, {\n        assignedToId: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      toast({\n        title: \"Ticket assigned\",\n        description: \"The ticket has been assigned to you.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to assign ticket\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"low\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"high\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"urgent\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-red-100 text-red-800\";\n      case \"in-progress\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case \"in-progress\":\n        return <Clock className=\"h-4 w-4\" />;\n      case \"resolved\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"closed\":\n        return <XCircle className=\"h-4 w-4\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatTicketId = (id: number) => {\n    return `TKT-${id.toString().padStart(4, '0')}`;\n  };\n\n  const handleViewTicket = (ticketId: number) => {\n    navigate(`/tickets/${ticketId}`);\n  };\n\n  const handleEditTicket = (ticketId: number) => {\n    navigate(`/tickets/${ticketId}/edit`);\n  };\n\n  const handleDeleteTicket = (ticket: TicketWithExtras) => {\n    setTicketToDelete(ticket);\n    setShowDeleteDialog(true);\n  };\n\n  const confirmDeleteTicket = () => {\n    if (ticketToDelete) {\n      deleteTicketMutation.mutate(ticketToDelete.id);\n    }\n  };\n\n  const handleStatusChange = (ticketId: number, newStatus: string) => {\n    updateTicketMutation.mutate({ id: ticketId, status: newStatus });\n  };\n\n  const handleAssignToSelf = (ticketId: number) => {\n    assignTicketMutation.mutate(ticketId);\n  };\n\n  const canEditTicket = (ticket: TicketWithExtras) => {\n    return (\n      user?.role === \"admin\" ||\n      user?.role === \"agent\" ||\n      (isOwner && ticket.createdById === user?.id)\n    );\n  };\n\n  const canDeleteTicket = (ticket: TicketWithExtras) => {\n    return (\n      user?.role === \"admin\" ||\n      (isOwner && ticket.createdById === user?.id)\n    );\n  };\n\n  const canAssignTicket = (ticket: TicketWithExtras) => {\n    return (\n      (user?.role === \"admin\" || user?.role === \"agent\") &&\n      ticket.assignedToId !== user?.id\n    );\n  };\n\n  return (\n    <>\n      <CardContent className=\"p-0\">\n        <div className=\"divide-y divide-gray-200\">\n          {tickets.map((ticket) => (\n            <div key={ticket.id} className=\"p-6 hover:bg-gray-50 transition-colors\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1 min-w-0\">\n                  {/* Ticket Header */}\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(ticket.status)}\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {formatTicketId(ticket.id)}\n                      </span>\n                    </div>\n                    <Badge variant=\"outline\" className={getPriorityColor(ticket.priority)}>\n                      {ticket.priority}\n                    </Badge>\n                    <Badge variant=\"outline\" className={getStatusColor(ticket.status)}>\n                      {ticket.status.replace('-', ' ')}\n                    </Badge>\n                  </div>\n\n                  {/* Ticket Title */}\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2 cursor-pointer hover:text-blue-600\"\n                      onClick={() => handleViewTicket(ticket.id)}>\n                    {ticket.title}\n                  </h3>\n\n                  {/* Ticket Description */}\n                  <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">\n                    {ticket.description}\n                  </p>\n\n                  {/* Ticket Meta Information */}\n                  <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>\n                        {ticket.createdAt ? formatDistanceToNow(new Date(ticket.createdAt), { addSuffix: true }) : 'No date'}\n                      </span>\n                    </div>\n\n                    {showCreatedBy && ticket.createdBy && (\n                      <div className=\"flex items-center space-x-2\">\n                        <span>Created by:</span>\n                        <Avatar className=\"h-6 w-6\">\n                          <AvatarFallback className=\"text-xs\">\n                            {ticket.createdBy.name.charAt(0).toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"font-medium\">{ticket.createdBy.name}</span>\n                      </div>\n                    )}\n\n                    {showAssignedTo && (\n                      <div className=\"flex items-center space-x-2\">\n                        {ticket.assignedTo ? (\n                          <>\n                            <span>Assigned to:</span>\n                            <Avatar className=\"h-6 w-6\">\n                              <AvatarFallback className=\"text-xs\">\n                                {ticket.assignedTo.name.charAt(0).toUpperCase()}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"font-medium\">{ticket.assignedTo.name}</span>\n                          </>\n                        ) : (\n                          <span className=\"text-orange-600\">Unassigned</span>\n                        )}\n                      </div>\n                    )}\n\n                    {ticket.category && (\n                      <div className=\"flex items-center space-x-1\">\n                        <span>Category:</span>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {ticket.category.name}\n                        </Badge>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex items-center space-x-2 ml-4\">\n                  {/* Comment Button */}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleViewTicket(ticket.id)}\n                    className=\"text-gray-600 hover:text-blue-600\"\n                  >\n                    <MessageSquare className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">\n                      {ticket.commentCount || 0}\n                    </span>\n                  </Button>\n\n                  {/* More Actions Menu */}\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-gray-800\">\n                        <MoreVertical className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\" className=\"w-48\">\n                      <DropdownMenuItem onClick={() => handleViewTicket(ticket.id)}>\n                        <Eye className=\"h-4 w-4 mr-2\" />\n                        View Details\n                      </DropdownMenuItem>\n\n                      {/* EDIT FUNCTIONALITY */}\n                      {canEditTicket(ticket) && (\n                        <DropdownMenuItem onClick={() => handleEditTicket(ticket.id)}>\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Edit Ticket\n                        </DropdownMenuItem>\n                      )}\n\n                      {canAssignTicket(ticket) && (\n                        <DropdownMenuItem onClick={() => handleAssignToSelf(ticket.id)}>\n                          <UserCheck className=\"h-4 w-4 mr-2\" />\n                          Assign to Me\n                        </DropdownMenuItem>\n                      )}\n\n                      {(user?.role === \"admin\" || user?.role === \"agent\") && (\n                        <>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => handleStatusChange(ticket.id, \"in-progress\")}\n                            disabled={ticket.status === \"in-progress\"}\n                          >\n                            <Clock className=\"h-4 w-4 mr-2\" />\n                            Mark In Progress\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => handleStatusChange(ticket.id, \"resolved\")}\n                            disabled={ticket.status === \"resolved\" || ticket.status === \"closed\"}\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-2\" />\n                            Mark Resolved\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => handleStatusChange(ticket.id, \"closed\")}\n                            disabled={ticket.status === \"closed\"}\n                          >\n                            <XCircle className=\"h-4 w-4 mr-2\" />\n                            Close Ticket\n                          </DropdownMenuItem>\n                        </>\n                      )}\n\n                      {/* DELETE FUNCTIONALITY */}\n                      {canDeleteTicket(ticket) && (\n                        <>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => handleDeleteTicket(ticket)}\n                            className=\"text-red-600 focus:text-red-600\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Delete Ticket\n                          </DropdownMenuItem>\n                        </>\n                      )}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Ticket</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete ticket \"{ticketToDelete?.title}\"? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowDeleteDialog(false)}>\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmDeleteTicket}\n              disabled={deleteTicketMutation.isPending}\n            >\n              {deleteTicketMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":15234},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/pages/admin/categories-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Tag, \n  PlusCircle, \n  Edit, \n  Trash,\n  Folder,\n  FolderPlus,\n  FolderTree\n} from \"lucide-react\";\nimport { Category } from \"@shared/schema\";\n\n// Form validation schema\nconst categoryFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\").max(50, \"Name cannot exceed 50 characters\"),\n  parentId: z.string().optional(),\n});\n\ntype CategoryFormValues = z.infer<typeof categoryFormSchema>;\n\nexport default function CategoriesPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isMobile = window.innerWidth < 768;\n\n  // Initialize form\n  const form = useForm<CategoryFormValues>({\n    resolver: zodResolver(categoryFormSchema),\n    defaultValues: {\n      name: \"\",\n      parentId: \"\",\n    },\n  });\n\n  // Fetch categories\n  const { data: categories, isLoading: isLoadingCategories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Create category mutation\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: { name: string; parentId?: number }) => {\n      const res = await apiRequest(\"POST\", \"/api/categories\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Category created\",\n        description: \"The category has been created successfully.\",\n      });\n      setShowAddDialog(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to create category\",\n        description: error.message || \"An error occurred while creating the category.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update category mutation\n  const updateCategoryMutation = useMutation({\n    mutationFn: async (data: { id: number; name: string; parentId?: number }) => {\n      const res = await apiRequest(\"PUT\", `/api/categories/${data.id}`, {\n        name: data.name,\n        parentId: data.parentId,\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Category updated\",\n        description: \"The category has been updated successfully.\",\n      });\n      setShowEditDialog(false);\n      setEditingCategory(null);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to update category\",\n        description: error.message || \"An error occurred while updating the category.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete category mutation\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const res = await apiRequest(\"DELETE\", `/api/categories/${id}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Category deleted\",\n        description: \"The category has been deleted successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to delete category\",\n        description: error.message || \"An error occurred while deleting the category.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle form submission\n  const onSubmit = (data: CategoryFormValues) => {\n    const formData = {\n      name: data.name,\n      parentId: data.parentId && data.parentId !== \"\" ? parseInt(data.parentId) : undefined,\n    };\n\n    if (editingCategory) {\n      updateCategoryMutation.mutate({\n        id: editingCategory.id,\n        ...formData,\n      });\n    } else {\n      createCategoryMutation.mutate(formData);\n    }\n  };\n\n  // Handle edit category\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    form.setValue(\"name\", category.name);\n    form.setValue(\"parentId\", category.parentId?.toString() || \"\");\n    setShowEditDialog(true);\n  };\n\n  // Handle delete category\n  const handleDeleteCategory = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this category? This action cannot be undone.\")) {\n      deleteCategoryMutation.mutate(id);\n    }\n  };\n\n  // Handle add subcategory\n  const handleAddSubcategory = (parentId: number) => {\n    form.reset();\n    form.setValue(\"parentId\", parentId.toString());\n    form.setValue(\"name\", \"\");\n    setEditingCategory(null);\n    setShowAddDialog(true);\n  };\n\n  // Reset form when dialogs close\n  const handleCloseDialogs = () => {\n    setShowAddDialog(false);\n    setShowEditDialog(false);\n    setEditingCategory(null);\n    form.reset({\n      name: \"\",\n      parentId: \"\",\n    });\n  };\n\n  // Get parent categories (no parentId)\n  const parentCategories = categories?.filter(c => !c.parentId) || [];\n\n  // Get subcategories for a parent\n  const getSubcategories = (parentId: number) => {\n    return categories?.filter(c => c.parentId === parentId) || [];\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Categories\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6\">\n            <div className=\"mb-4 md:mb-0\">\n              <h2 className=\"text-lg font-semibold text-gray-800\">Ticket Categories</h2>\n              <p className=\"text-sm text-gray-500\">Manage categories and subcategories for ticket classification</p>\n            </div>\n            \n            {/* Add Category Dialog */}\n            <Dialog open={showAddDialog} onOpenChange={handleCloseDialogs}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  form.reset({ name: \"\", parentId: \"\" });\n                  setEditingCategory(null);\n                  setShowAddDialog(true);\n                }}>\n                  <FolderPlus className=\"mr-2 h-4 w-4\" />\n                  Add Category\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Category</DialogTitle>\n                  <DialogDescription>\n                    Create a new category or subcategory for ticket classification\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter category name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"parentId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Parent Category (Optional)</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"None (Top-level category)\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"none\">None (Top-level category)</SelectItem>\n                              {parentCategories.map((category) => (\n                                <SelectItem key={category.id} value={category.id.toString()}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormDescription>\n                            Leave empty to create a top-level category\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <DialogFooter className=\"mt-6\">\n                      <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialogs}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createCategoryMutation.isPending}>\n                        {createCategoryMutation.isPending ? \"Creating...\" : \"Create Category\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n\n            {/* Edit Category Dialog */}\n            <Dialog open={showEditDialog} onOpenChange={handleCloseDialogs}>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Edit Category</DialogTitle>\n                  <DialogDescription>\n                    Update the category information\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter category name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"parentId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Parent Category (Optional)</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"None (Top-level category)\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"none\">None (Top-level category)</SelectItem>\n                              {parentCategories\n                                .filter(cat => cat.id !== editingCategory?.id)\n                                .map((category) => (\n                                <SelectItem key={category.id} value={category.id.toString()}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <DialogFooter className=\"mt-6\">\n                      <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialogs}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={updateCategoryMutation.isPending}>\n                        {updateCategoryMutation.isPending ? \"Updating...\" : \"Update Category\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Categories */}\n          {isLoadingCategories ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <Skeleton key={i} className=\"h-64 w-full\" />\n              ))}\n            </div>\n          ) : parentCategories.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {parentCategories.map((category) => {\n                const subcategories = getSubcategories(category.id);\n                return (\n                  <Card key={category.id}>\n                    <CardHeader className=\"pb-2\">\n                      <div className=\"flex justify-between items-start\">\n                        <CardTitle className=\"text-lg flex items-center\">\n                          <Folder className=\"h-5 w-5 mr-2 text-blue-600\" />\n                          {category.name}\n                        </CardTitle>\n                        <div className=\"flex space-x-1\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            className=\"h-7 w-7\"\n                            onClick={() => handleEditCategory(category)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            className=\"h-7 w-7 text-red-500\"\n                            onClick={() => handleDeleteCategory(category.id)}\n                          >\n                            <Trash className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <CardDescription>\n                        {subcategories.length} subcategories\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {subcategories.length > 0 ? (\n                          subcategories.map((sub) => (\n                            <div key={sub.id} className=\"flex justify-between items-center p-2 hover:bg-gray-50 rounded-md\">\n                              <div className=\"flex items-center\">\n                                <Tag className=\"h-4 w-4 mr-2 text-gray-500\" />\n                                <span>{sub.name}</span>\n                              </div>\n                              <div className=\"flex space-x-1\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"icon\" \n                                  className=\"h-7 w-7\"\n                                  onClick={() => handleEditCategory(sub)}\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"icon\" \n                                  className=\"h-7 w-7 text-red-500\"\n                                  onClick={() => handleDeleteCategory(sub.id)}\n                                >\n                                  <Trash className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <p className=\"text-sm text-gray-500 italic\">No subcategories yet</p>\n                        )}\n                      </div>\n                    </CardContent>\n                    <CardFooter className=\"pt-0\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"w-full\" \n                        onClick={() => handleAddSubcategory(category.id)}\n                      >\n                        <PlusCircle className=\"h-3 w-3 mr-1\" />\n                        Add Subcategory\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <FolderTree className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Categories Yet</h3>\n                <p className=\"text-gray-500 mb-6\">\n                  Categories help organize tickets into logical groups for easier management\n                </p>\n                <Button onClick={() => {\n                  form.reset({ name: \"\", parentId: \"\" });\n                  setShowAddDialog(true);\n                }}>\n                  <FolderPlus className=\"mr-2 h-4 w-4\" />\n                  Create First Category\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Category Usage */}\n          {categories && categories.length > 0 && (\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle>Category Usage</CardTitle>\n                <CardDescription>Tickets distribution across categories</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  This section will show ticket distribution statistics across categories once you have active tickets in the system.\n                </p>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {parentCategories.slice(0, 4).map((category) => (\n                    <div key={category.id} className=\"bg-gray-50 p-3 rounded-md\">\n                      <div className=\"font-medium\">{category.name}</div>\n                      <div className=\"text-sm text-gray-500\">{getSubcategories(category.id).length} subcategories</div>\n                      <div className=\"text-xs text-blue-600 mt-1\">0 active tickets</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20163},"client/src/pages/admin/dashboard-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport StatsOverview from \"@/components/dashboard/stats-overview\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport {\n  ArrowRight,\n  Users,\n  Ticket,\n  Clock,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\nimport { DashboardStats, Ticket as TicketType, Faq } from \"@shared/schema\";\n\n// Sample data for charts\nconst weeklyData = [\n  { name: 'Mon', tickets: 4 },\n  { name: 'Tue', tickets: 7 },\n  { name: 'Wed', tickets: 5 },\n  { name: 'Thu', tickets: 6 },\n  { name: 'Fri', tickets: 8 },\n  { name: 'Sat', tickets: 3 },\n  { name: 'Sun', tickets: 2 }\n];\n\nconst categoryData = [\n  { name: 'Network Issues', value: 42 },\n  { name: 'Hardware', value: 28 },\n  { name: 'Email Services', value: 18 },\n  { name: 'Other', value: 12 },\n];\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\nexport default function DashboardPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { user } = useAuth();\n  const isMobile = window.innerWidth < 768;\n\n  // Fetch dashboard stats\n  const { data: stats, isLoading: isLoadingStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Fetch recent tickets\n  const { data: tickets, isLoading: isLoadingTickets } = useQuery<TicketType[]>({\n    queryKey: [\"/api/tickets\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Get status color based on ticket status\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-red-100 text-red-800\";\n      case \"in-progress\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Admin Dashboard\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-semibold text-gray-800\">Dashboard Overview</h2>\n            <p className=\"text-gray-500\">Welcome to the IT Helpdesk Administration Dashboard</p>\n          </div>\n\n          {/* Stats Overview */}\n          <StatsOverview stats={stats} isLoading={isLoadingStats} />\n\n          {/* Charts Row */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            {/* Ticket Volume Chart */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Weekly Ticket Volume</CardTitle>\n                <CardDescription>\n                  Number of tickets created per day this week\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart\n                      data={weeklyData}\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                    >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Bar \n                        dataKey=\"tickets\" \n                        fill=\"#1976d2\" \n                        name=\"Tickets\"\n                      />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Category Distribution Chart */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Ticket Categories</CardTitle>\n                <CardDescription>\n                  Distribution of tickets by category\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={categoryData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      >\n                        {categoryData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Tickets */}\n          <Card className=\"mb-6\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-lg\">Recent Tickets</CardTitle>\n              <CardDescription>Latest support tickets in the system</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoadingTickets ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-12 w-full\" />\n                  ))}\n                </div>\n              ) : tickets && tickets.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">ID</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Title</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Created By</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {tickets.slice(0, 5).map((ticket) => (\n                        <tr key={ticket.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-4 py-3 whitespace-nowrap\">\n                            <span className=\"text-sm font-mono text-gray-900\">TKT-{ticket.id.toString().padStart(4, '0')}</span>\n                          </td>\n                          <td className=\"px-4 py-3 whitespace-nowrap\">\n                            <Link href={`/tickets/${ticket.id}`}>\n                              <a className=\"text-sm font-medium text-blue-600 hover:text-blue-800\">\n                                {ticket.title}\n                              </a>\n                            </Link>\n                          </td>\n                          <td className=\"px-4 py-3 whitespace-nowrap\">\n                            <Badge variant=\"outline\" className={getStatusColor(ticket.status)}>\n                              {ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1)}\n                            </Badge>\n                          </td>\n                          <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                            User #{ticket.createdById}\n                          </td>\n                          <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                            {formatDate(ticket.createdAt)}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">No tickets found</p>\n                </div>\n              )}\n            </CardContent>\n            <CardFooter className=\"bg-gray-50 flex justify-end py-3\">\n              <Button variant=\"ghost\" size=\"sm\" asChild>\n                <Link href=\"/all-tickets\">\n                  View all tickets\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Link>\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Quick Access Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <Users className=\"h-5 w-5 mr-2 text-blue-600\" />\n                  User Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Manage user accounts, roles, and permissions\n                </p>\n              </CardContent>\n              <CardFooter>\n                <Button variant=\"outline\" size=\"sm\" asChild className=\"w-full\">\n                  <Link href=\"/admin/users\">\n                    Manage Users\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Link>\n                </Button>\n              </CardFooter>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <Ticket className=\"h-5 w-5 mr-2 text-blue-600\" />\n                  Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Manage ticket categories and subcategories\n                </p>\n              </CardContent>\n              <CardFooter>\n                <Button variant=\"outline\" size=\"sm\" asChild className=\"w-full\">\n                  <Link href=\"/admin/categories\">\n                    Manage Categories\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Link>\n                </Button>\n              </CardFooter>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <BarChart className=\"h-5 w-5 mr-2 text-blue-600\" />\n                  Reports\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  View detailed performance reports and analytics\n                </p>\n              </CardContent>\n              <CardFooter>\n                <Button variant=\"outline\" size=\"sm\" asChild className=\"w-full\">\n                  <Link href=\"/admin/reports\">\n                    View Reports\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Link>\n                </Button>\n              </CardFooter>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12600},"client/src/pages/admin/reports-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Download } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { DashboardStats } from \"@shared/schema\";\n\n\nfunction exportToCSV(data: any[], filename = 'report.csv') {\n  const csvContent =\n    'data:text/csv;charset=utf-8,' +\n    [Object.keys(data[0]).join(','), ...data.map(row => Object.values(row).join(','))].join('\\n');\n\n  const encodedUri = encodeURI(csvContent);\n  const link = document.createElement('a');\n  link.setAttribute('href', encodedUri);\n  link.setAttribute('download', filename);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\n\n// Sample data for charts\nconst ticketVolumeData = [\n  { name: 'Jan', tickets: 65 },\n  { name: 'Feb', tickets: 72 },\n  { name: 'Mar', tickets: 89 },\n  { name: 'Apr', tickets: 78 },\n  { name: 'May', tickets: 95 },\n  { name: 'Jun', tickets: 102 },\n  { name: 'Jul', tickets: 110 },\n];\n\nconst resolutionTimeData = [\n  { name: 'Network', time: 4.2 },\n  { name: 'Hardware', time: 6.8 },\n  { name: 'Email', time: 3.5 },\n  { name: 'Software', time: 5.2 },\n  { name: 'Access', time: 2.9 },\n];\n\nconst categoryData = [\n  { name: 'Network Issues', value: 42 },\n  { name: 'Hardware', value: 28 },\n  { name: 'Email Services', value: 18 },\n  { name: 'Other', value: 12 },\n];\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\nconst agentPerformanceData = [\n  { \n    name: 'Alex Turner',\n    tickets: 87,\n    avgTime: 3.8,\n    slaMet: 96\n  },\n  { \n    name: 'Sarah Parker',\n    tickets: 64,\n    avgTime: 4.2,\n    slaMet: 92\n  },\n  { \n    name: 'Michael Lee',\n    tickets: 52,\n    avgTime: 4.5,\n    slaMet: 89\n  },\n];\n\nconst slaComplianceData = [\n  { name: 'Jan', compliance: 92 },\n  { name: 'Feb', compliance: 93 },\n  { name: 'Mar', compliance: 95 },\n  { name: 'Apr', compliance: 94 },\n  { name: 'May', compliance: 96 },\n  { name: 'Jun', compliance: 95 },\n  { name: 'Jul', compliance: 97 },\n];\n\nexport default function ReportsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [dateRange, setDateRange] = useState(\"30days\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [companyFilter, setCompanyFilter] = useState(\"all\");\n  const [agentFilter, setAgentFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState(\"all\");\n  const [assignedToFilter, setAssignedToFilter] = useState(\"all\");\n  const [createdByFilter, setCreatedByFilter] = useState(\"all\");\n  const [createdDateFrom, setCreatedDateFrom] = useState(\"\");\n  const [createdDateTo, setCreatedDateTo] = useState(\"\");\n  const [dueDateFrom, setDueDateFrom] = useState(\"\");\n  const [dueDateTo, setDueDateTo] = useState(\"\");\n  const { user } = useAuth();\n  const isMobile = window.innerWidth < 768;\n\n  // Fetch dashboard stats\n  const { data: stats, isLoading: isLoadingStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Simulate date range filtering (last N months)\n  const rangeMap = {\n    \"7days\": 3,\n    \"30days\": 5,\n    \"90days\": 7,\n  };\n\n  const filteredTicketVolumeData = ticketVolumeData.slice(-((rangeMap as any)[dateRange] || 6));\n\n  // Fix category filtering logic\n  const filteredCategoryData = categoryFilter === \"all\"\n    ? categoryData\n    : categoryData.filter(item => {\n        const categoryMap = {\n          \"network\": \"Network Issues\",\n          \"hardware\": \"Hardware\", \n          \"email\": \"Email Services\"\n        };\n        return item.name === (categoryMap as any)[categoryFilter];\n      });\n\n  // Filter other data based on category\n  const filteredResolutionTimeData = categoryFilter === \"all\"\n    ? resolutionTimeData\n    : resolutionTimeData.filter(item => {\n        const categoryMap = {\n          \"network\": \"Network\",\n          \"hardware\": \"Hardware\",\n          \"email\": \"Email\"\n        };\n        return item.name === (categoryMap as any)[categoryFilter];\n      });\n\n  // Enhanced export function that includes all filtered data\n  const handleExportReport = () => {\n    const reportData = [\n      ...filteredTicketVolumeData.map(item => ({\n        type: 'Volume',\n        period: item.name,\n        value: item.tickets,\n        category: categoryFilter\n      })),\n      ...filteredCategoryData.map(item => ({\n        type: 'Category',\n        period: 'Current',\n        value: item.value,\n        category: item.name\n      })),\n      ...agentPerformanceData.map(item => ({\n        type: 'Agent Performance',\n        agent: item.name,\n        tickets: item.tickets,\n        avgTime: item.avgTime,\n        slaMet: item.slaMet\n      }))\n    ];\n    \n    exportToCSV(reportData, `report_${dateRange}_${categoryFilter}.csv`);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar for larger screens, or as a slide-over for mobile */}\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Reports\" />\n\n        {/* Main content scrollable area */}\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-lg font-semibold text-gray-800\">Support Analytics</h2>\n            <p className=\"text-sm text-gray-500\">Monitor performance metrics and support trends</p>\n          </div>\n\n          {/* Enhanced Filters */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-4 mb-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date Range</label>\n                  <Select value={dateRange} onValueChange={setDateRange}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"Select date range\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"7days\">Last 7 Days</SelectItem>\n                      <SelectItem value=\"30days\">Last 30 Days</SelectItem>\n                      <SelectItem value=\"90days\">Last 90 Days</SelectItem>\n                      <SelectItem value=\"custom\">Custom Range</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Company</label>\n                  <Select value={companyFilter} onValueChange={setCompanyFilter}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"All Companies\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Companies</SelectItem>\n                      <SelectItem value=\"company1\">Tech Corp</SelectItem>\n                      <SelectItem value=\"company2\">Business Inc</SelectItem>\n                      <SelectItem value=\"company3\">Startup Ltd</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Agent Wise</label>\n                  <Select value={agentFilter} onValueChange={setAgentFilter}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"All Agents\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Agents</SelectItem>\n                      <SelectItem value=\"agent1\">John Doe</SelectItem>\n                      <SelectItem value=\"agent2\">Jane Smith</SelectItem>\n                      <SelectItem value=\"agent3\">Bob Johnson</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"All Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"open\">Open</SelectItem>\n                      <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Priority</label>\n                  <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"All Priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priority</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Assigned To</label>\n                  <Select value={assignedToFilter} onValueChange={setAssignedToFilter}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"All Assignees\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Assignees</SelectItem>\n                      <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                      <SelectItem value=\"admin\">Admin User</SelectItem>\n                      <SelectItem value=\"agent\">Support Agent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Created By</label>\n                  <Select value={createdByFilter} onValueChange={setCreatedByFilter}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"All Creators\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Creators</SelectItem>\n                      <SelectItem value=\"user1\">Alice Brown</SelectItem>\n                      <SelectItem value=\"user2\">Charlie Wilson</SelectItem>\n                      <SelectItem value=\"user3\">Diana Smith</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Category</label>\n                  <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"All Categories\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      <SelectItem value=\"network\">Network Issues</SelectItem>\n                      <SelectItem value=\"hardware\">Hardware</SelectItem>\n                      <SelectItem value=\"email\">Email Services</SelectItem>\n                      <SelectItem value=\"software\">Software</SelectItem>\n                      <SelectItem value=\"access\">Access Control</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"border-t border-gray-200 mt-4 pt-4\">\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Date Filters</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Created Date From</label>\n                    <Input\n                      type=\"date\"\n                      value={createdDateFrom}\n                      onChange={(e) => setCreatedDateFrom(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Created Date To</label>\n                    <Input\n                      type=\"date\"\n                      value={createdDateTo}\n                      onChange={(e) => setCreatedDateTo(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Due Date From</label>\n                    <Input\n                      type=\"date\"\n                      value={dueDateFrom}\n                      onChange={(e) => setDueDateFrom(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Due Date To</label>\n                    <Input\n                      type=\"date\"\n                      value={dueDateTo}\n                      onChange={(e) => setDueDateTo(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center mt-4\">\n                <div>\n                  <p className=\"text-sm text-gray-500\">\n                    Use filters above to customize your report data\n                  </p>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" onClick={() => {\n                    setDateRange('30days');\n                    setCompanyFilter('all');\n                    setAgentFilter('all');\n                    setStatusFilter('all');\n                    setPriorityFilter('all');\n                    setAssignedToFilter('all');\n                    setCreatedByFilter('all');\n                    setCategoryFilter('all');\n                    setCreatedDateFrom('');\n                    setCreatedDateTo('');\n                    setDueDateFrom('');\n                    setDueDateTo('');\n                  }}>\n                    Reset Filters\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleExportReport}\n                  >\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Export Report\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Overview Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            {/* Tickets Volume Chart */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Ticket Volume Trend</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart\n                      data={filteredTicketVolumeData}\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                    >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"tickets\" \n                        stroke=\"#1976d2\" \n                        activeDot={{ r: 8 }} \n                        name=\"Tickets\"\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"mt-4 grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">Total Tickets</p>\n                    <p className=\"text-xl font-semibold text-gray-800\">245</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">Avg. Daily</p>\n                    <p className=\"text-xl font-semibold text-gray-800\">8.2</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">Trend</p>\n                    <p className=\"text-xl font-semibold text-green-600\">‚Üì 4%</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Resolution Time Chart */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Resolution Time</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart\n                      data={filteredResolutionTimeData}\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                    >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Bar \n                        dataKey=\"time\" \n                        fill=\"#1976d2\" \n                        name=\"Hours\"\n                      />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"mt-4 grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">Avg. Resolution</p>\n                    <p className=\"text-xl font-semibold text-gray-800\">\n                      {isLoadingStats ? <Skeleton className=\"h-8 w-16 mx-auto\" /> : stats?.avgResponseTime || \"4.2h\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">SLA Met</p>\n                    <p className=\"text-xl font-semibold text-green-600\">\n                      {isLoadingStats ? <Skeleton className=\"h-8 w-16 mx-auto\" /> : stats?.slaComplianceRate || \"94%\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">Trend</p>\n                    <p className=\"text-xl font-semibold text-green-600\">‚Üë 2%</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Category Distribution and Team Performance */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            {/* Category Distribution */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Ticket Categories</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={filteredCategoryData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      >\n                        {filteredCategoryData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"mt-4\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-gray-600\">Network Issues</span>\n                    <span className=\"text-sm font-medium text-gray-800\">42%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: \"42%\" }}></div>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center mb-2 mt-3\">\n                    <span className=\"text-sm text-gray-600\">Hardware</span>\n                    <span className=\"text-sm font-medium text-gray-800\">28%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: \"28%\" }}></div>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center mb-2 mt-3\">\n                    <span className=\"text-sm text-gray-600\">Email Services</span>\n                    <span className=\"text-sm font-medium text-gray-800\">18%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-yellow-500 h-2 rounded-full\" style={{ width: \"18%\" }}></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Agent Performance */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Agent Performance</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-4\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full\">\n                    <thead>\n                      <tr className=\"border-b border-gray-200\">\n                        <th className=\"py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Agent</th>\n                        <th className=\"py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Tickets</th>\n                        <th className=\"py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Avg. Time</th>\n                        <th className=\"py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">SLA Met</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {agentPerformanceData.map((agent, index) => (\n                        <tr key={index} className=\"border-b border-gray-100\">\n                          <td className=\"py-3 px-3 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"bg-blue-100 w-8 h-8 rounded-full flex items-center justify-center text-blue-600 mr-2\">\n                                {agent.name.charAt(0)}\n                              </div>\n                              <span className=\"text-sm font-medium\">{agent.name}</span>\n                            </div>\n                          </td>\n                          <td className=\"py-3 px-3 whitespace-nowrap text-sm\">{agent.tickets}</td>\n                          <td className=\"py-3 px-3 whitespace-nowrap text-sm\">{agent.avgTime}h</td>\n                          <td className=\"py-3 px-3 whitespace-nowrap text-sm\">\n                            <span className={agent.slaMet >= 95 ? \"text-green-600\" : agent.slaMet >= 90 ? \"text-yellow-600\" : \"text-red-600\"}>\n                              {agent.slaMet}%\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* SLA Compliance */}\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-lg\">SLA Compliance</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4\">\n              <div className=\"h-52\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={slaComplianceData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis domain={[85, 100]} />\n                    <Tooltip />\n                    <Legend />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"compliance\" \n                      stroke=\"#43a047\" \n                      activeDot={{ r: 8 }} \n                      name=\"Compliance %\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n              <div className=\"mt-4\">\n                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">High Priority</p>\n                    <p className=\"text-xl font-semibold text-green-600\">98%</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">Medium Priority</p>\n                    <p className=\"text-xl font-semibold text-green-600\">94%</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">Low Priority</p>\n                    <p className=\"text-xl font-semibold text-green-600\">97%</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27541},"client/src/pages/admin/users-page.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Search,\n  UserPlus,\n  Edit,\n  Trash,\n  User as UserIcon,\n  ShieldCheck,\n} from \"lucide-react\";\nimport { User as UserType } from \"@shared/schema\";\n\n/* ------------------------\n   Zod schemas + types\n   ------------------------ */\n\nconst baseUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(50),\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  role: z.enum([\"user\", \"agent\", \"admin\"]).default(\"user\"),\n});\n\nconst createUserSchema = baseUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst editUserSchema = baseUserSchema.extend({\n  // optional for edit (user may not change password)\n  password: z.string().min(6, \"Password must be at least 6 characters\").optional(),\n});\n\ntype CreateUserValues = z.infer<typeof createUserSchema>;\ntype EditUserValues = z.infer<typeof editUserSchema>;\n\n/* ------------------------\n   Component\n   ------------------------ */\n\nexport default function UsersPage(): JSX.Element {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isMobile, setIsMobile] = useState(false);\n\n  const [showAddUserDialog, setShowAddUserDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingUser, setEditingUser] = useState<UserType | null>(null);\n\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [userToDelete, setUserToDelete] = useState<UserType | null>(null);\n\n  // handle responsive without SSR window errors\n  useEffect(() => {\n    const update = () => setIsMobile(typeof window !== \"undefined\" && window.innerWidth < 768);\n    update();\n    window.addEventListener(\"resize\", update);\n    return () => window.removeEventListener(\"resize\", update);\n  }, []);\n\n  // forms: separate forms for create vs edit to handle different validations\n  const addForm = useForm<CreateUserValues>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      name: \"\",\n      email: \"\",\n      role: \"user\",\n    },\n  });\n\n  const editForm = useForm<EditUserValues>({\n    resolver: zodResolver(editUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: undefined,\n      name: \"\",\n      email: \"\",\n      role: \"user\",\n    },\n  });\n\n  /* ------------------------\n     Fetch users\n     ------------------------ */\n  const {\n    data: users,\n    isLoading: isLoadingUsers,\n    isError: isUsersError,\n    error: usersError,\n  } = useQuery<UserType[]>({\n    queryKey: [\"users\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/users\");\n      if (!res.ok) {\n        const txt = await res.text();\n        throw new Error(txt || \"Failed to fetch users\");\n      }\n      return await res.json();\n    },\n    enabled: !!user && user.role === \"admin\", // only for admin\n  });\n\n  /* ------------------------\n     Mutations\n     ------------------------ */\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserValues) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", data);\n      if (!res.ok) {\n        const txt = await res.text();\n        throw new Error(txt || \"Failed to create user\");\n      }\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"users\"] });\n      toast({ title: \"User created\", description: \"The user was created successfully.\" });\n      setShowAddUserDialog(false);\n      addForm.reset();\n    },\n    onError: (err: any) => {\n      toast({\n        title: \"Create failed\",\n        description: err?.message || \"An error occurred while creating user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (payload: { id: string | number; data: EditUserValues }) => {\n      const { id, data } = payload;\n      // remove undefined password if not provided\n      const body = { ...data } as Record<string, any>;\n      if (!body.password) delete body.password;\n      const res = await apiRequest(\"PUT\", `/api/users/${String(id)}`, body);\n      if (!res.ok) {\n        const txt = await res.text();\n        throw new Error(txt || \"Failed to update user\");\n      }\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"users\"] });\n      toast({ title: \"User updated\", description: \"User details updated successfully.\" });\n      setShowEditDialog(false);\n      setEditingUser(null);\n      editForm.reset();\n    },\n    onError: (err: any) => {\n      toast({\n        title: \"Update failed\",\n        description: err?.message || \"An error occurred while updating user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string | number) => {\n      const res = await apiRequest(\"DELETE\", `/api/users/${String(id)}`);\n      if (!res.ok) {\n        const txt = await res.text();\n        throw new Error(txt || \"Failed to delete user\");\n      }\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"users\"] });\n      toast({ title: \"User deleted\", description: \"User removed successfully.\" });\n      setShowDeleteConfirm(false);\n      setUserToDelete(null);\n    },\n    onError: (err: any) => {\n      toast({\n        title: \"Delete failed\",\n        description: err?.message || \"An error occurred while deleting user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  /* ------------------------\n     UI helpers\n     ------------------------ */\n\n  const filteredUsers = users?.filter((u) => {\n    const q = searchQuery.trim().toLowerCase();\n    if (!q) return true;\n    return (\n      (u.name || \"\").toLowerCase().includes(q) ||\n      (u.username || \"\").toLowerCase().includes(q) ||\n      (u.email || \"\").toLowerCase().includes(q)\n    );\n  });\n\n  const formatDate = (d?: string) => {\n    if (!d) return \"-\";\n    try {\n      return new Date(d).toLocaleString();\n    } catch {\n      return d;\n    }\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"bg-red-100 text-red-800\";\n      case \"agent\":\n        return \"bg-blue-100 text-blue-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  /* ------------------------\n     Handlers\n     ------------------------ */\n\n  const openEditFor = (u: UserType) => {\n    setEditingUser(u);\n    // reset edit form values\n    editForm.reset({\n      username: u.username,\n      password: undefined,\n      name: u.name,\n      email: u.email,\n      role: (u.role as \"user\" | \"agent\" | \"admin\") || \"user\",\n    });\n    setShowEditDialog(true);\n  };\n\n  const openDeleteFor = (u: UserType) => {\n    setUserToDelete(u);\n    setShowDeleteConfirm(true);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen((s) => !s)} title=\"User Management\" />\n\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6\">\n            <div className=\"mb-4 md:mb-0\">\n              <h2 className=\"text-lg font-semibold text-gray-800\">Users</h2>\n              <p className=\"text-sm text-gray-500\">Manage system users and their permissions</p>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-3 items-center\">\n              <div className=\"relative w-full sm:w-auto\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search users...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n                <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n              </div>\n\n              {/* Add user dialog */}\n              <Dialog open={showAddUserDialog} onOpenChange={setShowAddUserDialog}>\n                <DialogTrigger asChild>\n                  <Button>\n                    <UserPlus className=\"mr-2 h-4 w-4\" />\n                    Add User\n                  </Button>\n                </DialogTrigger>\n\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Create User</DialogTitle>\n                    <DialogDescription>Create a new user with role-based access</DialogDescription>\n                  </DialogHeader>\n\n                  <Form {...addForm}>\n                    <form\n                      onSubmit={addForm.handleSubmit((data) => createUserMutation.mutate(data))}\n                      className=\"space-y-4\"\n                    >\n                      <FormField\n                        control={addForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={addForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={addForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Full name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={addForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"email@example.com\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={addForm.control}\n                        name=\"role\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Role</FormLabel>\n                            <FormControl>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select role\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"user\">User</SelectItem>\n                                  <SelectItem value=\"agent\">Agent</SelectItem>\n                                  <SelectItem value=\"admin\">Admin</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <DialogFooter>\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setShowAddUserDialog(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createUserMutation.isLoading}>\n                          {createUserMutation.isLoading ? \"Creating...\" : \"Create User\"}\n                        </Button>\n                      </DialogFooter>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n\n          {/* Users list */}\n          <Card>\n            {isLoadingUsers ? (\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, idx) => (\n                    <Skeleton key={idx} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              </CardContent>\n            ) : filteredUsers && filteredUsers.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        User\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Email\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Role\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Created\n                      </th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {filteredUsers!.map((u) => (\n                      <tr key={String(u.id)} className=\"hover:bg-gray-50\">\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className=\"flex-shrink-0 h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center\">\n                              <UserIcon className=\"h-5 w-5 text-gray-500\" />\n                            </div>\n                            <div className=\"ml-4\">\n                              <div className=\"text-sm font-medium text-gray-900\">{u.name}</div>\n                              <div className=\"text-sm text-gray-500\">{u.username}</div>\n                            </div>\n                          </div>\n                        </td>\n\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900\">{u.email}</div>\n                        </td>\n\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\n                          <Badge variant=\"outline\" className={getRoleBadgeColor(u.role)}>\n                            {u.role.charAt(0).toUpperCase() + u.role.slice(1)}\n                          </Badge>\n                        </td>\n\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {formatDate((u as any).createdAt)}\n                        </td>\n\n                        <td className=\"px-4 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-blue-600 hover:text-blue-800\"\n                            onClick={() => openEditFor(u)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-800\"\n                            onClick={() => openDeleteFor(u)}\n                          >\n                            <Trash className=\"h-4 w-4\" />\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No users found</h3>\n                <p className=\"text-gray-500 mb-6\">\n                  {searchQuery ? \"Try adjusting your search query\" : \"There are no users in the system yet\"}\n                </p>\n                <Button onClick={() => setShowAddUserDialog(true)}>\n                  <UserPlus className=\"mr-2 h-4 w-4\" />\n                  Add User\n                </Button>\n              </CardContent>\n            )}\n          </Card>\n\n          {/* Role explanation */}\n          <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <UserIcon className=\"h-5 w-5 mr-2 text-gray-600\" />\n                  User Role\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600\">\n                  Regular users can create tickets, track status, comment, and use the knowledge base & chatbot.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <ShieldCheck className=\"h-5 w-5 mr-2 text-blue-600\" />\n                  Agent Role\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600\">\n                  Support agents can resolve tickets, comment, update status, and manage assigned tickets.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <ShieldCheck className=\"h-5 w-5 mr-2 text-red-600\" />\n                  Admin Role\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600\">\n                  Administrators have full access to manage users, assign roles, configure settings, and view all tickets.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Edit Dialog */}\n          <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Edit User</DialogTitle>\n                <DialogDescription>Update user details and role</DialogDescription>\n              </DialogHeader>\n\n              <Form {...editForm}>\n                <form\n                  onSubmit={editForm.handleSubmit((data) => {\n                    if (!editingUser) return;\n                    updateUserMutation.mutate({ id: editingUser.id, data });\n                  })}\n                  className=\"space-y-4\"\n                >\n                  <FormField\n                    control={editForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Role</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select role\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"user\">User</SelectItem>\n                              <SelectItem value=\"agent\">Agent</SelectItem>\n                              <SelectItem value=\"admin\">Admin</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>New password (optional)</FormLabel>\n                        <FormControl>\n                          <Input type=\"password\" {...field} />\n                        </FormControl>\n                        <FormDescription>Leave blank if you don't want to change the password</FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <DialogFooter>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setShowEditDialog(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={updateUserMutation.isLoading}>\n                      {updateUserMutation.isLoading ? \"Saving...\" : \"Save Changes\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          {/* Delete confirm */}\n          <Dialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Confirm Deletion</DialogTitle>\n              </DialogHeader>\n\n              <DialogDescription>\n                Are you sure you want to delete user <strong>{userToDelete?.name}</strong>? This action is irreversible.\n              </DialogDescription>\n\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setShowDeleteConfirm(false)}>\n                  Cancel\n                </Button>\n\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => {\n                    if (!userToDelete) return;\n                    deleteUserMutation.mutate(userToDelete.id);\n                  }}\n                  disabled={deleteUserMutation.isLoading}\n                >\n                  {deleteUserMutation.isLoading ? \"Deleting...\" : \"Delete\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25949},"client/src/pages/settings-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport {\n  User,\n  Bell,\n  Shield,\n  Palette,\n  Globe,\n  Database,\n  Mail,\n  Phone,\n  Building,\n  UserCheck,\n  Key,\n  Download,\n  Upload,\n  Trash2,\n  Save,\n  Settings,\n  Eye,\n  EyeOff\n} from \"lucide-react\";\n\n// Profile form schema\nconst profileFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  companyName: z.string().optional(),\n  department: z.string().optional(),\n  designation: z.string().optional(),\n  contactNumber: z.string().optional(),\n});\n\n// Password form schema\nconst passwordFormSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Notification preferences schema\nconst notificationFormSchema = z.object({\n  emailNotifications: z.boolean(),\n  pushNotifications: z.boolean(),\n  ticketUpdates: z.boolean(),\n  assignmentNotifications: z.boolean(),\n  weeklyReports: z.boolean(),\n  maintenanceAlerts: z.boolean(),\n});\n\n// Theme preferences schema\nconst themeFormSchema = z.object({\n  theme: z.enum([\"light\", \"dark\", \"system\"]),\n  language: z.enum([\"en\", \"es\", \"fr\", \"de\", \"pt\"]),\n  timezone: z.string(),\n  dateFormat: z.enum([\"MM/DD/YYYY\", \"DD/MM/YYYY\", \"YYYY-MM-DD\"]),\n  timeFormat: z.enum([\"12\", \"24\"]),\n});\n\ntype ProfileFormData = z.infer<typeof profileFormSchema>;\ntype PasswordFormData = z.infer<typeof passwordFormSchema>;\ntype NotificationFormData = z.infer<typeof notificationFormSchema>;\ntype ThemeFormData = z.infer<typeof themeFormSchema>;\n\nexport default function SettingsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n  const queryClient = useQueryClient();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n\n  // Profile form\n  const profileForm = useForm<ProfileFormData>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      companyName: user?.companyName || \"\",\n      department: user?.department || \"\",\n      designation: user?.designation || \"\",\n      contactNumber: user?.contactNumber || \"\",\n    },\n  });\n\n  // Password form\n  const passwordForm = useForm<PasswordFormData>({\n    resolver: zodResolver(passwordFormSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Notification form\n  const notificationForm = useForm<NotificationFormData>({\n    resolver: zodResolver(notificationFormSchema),\n    defaultValues: {\n      emailNotifications: true,\n      pushNotifications: true,\n      ticketUpdates: true,\n      assignmentNotifications: true,\n      weeklyReports: false,\n      maintenanceAlerts: true,\n    },\n  });\n\n  // Theme form\n  const themeForm = useForm<ThemeFormData>({\n    resolver: zodResolver(themeFormSchema),\n    defaultValues: {\n      theme: \"system\",\n      language: \"en\",\n      timezone: \"UTC\",\n      dateFormat: \"MM/DD/YYYY\",\n      timeFormat: \"12\",\n    },\n  });\n\n  // Profile update mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      return await apiRequest(\"PUT\", `/api/users/${user?.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update profile\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Password update mutation\n  const updatePasswordMutation = useMutation({\n    mutationFn: async (data: PasswordFormData) => {\n      return await apiRequest(\"PUT\", `/api/users/${user?.id}/password`, {\n        currentPassword: data.currentPassword,\n        newPassword: data.newPassword,\n      });\n    },\n    onSuccess: () => {\n      passwordForm.reset();\n      toast({\n        title: \"Password updated\",\n        description: \"Your password has been changed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update password\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Export data mutation\n  const exportDataMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/users/${user?.id}/export`);\n      return response;\n    },\n    onSuccess: (data) => {\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `user-data-${user?.username}-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Data exported\",\n        description: \"Your data has been exported successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Export failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onProfileSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const onPasswordSubmit = (data: PasswordFormData) => {\n    updatePasswordMutation.mutate(data);\n  };\n\n  const onNotificationSubmit = (data: NotificationFormData) => {\n    // Save notification preferences locally or to backend\n    localStorage.setItem(\"notificationPreferences\", JSON.stringify(data));\n    toast({\n      title: \"Preferences saved\",\n      description: \"Your notification preferences have been saved.\",\n    });\n  };\n\n  const onThemeSubmit = (data: ThemeFormData) => {\n    // Save theme preferences locally\n    localStorage.setItem(\"themePreferences\", JSON.stringify(data));\n    toast({\n      title: \"Preferences saved\",\n      description: \"Your appearance preferences have been saved.\",\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar isMobile={isMobile} isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} title=\"Settings\" />\n\n        <main className=\"flex-1 overflow-auto p-4 md:p-6\">\n          <div className=\"max-w-6xl mx-auto space-y-6\">\n            {/* Page Header */}\n            <div className=\"flex items-center space-x-3\">\n              <Settings className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Settings</h1>\n                <p className=\"text-gray-500\">Manage your account settings and preferences</p>\n              </div>\n            </div>\n\n            <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-5\">\n                <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\">\n                  <User className=\"h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">Profile</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">Security</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\">\n                  <Bell className=\"h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">Notifications</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"appearance\" className=\"flex items-center space-x-2\">\n                  <Palette className=\"h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">Appearance</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"data\" className=\"flex items-center space-x-2\">\n                  <Database className=\"h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">Data</span>\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Profile Tab */}\n              <TabsContent value=\"profile\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <User className=\"h-5 w-5\" />\n                      <span>Profile Information</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Update your personal information and contact details\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...profileForm}>\n                      <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-6\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                          <FormField\n                            control={profileForm.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Full Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Your full name\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={profileForm.control}\n                            name=\"email\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Email Address</FormLabel>\n                                <FormControl>\n                                  <Input type=\"email\" placeholder=\"your.email@company.com\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={profileForm.control}\n                            name=\"companyName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Company Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Your company\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={profileForm.control}\n                            name=\"department\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Department</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Your department\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={profileForm.control}\n                            name=\"designation\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Job Title</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Your job title\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={profileForm.control}\n                            name=\"contactNumber\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Phone Number</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"flex justify-end\">\n                          <Button \n                            type=\"submit\" \n                            disabled={updateProfileMutation.isPending}\n                            className=\"flex items-center space-x-2\"\n                          >\n                            <Save className=\"h-4 w-4\" />\n                            <span>{updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}</span>\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n\n                {/* Account Info */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Account Information</CardTitle>\n                    <CardDescription>View your account details and status</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label>Username</Label>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\">{user?.username}</Badge>\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label>Role</Label>\n                        <div className=\"flex items-center space-x-2\">\n                          <UserCheck className=\"h-4 w-4 text-green-600\" />\n                          <Badge variant=\"secondary\" className=\"capitalize\">{user?.role}</Badge>\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label>Account Created</Label>\n                        <p className=\"text-sm text-gray-600\">\n                          {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"N/A\"}\n                        </p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label>Account Status</Label>\n                        <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Active</Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Security Tab */}\n              <TabsContent value=\"security\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Key className=\"h-5 w-5\" />\n                      <span>Change Password</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Update your password to keep your account secure\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...passwordForm}>\n                      <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-6\">\n                        <FormField\n                          control={passwordForm.control}\n                          name=\"currentPassword\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Current Password</FormLabel>\n                              <FormControl>\n                                <div className=\"relative\">\n                                  <Input \n                                    type={showCurrentPassword ? \"text\" : \"password\"}\n                                    placeholder=\"Enter your current password\" \n                                    {...field} \n                                  />\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                    onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                                  >\n                                    {showCurrentPassword ? (\n                                      <EyeOff className=\"h-4 w-4\" />\n                                    ) : (\n                                      <Eye className=\"h-4 w-4\" />\n                                    )}\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={passwordForm.control}\n                          name=\"newPassword\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>New Password</FormLabel>\n                              <FormControl>\n                                <div className=\"relative\">\n                                  <Input \n                                    type={showNewPassword ? \"text\" : \"password\"}\n                                    placeholder=\"Enter your new password\" \n                                    {...field} \n                                  />\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                    onClick={() => setShowNewPassword(!showNewPassword)}\n                                  >\n                                    {showNewPassword ? (\n                                      <EyeOff className=\"h-4 w-4\" />\n                                    ) : (\n                                      <Eye className=\"h-4 w-4\" />\n                                    )}\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormDescription>\n                                Password must be at least 6 characters long\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={passwordForm.control}\n                          name=\"confirmPassword\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Confirm New Password</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"password\"\n                                  placeholder=\"Confirm your new password\" \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex justify-end\">\n                          <Button \n                            type=\"submit\" \n                            disabled={updatePasswordMutation.isPending}\n                            className=\"flex items-center space-x-2\"\n                          >\n                            <Key className=\"h-4 w-4\" />\n                            <span>{updatePasswordMutation.isPending ? \"Updating...\" : \"Update Password\"}</span>\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n\n                {/* Security Settings */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Security Settings</CardTitle>\n                    <CardDescription>Additional security options for your account</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Two-Factor Authentication</Label>\n                        <p className=\"text-sm text-gray-500\">Add an extra layer of security to your account</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Enable 2FA\n                      </Button>\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Login Notifications</Label>\n                        <p className=\"text-sm text-gray-500\">Get notified when someone signs into your account</p>\n                      </div>\n                      <Switch defaultChecked />\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Notifications Tab */}\n              <TabsContent value=\"notifications\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Bell className=\"h-5 w-5\" />\n                      <span>Notification Preferences</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Choose what notifications you want to receive\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...notificationForm}>\n                      <form onSubmit={notificationForm.handleSubmit(onNotificationSubmit)} className=\"space-y-6\">\n                        <div className=\"space-y-4\">\n                          <FormField\n                            control={notificationForm.control}\n                            name=\"emailNotifications\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                                <div className=\"space-y-0.5\">\n                                  <FormLabel className=\"text-base flex items-center space-x-2\">\n                                    <Mail className=\"h-4 w-4\" />\n                                    <span>Email Notifications</span>\n                                  </FormLabel>\n                                  <FormDescription>\n                                    Receive notifications via email\n                                  </FormDescription>\n                                </div>\n                                <FormControl>\n                                  <Switch\n                                    checked={field.value}\n                                    onCheckedChange={field.onChange}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={notificationForm.control}\n                            name=\"pushNotifications\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                                <div className=\"space-y-0.5\">\n                                  <FormLabel className=\"text-base flex items-center space-x-2\">\n                                    <Bell className=\"h-4 w-4\" />\n                                    <span>Push Notifications</span>\n                                  </FormLabel>\n                                  <FormDescription>\n                                    Receive push notifications in your browser\n                                  </FormDescription>\n                                </div>\n                                <FormControl>\n                                  <Switch\n                                    checked={field.value}\n                                    onCheckedChange={field.onChange}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={notificationForm.control}\n                            name=\"ticketUpdates\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                                <div className=\"space-y-0.5\">\n                                  <FormLabel className=\"text-base\">Ticket Updates</FormLabel>\n                                  <FormDescription>\n                                    Get notified when your tickets are updated\n                                  </FormDescription>\n                                </div>\n                                <FormControl>\n                                  <Switch\n                                    checked={field.value}\n                                    onCheckedChange={field.onChange}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={notificationForm.control}\n                            name=\"assignmentNotifications\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                                <div className=\"space-y-0.5\">\n                                  <FormLabel className=\"text-base\">Assignment Notifications</FormLabel>\n                                  <FormDescription>\n                                    Get notified when tickets are assigned to you\n                                  </FormDescription>\n                                </div>\n                                <FormControl>\n                                  <Switch\n                                    checked={field.value}\n                                    onCheckedChange={field.onChange}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={notificationForm.control}\n                            name=\"weeklyReports\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                                <div className=\"space-y-0.5\">\n                                  <FormLabel className=\"text-base\">Weekly Reports</FormLabel>\n                                  <FormDescription>\n                                    Receive weekly summary reports\n                                  </FormDescription>\n                                </div>\n                                <FormControl>\n                                  <Switch\n                                    checked={field.value}\n                                    onCheckedChange={field.onChange}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={notificationForm.control}\n                            name=\"maintenanceAlerts\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                                <div className=\"space-y-0.5\">\n                                  <FormLabel className=\"text-base\">Maintenance Alerts</FormLabel>\n                                  <FormDescription>\n                                    Get notified about system maintenance\n                                  </FormDescription>\n                                </div>\n                                <FormControl>\n                                  <Switch\n                                    checked={field.value}\n                                    onCheckedChange={field.onChange}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"flex justify-end\">\n                          <Button type=\"submit\" className=\"flex items-center space-x-2\">\n                            <Save className=\"h-4 w-4\" />\n                            <span>Save Preferences</span>\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Appearance Tab */}\n              <TabsContent value=\"appearance\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Palette className=\"h-5 w-5\" />\n                      <span>Appearance & Language</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Customize how the application looks and behaves\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...themeForm}>\n                      <form onSubmit={themeForm.handleSubmit(onThemeSubmit)} className=\"space-y-6\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                          <FormField\n                            control={themeForm.control}\n                            name=\"theme\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Theme</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select theme\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"light\">Light</SelectItem>\n                                    <SelectItem value=\"dark\">Dark</SelectItem>\n                                    <SelectItem value=\"system\">System</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormDescription>\n                                  Choose your preferred color scheme\n                                </FormDescription>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={themeForm.control}\n                            name=\"language\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Language</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select language\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"en\">English</SelectItem>\n                                    <SelectItem value=\"es\">Espa√±ol</SelectItem>\n                                    <SelectItem value=\"fr\">Fran√ßais</SelectItem>\n                                    <SelectItem value=\"de\">Deutsch</SelectItem>\n                                    <SelectItem value=\"pt\">Portugu√™s</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={themeForm.control}\n                            name=\"timezone\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Timezone</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select timezone\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"UTC\">UTC</SelectItem>\n                                    <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                                    <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                                    <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                                    <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                                    <SelectItem value=\"Europe/London\">London</SelectItem>\n                                    <SelectItem value=\"Europe/Paris\">Paris</SelectItem>\n                                    <SelectItem value=\"Asia/Tokyo\">Tokyo</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={themeForm.control}\n                            name=\"dateFormat\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Date Format</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select date format\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                                    <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                                    <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={themeForm.control}\n                            name=\"timeFormat\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Time Format</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select time format\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"12\">12-hour (AM/PM)</SelectItem>\n                                    <SelectItem value=\"24\">24-hour</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"flex justify-end\">\n                          <Button type=\"submit\" className=\"flex items-center space-x-2\">\n                            <Save className=\"h-4 w-4\" />\n                            <span>Save Preferences</span>\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Data Tab */}\n              <TabsContent value=\"data\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Database className=\"h-5 w-5\" />\n                      <span>Data Management</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Export your data or manage your account\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"space-y-0.5\">\n                          <Label className=\"text-base\">Export Data</Label>\n                          <p className=\"text-sm text-gray-500\">\n                            Download a copy of all your data including tickets, comments, and profile information\n                          </p>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => exportDataMutation.mutate()}\n                          disabled={exportDataMutation.isPending}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Download className=\"h-4 w-4\" />\n                          <span>{exportDataMutation.isPending ? \"Exporting...\" : \"Export Data\"}</span>\n                        </Button>\n                      </div>\n\n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"space-y-0.5\">\n                          <Label className=\"text-base\">Import Data</Label>\n                          <p className=\"text-sm text-gray-500\">\n                            Import data from a previous export file\n                          </p>\n                        </div>\n                        <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n                          <Upload className=\"h-4 w-4\" />\n                          <span>Import Data</span>\n                        </Button>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-medium text-red-600\">Danger Zone</h3>\n                      <div className=\"flex items-center justify-between p-4 border border-red-200 rounded-lg bg-red-50\">\n                        <div className=\"space-y-0.5\">\n                          <Label className=\"text-base text-red-900\">Delete Account</Label>\n                          <p className=\"text-sm text-red-700\">\n                            permanently delete your account and all associated data. This action cannot be undone.\n                          </p>\n                        </div>\n                        <Button variant=\"destructive\" className=\"flex items-center space-x-2\">\n                          <Trash2 className=\"h-4 w-4\" />\n                          <span>Delete Account</span>\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":43983}}}